
/*!
\file
\ingroup utils
Doxygen docs generated from the TypeId database.
\note This file is automatically generated by \p print-introspected-doxygen.cc. Do not edit this file! Edit that file instead.
*/

/*!

\class ns3::A2A4RsrqHandoverAlgorithm

<h3>Config Paths</h3>

ns3::A2A4RsrqHandoverAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::A2A4RsrqHandoverAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::A2A4RsrqHandoverAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>NeighbourCellOffset</b>: Minimum offset between the serving and the best neighbour cell to trigger the handover. Expressed in quantized range of [0..34] as per Section 9.1.7 of 3GPP TS 36.133.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ServingCellThreshold</b>: If the RSRQ of the serving cell is worse than this threshold, neighbour cells are consider for handover. Expressed in quantized range of [0..34] as per Section 9.1.7 of 3GPP TS 36.133.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:34</li>
    <li>Initial value: 30</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::A3RsrpHandoverAlgorithm

<h3>Config Paths</h3>

ns3::A3RsrpHandoverAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::A3RsrpHandoverAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::A3RsrpHandoverAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Hysteresis</b>: Handover margin (hysteresis) in dB (rounded to the nearest multiple of 0.5 dB)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: uint8_t 0:15</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TimeToTrigger</b>: Time during which neighbour cell's RSRP must continuously higher than serving cell's RSRP in order to trigger a handover
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2.56e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AaashClient

<h3>Config Paths</h3>

ns3::AaashClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DashClient/$ns3::AaashClient"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::AaashClient"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::DashClient</h3>
<ul>
<li><b>Protocol</b>: The type of TCP protocol to use.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TargetDt</b>: The target buffering time
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3.5e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VideoId</b>: The Id of the video that is played.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>bufferSpace</b>: The buffer space in bytes
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 30000000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>window</b>: The window for measuring the average throughput (Time)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::DashClient</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 656 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AarfcdWifiManager

<h3>Config Paths</h3>

ns3::AarfcdWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::AarfcdWifiManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManagers/[i]/$ns3::AarfcdWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxRtsWnd</b>: Maximum value for RTS window of AARF-CD
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 40</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSuccessThreshold</b>: Maximum value of the success threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 60</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinRtsWnd</b>: Minimum value for RTS window of AARF-CD
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinSuccessThreshold</b>: The minimum value for the success threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinTimerThreshold</b>: The minimum value for the 'timer' threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SuccessK</b>: Multiplication factor for the success threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TimerK</b>: Multiplication factor for the timer threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TurnOffRtsAfterRateDecrease</b>: If true the RTS mechanism will be turned off when the rate will be decreased
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TurnOnRtsAfterRateIncrease</b>: If true the RTS mechanism will be turned on when the rate will be increased
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 464 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AarfWifiManager

<h3>Config Paths</h3>

ns3::AarfWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::AarfWifiManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManagers/[i]/$ns3::AarfWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxSuccessThreshold</b>: Maximum value of the success threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 60</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinSuccessThreshold</b>: The minimum value for the success threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinTimerThreshold</b>: The minimum value for the 'timer' threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SuccessK</b>: Multiplication factor for the success threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TimerK</b>: Multiplication factor for the timer threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 448 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AcousticModemEnergyModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>IdlePowerW</b>: The modem Idle power in Watts
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.158</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RxPowerW</b>: The modem Rx power in Watts
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.158</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SleepPowerW</b>: The modem Sleep power in Watts
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.0058</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPowerW</b>: The modem Tx power in Watts
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TotalEnergyConsumption</b>: Total energy consumption of the modem device.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AdhocWifiMac

<h3>Config Paths</h3>

ns3::AdhocWifiMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::AdhocWifiMac"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>BE_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BE_BlockAckThreshold</b>: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BE_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BE access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BE_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BE access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BE_Txop</b>: Queue that manages packets belonging to AC_BE access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>BK_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BK_BlockAckThreshold</b>: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BK_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BK access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BK_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BK access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BK_Txop</b>: Queue that manages packets belonging to AC_BK access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>CtsToSelfSupported</b>: Use CTS to Self when using a rate that is not in the basic rate set.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>QosSupported</b>: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShortSlotTimeSupported</b>: Whether or not short slot time is supported (only used by ERP APs or STAs).
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Ssid</b>: The ssid we want to belong to.
  <ul>
    <li>Set with class:  \ref ns3::SsidValue</li>
    <li>Underlying type: \p Ssid</li>
    <li>Initial value: ssid=default</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Txop</b>: The Txop object.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Txop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>VI_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VI_BlockAckThreshold</b>: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VI_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VI access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VI_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VI access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VI_Txop</b>: Queue that manages packets belonging to AC_VI access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>VO_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VO_BlockAckThreshold</b>: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VO_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VO access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VO_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VO access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VO_Txop</b>: Queue that manages packets belonging to AC_VO access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>AckedMpdu</b>: An MPDU that was successfully acknowledged, via either a Normal Ack or a Block Ack.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>DroppedMpdu</b>: An MPDU that was dropped for the given reason (see WifiMacDropReason).<br>%Callback signature: ns3::WifiMac::DroppedMpduCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: A packet has been dropped in the MAC layer before being queued for transmission. This trace source is fired, e.g., when an AP's MAC receives from the upper layer a packet destined to a station that is not associated with the AP or a STA's MAC receives a packet from the upper layer while it is not associated with any AP.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MpduResponseTimeout</b>: An MPDU whose response was not received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason) and the TXVECTOR used to transmit the MPDU. This trace source is fired when a CTS is missing after an RTS, when all CTS frames are missing after an MU-RTS, or when a Normal Ack is missing after an MPDU or after a DL MU PPDU acknowledged in SU format.<br>%Callback signature: ns3::WifiMac::MpduResponseTimeoutCallback
</li>
<li><b>NAckedMpdu</b>: An MPDU that was negatively acknowledged via a Block Ack.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>PsduMapResponseTimeout</b>: A PSDU map for which not all the responses were received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason), the set of MAC addresses of the stations that did not respond and the total number of stations that had to respond. This trace source is fired when not all the addressed stations responded to an MU-BAR Trigger frame (either sent as a SU frame or aggregated to PSDUs in the DL MU PPDU), a Basic Trigger Frame or a BSRP Trigger Frame.<br>%Callback signature: ns3::WifiMac::PsduMapResponseTimeoutCallback
</li>
<li><b>PsduResponseTimeout</b>: A PSDU whose response was not received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason) and the TXVECTOR used to transmit the PSDU. This trace source is fired when a BlockAck is missing after an A-MPDU, a BlockAckReq (possibly in the context of the acknowledgment of a DL MU PPDU in SU format) or a TB PPDU (in the latter case the missing BlockAck is a Multi-STA BlockAck).<br>%Callback signature: ns3::WifiMac::PsduResponseTimeoutCallback
</li>
<li><b>TxErrHeader</b>: The header of unsuccessfuly transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
<li><b>TxOkHeader</b>: The header of successfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 752 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AlohaNoackMacHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AlohaNoackNetDevice

<h3>Config Paths</h3>

ns3::AlohaNoackNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::AlohaNoackNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Address</b>: The MAC address of this device.
  <ul>
    <li>Set with class:  \ref ns3::Mac48AddressValue</li>
    <li>Underlying type: \p Mac48Address</li>
    <li>Initial value: 12:34:56:78:90:12</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mtu</b>: The Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:65535</li>
    <li>Initial value: 1500</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Phy</b>: The PHY layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Object></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Queue</b>: packets being transmitted get queued here
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<Packet>></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 240 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AlwaysLosChannelConditionModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AmpduSubframeHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AmpduTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AmrrWifiManager

<h3>Config Paths</h3>

ns3::AmrrWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::AmrrWifiManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManagers/[i]/$ns3::AmrrWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>FailureRatio</b>: Ratio of minimum erroneous transmissions needed to switch to a lower rate
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.333333</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSuccessThreshold</b>: Maximum number of consecutive success periods needed to switch to a higher rate
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinSuccessThreshold</b>: Minimum number of consecutive success periods needed to switch to a higher rate
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SuccessRatio</b>: Ratio of maximum erroneous transmissions needed to switch to a higher rate
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: The interval between decisions about rate control changes
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 448 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AmsduSubframeHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AntennaModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::aodv::DeferredRouteOutputTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::aodv::RerrHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::aodv::RoutingProtocol

<h3>Config Paths</h3>

ns3::aodv::RoutingProtocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::aodv::RoutingProtocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ActiveRouteTimeout</b>: Period of time during which the route is considered to be valid
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>AllowedHelloLoss</b>: Number of hello messages which may be loss for valid link.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BlackListTimeout</b>: Time for which the node is put into the blacklist = RreqRetries * NetTraversalTime
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5.6e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DeletePeriod</b>: DeletePeriod is intended to provide an upper bound on the time for which an upstream node A can have a neighbor B as an active next hop for destination D, while B has invalidated the route to D. = 5 * max (HelloInterval, ActiveRouteTimeout)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.5e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DestinationOnly</b>: Indicates only the destination may respond to this RREQ.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableBroadcast</b>: Indicates whether a broadcast data packets forwarding enable.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableHello</b>: Indicates whether a hello messages enable.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GratuitousReply</b>: Indicates whether a gratuitous RREP should be unicast to the node originated route discovery.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HelloInterval</b>: HELLO messages emission interval.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxQueueLen</b>: Maximum number of packets that we allow a routing protocol to buffer.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxQueueTime</b>: Maximum time packets can be queued (in seconds)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MyRouteTimeout</b>: Value of lifetime field in RREP generating by this node = 2 * max(ActiveRouteTimeout, PathDiscoveryTime)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.12e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NetDiameter</b>: Net diameter measures the maximum possible number of hops between two nodes in the network
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 35</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NetTraversalTime</b>: Estimate of the average net traversal time = 2 * NodeTraversalTime * NetDiameter
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2.8e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NextHopWait</b>: Period of our waiting for the neighbour's RREP_ACK = 10 ms + NodeTraversalTime
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NodeTraversalTime</b>: Conservative estimate of the average one hop traversal time for packets and should include queuing delays, interrupt processing times and transfer times.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +4e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PathDiscoveryTime</b>: Estimate of maximum time needed to find route in network = 2 * NetTraversalTime
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5.6e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RerrRateLimit</b>: Maximum number of RERR per second.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RreqRateLimit</b>: Maximum number of RREQ per second.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RreqRetries</b>: Maximum number of retransmissions of RREQ to discover a route
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TimeoutBuffer</b>: Provide a buffer for the timeout.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TtlIncrement</b>: TTL increment for each attempt using the expanding ring search for RREQ dissemination.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TtlStart</b>: Initial TTL value for RREQ.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TtlThreshold</b>: Maximum TTL value for expanding ring search, TTL = NetDiameter is used beyond this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UniformRv</b>: Access to the underlying UniformRandomVariable
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UniformRandomVariable></li>
    <li>Initial value: ns3::UniformRandomVariable</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 800 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::aodv::RrepAckHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::aodv::RrepHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::aodv::RreqHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::aodv::TypeHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AparfWifiManager

<h3>Config Paths</h3>

ns3::AparfWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::AparfWifiManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManagers/[i]/$ns3::AparfWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>FailThreshold</b>: The minimum number of failed transmissions to try a new power or rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PowerDecrementStep</b>: Step size for decrement the power.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PowerIncrementStep</b>: Step size for increment the power.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PowerThreshold</b>: The maximum number of power changes.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RateDecrementStep</b>: Step size for decrement the rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RateIncrementStep</b>: Step size for increment the rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SuccessThreshold1</b>: The minimum number of successful transmissions in "High" state to try a new power or rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SuccessThreshold2</b>: The minimum number of successful transmissions in "Low" state to try a new power or rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>PowerChange</b>: The transmission power has change<br>%Callback signature: ns3::WifiRemoteStationManager::PowerChangeTracedCallback
</li>
<li><b>RateChange</b>: The transmission rate has change<br>%Callback signature: ns3::WifiRemoteStationManager::RateChangeTracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 456 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Application

<h3>Config Paths</h3>

ns3::Application is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ApplicationPacketProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The packet plus its socket address that serve as the output for this probe<br>%Callback signature: ns3::Packet::AddressTracedCallback
</li>
<li><b>OutputBytes</b>: The number of bytes in the packet<br>%Callback signature: ns3::Packet::SizeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ApWifiMac

<h3>Config Paths</h3>

ns3::ApWifiMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::ApWifiMac"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BeaconGeneration</b>: Whether or not beacons are generated.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BeaconInterval</b>: Delay between two beacons
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.024e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BeaconJitter</b>: A uniform random variable to cause the initial beacon starting time (after simulation time 0) to be distributed between 0 and the BeaconInterval.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UniformRandomVariable></li>
    <li>Initial value: ns3::UniformRandomVariable</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BsrLifetime</b>: Lifetime of Buffer Status Reports received from stations.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableBeaconJitter</b>: If beacons are enabled, whether to jitter the initial send event.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableNonErpProtection</b>: Whether or not protection mechanism should be used when non-ERP STAs are present within the BSS.This parameter is only used when ERP is supported by the AP.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>BE_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BE_BlockAckThreshold</b>: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BE_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BE access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BE_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BE access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BE_Txop</b>: Queue that manages packets belonging to AC_BE access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>BK_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BK_BlockAckThreshold</b>: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BK_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BK access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BK_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BK access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BK_Txop</b>: Queue that manages packets belonging to AC_BK access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>CtsToSelfSupported</b>: Use CTS to Self when using a rate that is not in the basic rate set.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>QosSupported</b>: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShortSlotTimeSupported</b>: Whether or not short slot time is supported (only used by ERP APs or STAs).
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Ssid</b>: The ssid we want to belong to.
  <ul>
    <li>Set with class:  \ref ns3::SsidValue</li>
    <li>Underlying type: \p Ssid</li>
    <li>Initial value: ssid=default</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Txop</b>: The Txop object.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Txop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>VI_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VI_BlockAckThreshold</b>: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VI_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VI access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VI_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VI access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VI_Txop</b>: Queue that manages packets belonging to AC_VI access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>VO_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VO_BlockAckThreshold</b>: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VO_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VO access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VO_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VO access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VO_Txop</b>: Queue that manages packets belonging to AC_VO access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>AssociatedSta</b>: A station associated with this access point.<br>%Callback signature: ns3::ApWifiMac::AssociationCallback
</li>
<li><b>DeAssociatedSta</b>: A station lost association with this access point.<br>%Callback signature: ns3::ApWifiMac::AssociationCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>AckedMpdu</b>: An MPDU that was successfully acknowledged, via either a Normal Ack or a Block Ack.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>DroppedMpdu</b>: An MPDU that was dropped for the given reason (see WifiMacDropReason).<br>%Callback signature: ns3::WifiMac::DroppedMpduCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: A packet has been dropped in the MAC layer before being queued for transmission. This trace source is fired, e.g., when an AP's MAC receives from the upper layer a packet destined to a station that is not associated with the AP or a STA's MAC receives a packet from the upper layer while it is not associated with any AP.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MpduResponseTimeout</b>: An MPDU whose response was not received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason) and the TXVECTOR used to transmit the MPDU. This trace source is fired when a CTS is missing after an RTS, when all CTS frames are missing after an MU-RTS, or when a Normal Ack is missing after an MPDU or after a DL MU PPDU acknowledged in SU format.<br>%Callback signature: ns3::WifiMac::MpduResponseTimeoutCallback
</li>
<li><b>NAckedMpdu</b>: An MPDU that was negatively acknowledged via a Block Ack.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>PsduMapResponseTimeout</b>: A PSDU map for which not all the responses were received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason), the set of MAC addresses of the stations that did not respond and the total number of stations that had to respond. This trace source is fired when not all the addressed stations responded to an MU-BAR Trigger frame (either sent as a SU frame or aggregated to PSDUs in the DL MU PPDU), a Basic Trigger Frame or a BSRP Trigger Frame.<br>%Callback signature: ns3::WifiMac::PsduMapResponseTimeoutCallback
</li>
<li><b>PsduResponseTimeout</b>: A PSDU whose response was not received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason) and the TXVECTOR used to transmit the PSDU. This trace source is fired when a BlockAck is missing after an A-MPDU, a BlockAckReq (possibly in the context of the acknowledgment of a DL MU PPDU in SU format) or a TB PPDU (in the latter case the missing BlockAck is a Multi-STA BlockAck).<br>%Callback signature: ns3::WifiMac::PsduResponseTimeoutCallback
</li>
<li><b>TxErrHeader</b>: The header of unsuccessfuly transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
<li><b>TxOkHeader</b>: The header of successfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1000 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ArfWifiManager

<h3>Config Paths</h3>

ns3::ArfWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::ArfWifiManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManagers/[i]/$ns3::ArfWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>SuccessThreshold</b>: The minimum number of successful transmissions to try a new rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TimerThreshold</b>: The 'timer' threshold in the ARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 424 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ArpCache

<h3>Config Paths</h3>

ns3::ArpCache is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Ipv4L3Protocol/InterfaceList/[i]/ArpCache"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/CacheList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AliveTimeout</b>: When this timeout expires, the matching cache entry needs refreshing
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.2e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DeadTimeout</b>: When this timeout expires, a new attempt to resolve the matching entry is made
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxRetries</b>: Number of retransmissions of ArpRequest before marking dead
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PendingQueueSize</b>: The size of the queue for packets pending an arp reply.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>WaitReplyTimeout</b>: When this timeout expires, the cache entries will be scanned and entries in WaitReply state will resend ArpRequest unless MaxRetries has been exceeded, in which case the entry is marked dead
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Packet dropped due to ArpCache entry in WaitReply expiring.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ArpHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ArpL3Protocol

<h3>Config Paths</h3>

ns3::ArpL3Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CacheList</b>: The list of ARP caches
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ArpCache></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>RequestJitter</b>: The jitter in ms a node is allowed to wait before sending an ARP request.  Some jitter aims to prevent collisions. By default, the model will wait for a duration in ms defined by a uniform random-variable between 0 and RequestJitter
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=10.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Packet dropped because not enough room in pending queue for a specific cache entry.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Asn1Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AthstatsWifiTraceSink

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Interval</b>: Time interval between reports
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BandwidthManager

<h3>Config Paths</h3>

ns3::BandwidthManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/BandwidthManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BandwidthPartGnb

<h3>Config Paths</h3>

ns3::BandwidthPartGnb is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>FfMacScheduler</b>: The scheduler associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::FfMacScheduler></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NrGnbMac</b>: The MAC associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrGnbMac></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NrGnbPhy</b>: The PHY associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrGnbPhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ComponentCarrier</h3>
<ul>
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CsgIndication</b>: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlBandwidth</b>: Downlink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:262143</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PrimaryCarrier</b>: If true, this Carrier Component will be the Primary Carrier Component (PCC) Only one PCC per eNodeB is (currently) allowed
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlBandwidth</b>: Uplink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlEarfcn</b>: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 18000:262143</li>
    <li>Initial value: 18100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BandwidthPartUe

<h3>Config Paths</h3>

ns3::BandwidthPartUe is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/ComponentCarrierMapUe/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/ComponentCarrierMapUe/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>NrUeMac</b>: The MAC associated to this BandwidthPartUe
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrUeMac></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NrUePhy</b>: The PHY associated to this BandwidthPartUe
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrUePhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ComponentCarrier</h3>
<ul>
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CsgIndication</b>: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlBandwidth</b>: Downlink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:262143</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PrimaryCarrier</b>: If true, this Carrier Component will be the Primary Carrier Component (PCC) Only one PCC per eNodeB is (currently) allowed
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlBandwidth</b>: Uplink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlEarfcn</b>: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 18000:262143</li>
    <li>Initial value: 18100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BandwidthRequestHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BaseStationNetDevice

<h3>Config Paths</h3>

ns3::BaseStationNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BSScheduler</b>: Downlink Scheduler for BS
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BSScheduler></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BsIpcsPacketClassifier</b>: The uplink IP packet classifier attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::IpcsClassifier></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BwReqOppSize</b>: The bandwidth request opportunity size in symbols
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:256</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DcdInterval</b>: Time between transmission of DCD messages. Maximum value is 10s.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialRangInterval</b>: Time between Initial Ranging regions assigned by the BS. Maximum is 2s
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IntervalT8</b>: Wait for DSA/DSC Acknowledge timeout. Maximum 300ms.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LinkManager</b>: The link manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BSLinkManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxRangCorrectionRetries</b>: Number of retries on contention Ranging Requests
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:16</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RangReqOppSize</b>: The ranging opportunity size in symbols
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:256</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SSManager</b>: The ss manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::SSManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Scheduler</b>: The BS scheduler attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BSScheduler></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ServiceFlowManager</b>: The service flow manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ServiceFlowManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UcdInterval</b>: Time between transmission of UCD messages. Maximum value is 10s.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UplinkScheduler</b>: The uplink scheduler attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UplinkScheduler></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WimaxNetDevice</h3>
<ul>
<li><b>BandwidthManager</b>: The bandwidth manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BandwidthManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BroadcastConnection</b>: Broadcast connection
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxConnection></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BurstProfileManager</b>: The burst profile manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BurstProfileManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Channel</b>: The channel attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxChannel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ConnectionManager</b>: The connection manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ConnectionManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialRangingConnection</b>: Initial ranging connection
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxConnection></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:1500</li>
    <li>Initial value: 1400</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Phy</b>: The PHY layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxPhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RTG</b>: receive/transmit transition gap.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:120</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TTG</b>: transmit/receive transition gap.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:120</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>BSPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>BSRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>BSRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>BSTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>BSTxDrop</b>: A packet has been dropped in the MAC layer before being queued for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WimaxNetDevice</h3>
<ul>
<li><b>Rx</b>: Receive trace<br>%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback
</li>
<li><b>Tx</b>: Transmit trace<br>%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 752 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BasicEnergyHarvester

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>HarvestablePower</b>: The harvestable power [Watts] that the energy harvester is allowed to harvest. By default, the model will allow to harvest an amount of power defined by a uniformly distributed random variable in 0 and 2.0 Watts
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=2.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PeriodicHarvestedPowerUpdateInterval</b>: Time between two consecutive periodic updates of the harvested power. By default, the value is updated every 1 s
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>HarvestedPower</b>: Harvested power by the BasicEnergyHarvester.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
<li><b>TotalEnergyHarvested</b>: Total energy harvested by the harvester.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BasicEnergySource

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>BasicEnergyHighBatteryThreshold</b>: High battery threshold for basic energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BasicEnergyLowBatteryThreshold</b>: Low battery threshold for basic energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BasicEnergySourceInitialEnergyJ</b>: Initial energy stored in basic energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BasicEnergySupplyVoltageV</b>: Initial supply voltage for basic energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PeriodicEnergyUpdateInterval</b>: Time between two consecutive periodic energy updates.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RemainingEnergy</b>: Remaining energy at BasicEnergySource.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BeaconPayloadHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BeamformingHelperBase

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BeamManager

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 240 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BinaryErrorModel

<h3>Config Paths</h3>

ns3::BinaryErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BinaryErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BinaryErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BinaryErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BinaryErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BinaryErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BinaryErrorModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ErrorModel</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BlockAckManager

<h3>Config Paths</h3>

ns3::BlockAckManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/Txop/$ns3::QosTxop/BlockAckManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/VO_Txop/BlockAckManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/VI_Txop/BlockAckManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/BE_Txop/BlockAckManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/BK_Txop/BlockAckManager"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>AgreementState</b>: The state of the ADDBA handshake<br>%Callback signature: ns3::BlockAckManager::AgreementStateTracedCallback
</li>
</ul>
<b>Size</b> of this type is 240 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BooleanProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The bool that serves as output for this probe<br>%Callback signature: ns3::TracedValueCallback::Bool
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BridgeChannel

<h3>Config Paths</h3>

ns3::BridgeChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::BridgeChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::BridgeChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::BridgeChannel"</li>
<li>"/ChannelList/[i]/$ns3::BridgeChannel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BridgeNetDevice

<h3>Config Paths</h3>

ns3::BridgeNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BridgeNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>EnableLearning</b>: Enable the learning mode of the Learning Bridge
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ExpirationTime</b>: Time it takes for learned MAC state entry to expire.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1500</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BSLinkManager

<h3>Config Paths</h3>

ns3::BSLinkManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/LinkManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/LinkManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BSScheduler

<h3>Config Paths</h3>

ns3::BSScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/BSScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/Scheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/BSScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/Scheduler"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BSSchedulerRtps

<h3>Config Paths</h3>

ns3::BSSchedulerRtps is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/BSScheduler/$ns3::BSSchedulerRtps"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/Scheduler/$ns3::BSSchedulerRtps"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/BSScheduler/$ns3::BSSchedulerRtps"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/Scheduler/$ns3::BSSchedulerRtps"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BSSchedulerSimple

<h3>Config Paths</h3>

ns3::BSSchedulerSimple is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/BSScheduler/$ns3::BSSchedulerSimple"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/Scheduler/$ns3::BSSchedulerSimple"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/BSScheduler/$ns3::BSSchedulerSimple"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/Scheduler/$ns3::BSSchedulerSimple"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Building

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Boundaries</b>: The boundaries of this Building as a value of type ns3::Box
  <ul>
    <li>Set with class:  \ref ns3::BoxValue</li>
    <li>Underlying type: \p Box</li>
    <li>Initial value: 0|0|0|0|0|0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ExternalWallsType</b>: The type of material of which the external walls are made
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Wood|ConcreteWithWindows|ConcreteWithoutWindows|StoneBlocks</li>
    <li>Initial value: ConcreteWithWindows</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Id</b>: The id (unique integer) of this Building.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>NFloors</b>: The number of floors of this building.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NRoomsX</b>: The number of rooms in the X axis.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NRoomsY</b>: The number of rooms in the Y axis.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Type</b>: The type of building
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Residential|Office|Commercial</li>
    <li>Initial value: Residential</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BuildingListPriv

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>BuildingList</b>: The list of all buildings created during the simulation.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Building></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BuildingsChannelConditionModel

<h3>Config Paths</h3>

ns3::BuildingsChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::BuildingsChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::BuildingsChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::BuildingsChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::BuildingsChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::BuildingsChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::BuildingsChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::BuildingsChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::BuildingsChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::BuildingsChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BuildingsPropagationLossModel

<h3>Config Paths</h3>

ns3::BuildingsPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>InternalWallLoss</b>: Additional loss for each internal wall [dB]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaExtWalls</b>: Standard deviation of the normal distribution used to calculate the shadowing due to ext walls
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaIndoor</b>: Standard deviation of the normal distribution used to calculate the shadowing for indoor nodes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaOutdoor</b>: Standard deviation of the normal distribution used to calculate the shadowing for outdoor nodes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BulkSendApplication

<h3>Config Paths</h3>

ns3::BulkSendApplication is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::BulkSendApplication"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>EnableSeqTsSizeHeader</b>: Add SeqTsSizeHeader to each packet
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Local</b>: The Address on which to bind the socket. If not set, it is generated automatically.
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxBytes</b>: The total number of bytes to send. Once these bytes are sent, no data  is sent again. The value zero means that there is no limit.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint64_t 0:18446744073709551615</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Protocol</b>: The type of protocol to use.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SendSize</b>: The amount of data to send each time.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 512</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxWithSeqTsSize</b>: A new packet is created with SeqTsSizeHeader<br>%Callback signature: ns3::PacketSink::SeqTsSizeCallback
</li>
</ul>
<b>Size</b> of this type is 256 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BurstErrorModel

<h3>Config Paths</h3>

ns3::BurstErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BurstSize</b>: The number of packets being corrupted at one drop.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=1|Max=4]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BurstStart</b>: The decision variable attached to this error model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErrorRate</b>: The burst error event.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ErrorModel</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BurstProfileManager

<h3>Config Paths</h3>

ns3::BurstProfileManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/BurstProfileManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BwpManagerAlgorithm

<h3>Config Paths</h3>

ns3::BwpManagerAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::BwpManagerGnb/BwpManagerAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::BwpManagerGnb/BwpManagerAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::BwpManagerGnb/BwpManagerAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::BwpManagerGnb/BwpManagerAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager/$ns3::BwpManagerUe/BwpManagerAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::BwpManagerUe/BwpManagerAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager/$ns3::BwpManagerUe/BwpManagerAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::BwpManagerUe/BwpManagerAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::BwpManagerGnb/BwpManagerAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::BwpManagerGnb/BwpManagerAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager/$ns3::BwpManagerUe/BwpManagerAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeComponentCarrierManager/$ns3::BwpManagerUe/BwpManagerAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::BwpManagerGnb/BwpManagerAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::BwpManagerGnb/BwpManagerAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager/$ns3::BwpManagerUe/BwpManagerAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeComponentCarrierManager/$ns3::BwpManagerUe/BwpManagerAlgorithm"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BwpManagerAlgorithmStatic

<h3>Config Paths</h3>

ns3::BwpManagerAlgorithmStatic is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::BwpManagerGnb/BwpManagerAlgorithm/$ns3::BwpManagerAlgorithmStatic"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::BwpManagerGnb/BwpManagerAlgorithm/$ns3::BwpManagerAlgorithmStatic"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::BwpManagerGnb/BwpManagerAlgorithm/$ns3::BwpManagerAlgorithmStatic"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::BwpManagerGnb/BwpManagerAlgorithm/$ns3::BwpManagerAlgorithmStatic"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager/$ns3::BwpManagerUe/BwpManagerAlgorithm/$ns3::BwpManagerAlgorithmStatic"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::BwpManagerUe/BwpManagerAlgorithm/$ns3::BwpManagerAlgorithmStatic"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager/$ns3::BwpManagerUe/BwpManagerAlgorithm/$ns3::BwpManagerAlgorithmStatic"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::BwpManagerUe/BwpManagerAlgorithm/$ns3::BwpManagerAlgorithmStatic"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::BwpManagerGnb/BwpManagerAlgorithm/$ns3::BwpManagerAlgorithmStatic"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::BwpManagerGnb/BwpManagerAlgorithm/$ns3::BwpManagerAlgorithmStatic"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager/$ns3::BwpManagerUe/BwpManagerAlgorithm/$ns3::BwpManagerAlgorithmStatic"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeComponentCarrierManager/$ns3::BwpManagerUe/BwpManagerAlgorithm/$ns3::BwpManagerAlgorithmStatic"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::BwpManagerGnb/BwpManagerAlgorithm/$ns3::BwpManagerAlgorithmStatic"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::BwpManagerGnb/BwpManagerAlgorithm/$ns3::BwpManagerAlgorithmStatic"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager/$ns3::BwpManagerUe/BwpManagerAlgorithm/$ns3::BwpManagerAlgorithmStatic"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeComponentCarrierManager/$ns3::BwpManagerUe/BwpManagerAlgorithm/$ns3::BwpManagerAlgorithmStatic"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DGBR_DISCRETE_AUT_LARGE</b>: BWP index to which flows of DGBR_DISCRETE_AUT_LARGE Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DGBR_DISCRETE_AUT_SMALL</b>: BWP index to which flows of DGBR_DISCRETE_AUT_SMALL Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DGBR_ELECTRICITY</b>: BWP index to which flows of DGBR_ELECTRICITY Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DGBR_INTER_SERV_87</b>: BWP index to which flows of DGBR_INTER_SERV_87 Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DGBR_INTER_SERV_88</b>: BWP index to which flows of DGBR_INTER_SERV_88 Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DGBR_ITS</b>: BWP index to which flows of DGBR_ITS Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DGBR_VISUAL_CONTENT_89</b>: BWP index to which flows of DGBR_VISUAL_CONTENT_89 Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DGBR_VISUAL_CONTENT_90</b>: BWP index to which flows of DGBR_VISUAL_CONTENT_90 Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GBR_CONV_VIDEO</b>: BWP index to which flows of GBR_CONV_VIDEO Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GBR_CONV_VOICE</b>: BWP index to which flows of this Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GBR_GAMING</b>: BWP index to which flows of GBR_GAMING Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GBR_LIVE_UL_71</b>: BWP index to which flows of GBR_LIVE_UL_71 Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GBR_LIVE_UL_72</b>: BWP index to which flows of GBR_LIVE_UL_72 Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GBR_LIVE_UL_73</b>: BWP index to which flows of GBR_LIVE_UL_73 Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GBR_LIVE_UL_74</b>: BWP index to which flows of GBR_LIVE_UL_74 Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GBR_LIVE_UL_76</b>: BWP index to which flows of GBR_LIVE_UL_76 Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GBR_MC_PUSH_TO_TALK</b>: BWP index to which flows of GBR_MC_PUSH_TO_TALK Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GBR_MC_VIDEO</b>: BWP index to which flows of GBR_MC_VIDEO Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GBR_NMC_PUSH_TO_TALK</b>: BWP index to which flows of GBR_NMC_PUSH_TO_TALK Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GBR_NON_CONV_VIDEO</b>: BWP index to which flows of GBR_NON_CONV_VIDEO Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GBR_V2X</b>: BWP index to which flows of GBR_V2X Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NGBR_IMS</b>: BWP index to which flows of NGBR_IMS Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NGBR_LOW_LAT_EMBB</b>: BWP index to which flows of NGBR_LOW_LAT_EMBB Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NGBR_MC_DATA</b>: BWP index to which flows of NGBR_MC_DATA Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NGBR_MC_DELAY_SIGNAL</b>: BWP index to which flows of NGBR_MC_DELAY_SIGNAL Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NGBR_V2X</b>: BWP index to which flows of NGBR_V2X Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NGBR_VIDEO_TCP_DEFAULT</b>: BWP index to which flows of NGBR_VIDEO_TCP_DEFAULT Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NGBR_VIDEO_TCP_OPERATOR</b>: BWP index to which flows of NGBR_VIDEO_TCP_OPERATOR Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NGBR_VIDEO_TCP_PREMIUM</b>: BWP index to which flows of NGBR_VIDEO_TCP_PREMIUM Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NGBR_VOICE_VIDEO_GAMING</b>: BWP index to which flows of NGBR_VOICE_VIDEO_GAMING Qci type should be forwarded.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:5</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BwpManagerGnb

<h3>Config Paths</h3>

ns3::BwpManagerGnb is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::BwpManagerGnb"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::BwpManagerGnb"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::BwpManagerGnb"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::BwpManagerGnb"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::BwpManagerGnb"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::BwpManagerGnb"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::BwpManagerGnb"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::BwpManagerGnb"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BwpManagerAlgorithm</b>: The algorithm pointer
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BwpManagerAlgorithm></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 344 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BwpManagerUe

<h3>Config Paths</h3>

ns3::BwpManagerUe is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager/$ns3::BwpManagerUe"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::BwpManagerUe"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager/$ns3::BwpManagerUe"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::BwpManagerUe"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager/$ns3::BwpManagerUe"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeComponentCarrierManager/$ns3::BwpManagerUe"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager/$ns3::BwpManagerUe"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeComponentCarrierManager/$ns3::BwpManagerUe"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BwpManagerAlgorithm</b>: The algorithm pointer
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BwpManagerAlgorithm></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 336 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CalendarScheduler

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Reverse</b>: Store events in reverse chronological order
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CaraWifiManager

<h3>Config Paths</h3>

ns3::CaraWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::CaraWifiManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManagers/[i]/$ns3::CaraWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>FailureThreshold</b>: The number of consecutive transmissions failure to decrease the rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ProbeThreshold</b>: The number of consecutive transmissions failure to activate the RTS probe.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SuccessThreshold</b>: The minimum number of successful transmissions to try a new rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Timeout</b>: The 'timer' in the CARA algorithm
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 432 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CcHelper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DlBandwidth</b>: Set Dl Bandwidth for the first carrier component
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:100</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlEarfcn</b>: Set Dl Channel [EARFCN] for the first carrier component
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NumberOfComponentCarriers</b>: Set the number of Component Carriers to setup per eNodeBCurrently the maximum Number of Component Carriers allowed is 2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:2</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlBandwidth</b>: Set Dl Bandwidth for the first carrier component
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:100</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlEarfcn</b>: Set Ul Channel [EARFCN] for the first carrier component
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CellScanBeamforming

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>BeamSearchAngleStep</b>: Angle step when searching for the best beam
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 30</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CellScanBeamformingAzimuthZenith

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Channel

<h3>Config Paths</h3>

ns3::Channel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel"</li>
<li>"/ChannelList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ChannelCondition

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ChannelConditionModel

<h3>Config Paths</h3>

ns3::ChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ChannelListPriv

<h3>Config Paths</h3>

ns3::ChannelListPriv is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>""</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ChannelList</b>: The list of all channels created during the simulation.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Channel></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Chunk

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CobaltQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>BlueThreshold</b>: The Threshold after which Blue is enabled
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +4e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CeThreshold</b>: The CoDel CE threshold for marking packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +9.22337e+18ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Decrement</b>: Pdrop decrement Value
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.000244141</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Increment</b>: Pdrop increment value
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.00390625</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Interval</b>: The Cobalt algorithm interval
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: 100ms</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSize</b>: The maximum number of packets/bytes accepted by this queue disc.
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 1500000B</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Pdrop</b>: Marking Probability
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Target</b>: The Cobalt algorithm target queue delay
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: 5ms</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Count</b>: Cobalt count<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>DropNext</b>: Time until next packet drop<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>DropState</b>: Dropping state<br>%Callback signature: ns3::TracedValueCallback::Bool
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1776 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CoDelQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>CeThreshold</b>: The CoDel CE threshold for marking packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +9.22337e+18ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Interval</b>: The CoDel algorithm interval
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: 100ms</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSize</b>: The maximum number of packets/bytes accepted by this queue disc.
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 1500000B</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinBytes</b>: The CoDel algorithm minbytes parameter.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1500</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Target</b>: The CoDel algorithm target queue delay
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: 5ms</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Count</b>: CoDel count<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>DropNext</b>: Time until next packet drop<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>DropState</b>: Dropping state<br>%Callback signature: ns3::TracedValueCallback::Bool
</li>
<li><b>LastCount</b>: CoDel lastcount<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1264 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CommandPayloadHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ComponentCarrier

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CsgIndication</b>: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlBandwidth</b>: Downlink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:262143</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PrimaryCarrier</b>: If true, this Carrier Component will be the Primary Carrier Component (PCC) Only one PCC per eNodeB is (currently) allowed
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlBandwidth</b>: Uplink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlEarfcn</b>: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 18000:262143</li>
    <li>Initial value: 18100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ComponentCarrierBaseStation

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ComponentCarrier</h3>
<ul>
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CsgIndication</b>: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlBandwidth</b>: Downlink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:262143</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PrimaryCarrier</b>: If true, this Carrier Component will be the Primary Carrier Component (PCC) Only one PCC per eNodeB is (currently) allowed
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlBandwidth</b>: Uplink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlEarfcn</b>: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 18000:262143</li>
    <li>Initial value: 18100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ComponentCarrierEnb

<h3>Config Paths</h3>

ns3::ComponentCarrierEnb is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>FfMacScheduler</b>: The scheduler associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::FfMacScheduler></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LteEnbMac</b>: The MAC associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteEnbMac></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LteEnbPhy</b>: The PHY associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteEnbPhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LteFfrAlgorithm</b>: The FFR algorithm associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteFfrAlgorithm></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ComponentCarrier</h3>
<ul>
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CsgIndication</b>: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlBandwidth</b>: Downlink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:262143</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PrimaryCarrier</b>: If true, this Carrier Component will be the Primary Carrier Component (PCC) Only one PCC per eNodeB is (currently) allowed
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlBandwidth</b>: Uplink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlEarfcn</b>: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 18000:262143</li>
    <li>Initial value: 18100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ComponentCarrierUe

<h3>Config Paths</h3>

ns3::ComponentCarrierUe is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>LteUeMac</b>: The MAC associated to this UeNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteUeMac></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LteUePhy</b>: The PHY associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteUePhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ComponentCarrier</h3>
<ul>
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CsgIndication</b>: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlBandwidth</b>: Downlink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:262143</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PrimaryCarrier</b>: If true, this Carrier Component will be the Primary Carrier Component (PCC) Only one PCC per eNodeB is (currently) allowed
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlBandwidth</b>: Uplink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlEarfcn</b>: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 18000:262143</li>
    <li>Initial value: 18100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConfigStore

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>FileFormat</b>: Type of file format
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p RawText|Xml</li>
    <li>Initial value: RawText</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Filename</b>: The file where the configuration should be saved to or loaded from.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: ""</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Mode</b>: Configuration mode
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p None|Load|Save</li>
    <li>Initial value: None</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>SaveDeprecated</b>: Save DEPRECATED attributes
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConnectionManager

<h3>Config Paths</h3>

ns3::ConnectionManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/ConnectionManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantAccelerationMobilityModel

<h3>Config Paths</h3>

ns3::ConstantAccelerationMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::ConstantAccelerationMobilityModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantObssPdAlgorithm

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ObssPdAlgorithm</h3>
<ul>
<li><b>ObssPdLevel</b>: The current OBSS PD level (dBm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -101:-62</li>
    <li>Initial value: -82</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ObssPdLevelMax</b>: Maximum value (dBm) of OBSS PD level.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -101:-62</li>
    <li>Initial value: -62</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ObssPdLevelMin</b>: Minimum value (dBm) of OBSS PD level.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -101:-62</li>
    <li>Initial value: -82</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPowerRefMimo</b>: The MIMO reference TX power level (dBm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPowerRefSiso</b>: The SISO reference TX power level (dBm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 21</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::ObssPdAlgorithm</h3>
<ul>
<li><b>Reset</b>: Trace CCA Reset event<br>%Callback signature: ns3::ObssPdAlgorithm::ResetTracedCallback
</li>
</ul>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantPositionMobilityModel

<h3>Config Paths</h3>

ns3::ConstantPositionMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::ConstantPositionMobilityModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantRandomVariable

<h3>Config Paths</h3>

ns3::ConstantRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac/ProbeDelay/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/ForwardingDelay/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice/MeshUnderJitter/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::ConstantRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ConstantRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Constant</b>: The constant value returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantRateWifiManager

<h3>Config Paths</h3>

ns3::ConstantRateWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::ConstantRateWifiManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManagers/[i]/$ns3::ConstantRateWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ControlMode</b>: The transmission mode to use for every RTS packet transmission.
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: OfdmRate6Mbps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DataMode</b>: The transmission mode to use for every data packet transmission
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: OfdmRate6Mbps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 392 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantSpectrumPropagationLossModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Loss</b>: Path loss (dB) between transmitter and receiver
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantSpeedPropagationDelayModel

<h3>Config Paths</h3>

ns3::ConstantSpeedPropagationDelayModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::ConstantSpeedPropagationDelayModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::ConstantSpeedPropagationDelayModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::ConstantSpeedPropagationDelayModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::ConstantSpeedPropagationDelayModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Speed</b>: The propagation speed (m/s) in the propagation medium being considered. The default value is the propagation speed of light in the vacuum.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.99792e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantVelocityMobilityModel

<h3>Config Paths</h3>

ns3::ConstantVelocityMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::ConstantVelocityMobilityModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CosineAntennaModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>HorizontalBeamwidth</b>: The 3 dB horizontal beamwidth (degrees). A beamwidth of 360 deg corresponds to constant gain
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:360</li>
    <li>Initial value: 120</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxGain</b>: The gain (dB) at the antenna boresight (the direction of maximum gain)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Orientation</b>: The angle (degrees) that expresses the orientation of the antenna on the x-y plane relative to the x axis
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -360:360</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VerticalBeamwidth</b>: The 3 dB vertical beamwidth (degrees). A beamwidth of 360 deg corresponds to constant gain
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:360</li>
    <li>Initial value: 360</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Cost231PropagationLossModel

<h3>Config Paths</h3>

ns3::Cost231PropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BSAntennaHeight</b>: BS Antenna Height (default is 50m).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The Frequency  (default is 2.3 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.3e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Lambda</b>: The wavelength  (default is 2.3 GHz at 300 000 km/s).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.130435</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinDistance</b>: The distance under which the propagation model refuses to give results (m).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SSAntennaHeight</b>: SS Antenna Height (default is 3m).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CounterCalculator<uint32_t>

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CqaFfMacScheduler

<h3>Config Paths</h3>

ns3::CqaFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::CqaFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::CqaFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::CqaFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::CqaFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqaMetric</b>: CqaFfMacScheduler metric type that can be: CqaFf, CqaPf
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: CqaFf</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p SRS_UL_CQI|PUSCH_UL_CQI</li>
    <li>Initial value: SRS_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1432 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CsmaChannel

<h3>Config Paths</h3>

ns3::CsmaChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::CsmaChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::CsmaChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::CsmaChannel"</li>
<li>"/ChannelList/[i]/$ns3::CsmaChannel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DataRate</b>: The transmission data rate to be provided to devices connected to the channel
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 4294967295bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Delay</b>: Transmission delay through the channel
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CsmaNetDevice

<h3>Config Paths</h3>

ns3::CsmaNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Address</b>: The MAC address of this device.
  <ul>
    <li>Set with class:  \ref ns3::Mac48AddressValue</li>
    <li>Underlying type: \p Mac48Address</li>
    <li>Initial value: ff:ff:ff:ff:ff:ff</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EncapsulationMode</b>: The link-layer encapsulation type to use.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Dix|Llc</li>
    <li>Initial value: Dix</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1500</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReceiveEnable</b>: Enable or disable the receiver section of the device.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReceiveErrorModel</b>: The receiver error model used to simulate packet loss
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ErrorModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SendEnable</b>: Enable or disable the transmitter section of the device.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxQueue</b>: A queue to use as the transmit queue in the device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<Packet>></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxBackoff</b>: Trace source indicating a packet has been delayed by the CSMA backoff process<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 544 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CtrlBAckRequestHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CtrlBAckResponseHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CtrlTriggerHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DashClient

<h3>Config Paths</h3>

ns3::DashClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DashClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Protocol</b>: The type of TCP protocol to use.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TargetDt</b>: The target buffering time
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3.5e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VideoId</b>: The Id of the video that is played.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>bufferSpace</b>: The buffer space in bytes
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 30000000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>window</b>: The window for measuring the average throughput (Time)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 648 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DashServer

<h3>Config Paths</h3>

ns3::DashServer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DashServer"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Local</b>: The Address on which to Bind the rx socket.
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Protocol</b>: The type id of the protocol to use for the rx socket.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 248 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DataCollectionObject

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Dcd

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DefaultEmlsrManager

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>SwitchAuxPhy</b>: Whether Aux PHY should switch channel to operate on the link on which the Main PHY was operating before moving to the link of the Aux PHY.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::EmlsrManager</h3>
<ul>
<li><b>AuxPhyChannelWidth</b>: The maximum channel width (MHz) supported by Aux PHYs
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 20:160</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EmlsrLinkSet</b>: IDs of the links on which EMLSR mode will be enabled. An empty set indicates to disable EMLSR.
  <ul>
    <li>Set with class:  \ref ns3::AttributeContainerValue<N3ns313UintegerValueE, NSt7__cxx114listIN3ns33PtrINS1_13UintegerValueEEESaIS4_EEE></li>
    <li>Underlying type: \p ns3::Ptr<N3ns313UintegerValueE></li>
    <li>Initial value: </li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>EmlsrPaddingDelay</b>: The EMLSR Paddind Delay (not used by AP MLDs). Possible values are 0 us, 32 us, 64 us, 128 us or 256 us.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +0ns:+256000ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EmlsrTransitionDelay</b>: The EMLSR Transition Delay (not used by AP MLDs). Possible values are 0 us, 16 us, 32 us, 64 us, 128 us or 256 us.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +0ns:+256000ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MainPhyId</b>: The ID of the main PHY (position in the vector of PHYs held by WifiNetDevice). This attribute cannot be set after initialization.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ResetCamState</b>: Whether to reset the state of the ChannelAccessManager associated with the link on which the main PHY has just switched to.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 336 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DefaultSimulatorImpl

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DeterministicRandomVariable

<h3>Config Paths</h3>

ns3::DeterministicRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac/ProbeDelay/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/ForwardingDelay/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice/MeshUnderJitter/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::DeterministicRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::DeterministicRandomVariable"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DeviceEnergyModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DeviceNameTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DhcpClient

<h3>Config Paths</h3>

ns3::DhcpClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Collect</b>: Time for which offer collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RTRS</b>: Time for retransmission of Discover message
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReRequest</b>: Time after which request will be resent to next server
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Transactions</b>: The possible value of transaction numbers
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1000000.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>ExpireLease</b>: A lease expires<br>%Callback signature: ns3::Ipv4Address::TracedCallback
</li>
<li><b>NewLease</b>: Get a NewLease<br>%Callback signature: ns3::Ipv4Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 512 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DhcpHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 568 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DhcpServer

<h3>Config Paths</h3>

ns3::DhcpServer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpServer"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>FirstAddress</b>: The First valid address that can be given.
  <ul>
    <li>Set with class:  \ref ns3::Ipv4AddressValue</li>
    <li>Underlying type: \p Ipv4Address</li>
    <li>Initial value: 102.102.102.102</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Gateway</b>: Address of default gateway
  <ul>
    <li>Set with class:  \ref ns3::Ipv4AddressValue</li>
    <li>Underlying type: \p Ipv4Address</li>
    <li>Initial value: 102.102.102.102</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LastAddress</b>: The Last valid address that can be given.
  <ul>
    <li>Set with class:  \ref ns3::Ipv4AddressValue</li>
    <li>Underlying type: \p Ipv4Address</li>
    <li>Initial value: 102.102.102.102</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LeaseTime</b>: Lease for which address will be leased.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PoolAddresses</b>: Pool of addresses to provide on request.
  <ul>
    <li>Set with class:  \ref ns3::Ipv4AddressValue</li>
    <li>Underlying type: \p Ipv4Address</li>
    <li>Initial value: 102.102.102.102</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PoolMask</b>: Mask of the pool of addresses.
  <ul>
    <li>Set with class:  \ref ns3::Ipv4MaskValue</li>
    <li>Underlying type: \p Ipv4Mask</li>
    <li>Initial value: 102.102.102.102</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RebindTime</b>: Time after which client should rebind.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2.5e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RenewTime</b>: Time after which client should renew.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.5e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 296 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DirectPathBeamforming

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DistanceBasedThreeGppSpectrumPropagationLossModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>MaxDistance</b>: The maximum distance in meters between nodes in order to calculate fast fading and beamforming.For all signals for which nodes are at higher distance will be returned 0 PSD.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ThreeGppSpectrumPropagationLossModel</h3>
<ul>
<li><b>ChannelModel</b>: The channel model. It needs to implement the MatrixBasedChannelModel interface
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Object></li>
    <li>Initial value: ns3::ThreeGppChannelModel</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DlMap

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::AirtimeLinkMetricCalculator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Dot11MetricTid</b>: TID used to calculate metric (data rate)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>TestLength</b>: Number of bytes in test frame (a constant 1024 in the standard)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:65535</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::HwmpProtocol

<h3>Config Paths</h3>

ns3::dot11s::HwmpProtocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/RoutingProtocol/$ns3::dot11s::HwmpProtocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DoFlag</b>: Destination only HWMP flag
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Dot11MeshHWMPactivePathTimeout</b>: Lifetime of reactive routing information
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5.12e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Dot11MeshHWMPactiveRootTimeout</b>: Lifetime of proactive routing information
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5.12e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Dot11MeshHWMPmaxPREQretries</b>: Maximum number of retries before we suppose the destination to be unreachable
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:255</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Dot11MeshHWMPnetDiameterTraversalTime</b>: Time we suppose the packet to go from one edge of the network to another
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.024e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Dot11MeshHWMPpathToRootInterval</b>: Interval between two successive proactive PREQs
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2.048e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Dot11MeshHWMPperrMinInterval</b>: Minimal interval between to successive PREQs
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.024e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Dot11MeshHWMPpreqMinInterval</b>: Minimal interval between to successive PREQs
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.024e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Dot11MeshHWMPrannInterval</b>: Lifetime of proactive routing information
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5.12e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxQueueSize</b>: Maximum number of packets we can store when resolving route
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:65535</li>
    <li>Initial value: 255</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxTtl</b>: Initial value of Time To Live field
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 2:255</li>
    <li>Initial value: 32</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RandomStart</b>: Random delay at first proactive PREQ
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RfFlag</b>: Reply and forward flag
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UnicastDataThreshold</b>: Maximum number of broadcast receivers, when we send a broadcast as a chain of unicasts
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UnicastPerrThreshold</b>: Maximum number of PERR receivers, when we send a PERR as a chain of unicasts
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:255</li>
    <li>Initial value: 32</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UnicastPreqThreshold</b>: Maximum number of PREQ receivers, when we send a PREQ as a chain of unicasts
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RouteChange</b>: Routing table changed<br>%Callback signature: ns3::HwmpProtocol::RouteChangeTracedCallback
</li>
<li><b>RouteDiscoveryTime</b>: The time of route discovery procedure<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 480 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::HwmpRtable

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::HwmpTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::PeerLink

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ConfirmTimeout</b>: Confirm timeout
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +4.096e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HoldingTimeout</b>: Holding timeout
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +4.096e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxBeaconLoss</b>: Maximum number of lost beacons before link will be closed
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:65535</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxPacketFailure</b>: Maximum number of failed packets before link will be closed
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:65535</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxRetries</b>: Maximum number of retries
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RetryTimeout</b>: Retry timeout
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +4.096e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 328 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::PeerLinkCloseStart

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::PeerLinkConfirmStart

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::PeerLinkOpenStart

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::PeerManagementProtocol

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>EnableBeaconCollisionAvoidance</b>: Enable/Disable Beacon collision avoidance.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxBeaconShiftValue</b>: Maximum number of TUs for beacon shifting
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxNumberOfPeerLinks</b>: Maximum number of peer links
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 32</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>LinkClose</b>: New peer link closed<br>%Callback signature: ns3::PeerManagementProtocol::LinkOpenCloseTracedCallback
</li>
<li><b>LinkOpen</b>: New peer link opened<br>%Callback signature: ns3::PeerManagementProtocol::LinkOpenCloseTracedCallback
</li>
</ul>
<b>Size</b> of this type is 320 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Dot11sStack

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Root</b>: The MAC address of root mesh point.
  <ul>
    <li>Set with class:  \ref ns3::Mac48AddressValue</li>
    <li>Underlying type: \p Mac48Address</li>
    <li>Initial value: ff:ff:ff:ff:ff:ff</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DoubleProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The double that serves as output for this probe<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DropTailQueue<Packet>

<h3>Config Paths</h3>

ns3::DropTailQueue<Packet> is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/TxQueue/$ns3::DropTailQueue<Packet>"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/TxQueue/$ns3::DropTailQueue<Packet>"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/TxQueue/$ns3::DropTailQueue<Packet>"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::AlohaNoackNetDevice/Queue/$ns3::DropTailQueue<Packet>"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 100p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::Queue<Packet></h3>
<ul>
<li><b>Dequeue</b>: Dequeue a packet from the queue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 304 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DropTailQueue<QueueDiscItem>

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 100p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::Queue<QueueDiscItem></h3>
<ul>
<li><b>Dequeue</b>: Dequeue a packet from the queue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 304 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DsaAck

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DsaReq

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 312 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DsaRsp

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 312 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsdv::DsdvHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsdv::RoutingProtocol

<h3>Config Paths</h3>

ns3::dsdv::RoutingProtocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::dsdv::RoutingProtocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>EnableBuffering</b>: Enables buffering of data packets if no route to destination is available
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableRouteAggregation</b>: Enables Weighted Settling Time for the updates before advertising
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableWST</b>: Enables Weighted Settling Time for the updates before advertising
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Holdtimes</b>: Times the forwarding Interval to purge the route.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxQueueLen</b>: Maximum number of packets that we allow a routing protocol to buffer.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 500</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxQueueTime</b>: Maximum time packets can be queued (in seconds)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxQueuedPacketsPerDst</b>: Maximum number of packets that we allow per destination to buffer.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PeriodicUpdateInterval</b>: Periodic interval between exchange of full routing tables among nodes.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.5e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RouteAggregationTime</b>: Time to aggregate updates before sending them out (in seconds)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SettlingTime</b>: Minimum time an update is to be stored in adv table before sending out in case of change in metric (in seconds)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>WeightedFactor</b>: WeightedFactor for the settling time if Weighted Settling Time is enabled
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.875</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 552 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrFsHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrGraReply

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrNetworkQueue

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionAck

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionAckHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionAckReq

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionAckReqHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionPad1

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionPad1Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionPadn

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionPadnHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionRerr

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionRerrHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionRerrUnreachHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionRerrUnsupportedHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionRrep

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionRrepHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionRreq

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionRreqHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptions

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionSR

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionSRHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrPassiveBuffer

<h3>Config Paths</h3>

ns3::dsr::DsrPassiveBuffer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::dsr::DsrRouting/PassiveBuffer"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrRouteCache

<h3>Config Paths</h3>

ns3::dsr::DsrRouteCache is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::dsr::DsrRouting/RouteCache"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 560 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrRouting

<h3>Config Paths</h3>

ns3::dsr::DsrRouting is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::dsr::DsrRouting"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BlacklistTimeout</b>: The time for a neighbor to stay in blacklist.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BroadcastJitter</b>: The jitter time to avoid collision for broadcast packets.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CacheType</b>: Use Link Cache or use Path Cache
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: LinkCache</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DiscoveryHopLimit</b>: The max discovery hop limit for route requests.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 255</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSubRoute</b>: Enables saving of sub route when receiving route error messages, only available when using path route cache
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GraReplyTableSize</b>: The gratuitous reply table size.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GratReplyHoldoff</b>: The time for gratuitous reply entry to expire.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitStability</b>: The initial stability factor for link cache
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2.5e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LinkAckTimeout</b>: The time a packet in maintenance buffer wait for link acknowledgment.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LinkAcknowledgment</b>: Enable Link layer acknowledgment mechanism
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaintenanceRetries</b>: Maximum number of retransmissions for data packets from maintenance buffer.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxCacheLen</b>: Maximum number of route entries that can be stored in route cache.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxEntriesEachDst</b>: Maximum number of route entries for a single destination to respond.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxMaintLen</b>: Maximum number of packets that can be stored in maintenance buffer.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxMaintTime</b>: Maximum time packets can be queued in maintenance buffer.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxNetworkQueueDelay</b>: The max time for a packet to stay in the network queue.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxNetworkQueueSize</b>: The max number of packet to save in the network queue.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 400</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxRequestPeriod</b>: The max time interval between route requests.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSalvageCount</b>: The max salvage count for a single data packet.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSendBuffLen</b>: Maximum number of packets that can be stored in send buffer.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSendBuffTime</b>: Maximum time packets can be queued in the send buffer .
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinLifeTime</b>: The minimal life time for link cache
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NodeTraversalTime</b>: The time it takes to traverse two neighboring nodes.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +4e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NonPropRequestTimeout</b>: The timeout value for non-propagation request.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NumPriorityQueues</b>: The max number of packet to save in the network queue.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PassiveAckTimeout</b>: The time a packet in maintenance buffer wait for passive acknowledgment.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PassiveBuffer</b>: The passive buffer to manage promisucously received passive ack.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::dsr::DsrPassiveBuffer></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RequestIdSize</b>: Maximum number of request source Ids in the request table.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RequestPeriod</b>: The base time interval between route requests.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RequestTableSize</b>: Maximum number of request entries in the request table, set this as the number of nodes in the simulation.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RetransIncr</b>: The increase time for retransmission timer when facing network congestion
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RouteCache</b>: The route cache for saving routes from route discovery process.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::dsr::DsrRouteCache></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RouteCacheTimeout</b>: Maximum time the route cache can be queued in route cache.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RreqRetries</b>: Maximum number of retransmissions for request discovery of a route.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RreqTable</b>: The request table to manage route requests.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::dsr::DsrRreqTable></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SendBuffInterval</b>: How often to check send buffer for packet with route.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StabilityDecrFactor</b>: The stability decrease factor for link cache
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StabilityIncrFactor</b>: The stability increase factor for link cache
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TryLinkAcks</b>: The number of link acknowledgment to use.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TryPassiveAcks</b>: The number of passive acknowledgment to use.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UniqueRequestIdSize</b>: Maximum number of request Ids in the request table for a single destination.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 256</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseExtends</b>: The extension time for link cache
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.2e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::IpL4Protocol</h3>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Drop DSR packet<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Tx</b>: Send DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1448 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrRreqTable

<h3>Config Paths</h3>

ns3::dsr::DsrRreqTable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::dsr::DsrRouting/RreqTable"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 280 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DsrRoutingHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DynamicQueueLimits

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>HoldTime</b>: The DQL algorithm hold time
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: 1s</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxLimit</b>: Maximum limit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:1879048192</li>
    <li>Initial value: 1879048192</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinLimit</b>: Minimum limit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Limit</b>: Limit value calculated by DQL<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EhtConfiguration

<h3>Config Paths</h3>

ns3::EhtConfiguration is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/EhtConfiguration"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>EmlsrActivated</b>: Whether EMLSR option is activated. If activated, EMLSR mode can be enabled on the EMLSR links by an installed EMLSR Manager.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TidToLinkMappingDl</b>: A list-of-TIDs-indexed map of the list of links where the TIDs are mapped to for the downlink direction. In case a string is used to set this attribute, the string shall contain the (TID list, link list) pairs separated by a semicolon (;); in every pair, the TID list and the link list are separated by a blank space, and the elements of each list are separated by a comma (,) without spaces. E.g., "0,4 1,2,3; 1 0;2 0,1" means that TIDs 0 and 4 are mapped on links 1, 2 and 3; TID 1 is mapped on link 0 and TID 2 is mapped on links 0 and 1. An empty map indicates the default mapping, i.e., all TIDs are mapped to all setup links. If the map contains the mapping for some TID(s), the mapping corresponding to the missing TID(s) remains unchanged. A non-AP MLD includes this mapping in the Association Request frame sent to an AP MLD, unless the AP MLD advertises a negotiation support of 1 and this mapping is such that TIDs are mapped to distinct link sets, in which case the default mapping is included.
  <ul>
    <li>Set with class:  \ref ns3::AttributeContainerValue<N3ns39PairValueINS_23AttributeContainerValueINS_13UintegerValueELc44ENSt7__cxx114listEEES5_EE, NSt7__cxx114listIN3ns33PtrINS1_9PairValueINS1_23AttributeContainerValueINS1_13UintegerValueELc44ES0_EES6_EEEESaIS8_EEE></li>
    <li>Underlying type: \p ns3::Ptr<N3ns39PairValueINS_23AttributeContainerValueINS_13UintegerValueELc44ENSt7__cxx114listEEES5_EE></li>
    <li>Initial value: </li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TidToLinkMappingNegSupport</b>: TID-to-Link Mapping Negotiation Support.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p NOT_SUPPORTED|SAME_LINK_SET|ANY_LINK_SET</li>
    <li>Initial value: ANY_LINK_SET</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TidToLinkMappingUl</b>: A list-of-TIDs-indexed map of the list of links where the TIDs are mapped to for the uplink direction. In case a string is used to set this attribute, the string shall contain the (TID list, link list) pairs separated by a semicolon (;); in every pair, the TID list and the link list are separated by a blank space, and the elements of each list are separated by a comma (,) without spaces. E.g., "0,4 1,2,3; 1 0;2 0,1" means that TIDs 0 and 4 are mapped on links 1, 2 and 3; TID 1 is mapped on link 0 and TID 2 is mapped on links 0 and 1. An empty map indicates the default mapping, i.e., all TIDs are mapped to all setup links. If the map contains the mapping for some TID(s), the mapping corresponding to the missing TID(s) remains unchanged. A non-AP MLD includes this mapping in the Association Request frame sent to an AP MLD, unless the AP MLD advertises a negotiation support of 1 and this mapping is such that TIDs are mapped to distinct link sets, in which case the default mapping is included.
  <ul>
    <li>Set with class:  \ref ns3::AttributeContainerValue<N3ns39PairValueINS_23AttributeContainerValueINS_13UintegerValueELc44ENSt7__cxx114listEEES5_EE, NSt7__cxx114listIN3ns33PtrINS1_9PairValueINS1_23AttributeContainerValueINS1_13UintegerValueELc44ES0_EES6_EEEESaIS8_EEE></li>
    <li>Underlying type: \p ns3::Ptr<N3ns39PairValueINS_23AttributeContainerValueINS_13UintegerValueELc44ENSt7__cxx114listEEES5_EE></li>
    <li>Initial value: </li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TransitionTimeout</b>: The Transition Timeout (not used by non-AP MLDs). Possible values are 0us or 2^n us, with n=7..16.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +0ns:+6.5536e+07ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EhtFrameExchangeManager

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QosFrameExchangeManager</h3>
<ul>
<li><b>PifsRecovery</b>: Perform a PIFS recovery as a response to transmission failure within a TXOP
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SetQueueSize</b>: Whether to set the Queue Size subfield of the QoS Control field of QoS data frames sent by non-AP stations
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1632 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EmlsrManager

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>AuxPhyChannelWidth</b>: The maximum channel width (MHz) supported by Aux PHYs
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 20:160</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EmlsrLinkSet</b>: IDs of the links on which EMLSR mode will be enabled. An empty set indicates to disable EMLSR.
  <ul>
    <li>Set with class:  \ref ns3::AttributeContainerValue<N3ns313UintegerValueE, NSt7__cxx114listIN3ns33PtrINS1_13UintegerValueEEESaIS4_EEE></li>
    <li>Underlying type: \p ns3::Ptr<N3ns313UintegerValueE></li>
    <li>Initial value: </li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>EmlsrPaddingDelay</b>: The EMLSR Paddind Delay (not used by AP MLDs). Possible values are 0 us, 32 us, 64 us, 128 us or 256 us.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +0ns:+256000ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EmlsrTransitionDelay</b>: The EMLSR Transition Delay (not used by AP MLDs). Possible values are 0 us, 16 us, 32 us, 64 us, 128 us or 256 us.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +0ns:+256000ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MainPhyId</b>: The ID of the main PHY (position in the vector of PHYs held by WifiNetDevice). This attribute cannot be set after initialization.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ResetCamState</b>: Whether to reset the state of the ChannelAccessManager associated with the link on which the main PHY has just switched to.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 328 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EmpiricalRandomVariable

<h3>Config Paths</h3>

ns3::EmpiricalRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac/ProbeDelay/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/ForwardingDelay/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice/MeshUnderJitter/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::EmpiricalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::EmpiricalRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Interpolate</b>: Treat the CDF as a smooth distribution and interpolate, default is to treat the CDF as a histogram and sample.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EmuEpcHelper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>EnbDeviceName</b>: The name of the device used for the S1-U interface of the eNB
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: veth1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnbMacAddressBase</b>: First 5 bytes of the eNB MAC address base
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: 00:00:00:eb:00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SgwDeviceName</b>: The name of the device used for the S1-U interface of the SGW
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: veth0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SgwMacAddress</b>: MAC address used for the SGW
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: 00:00:00:59:00:aa</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 584 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EnergyHarvester

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EnergyHarvesterContainer

<h3>Config Paths</h3>

ns3::EnergyHarvesterContainer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::EnergyHarvesterContainer"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EnergySource

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EnergySourceContainer

<h3>Config Paths</h3>

ns3::EnergySourceContainer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::EnergySourceContainer"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcHelper

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcMmeApplication

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 240 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcSgwApplication

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 312 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcUeNas

<h3>Config Paths</h3>

ns3::EpcUeNas is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/EpcUeNas"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/EpcUeNas"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/EpcUeNas"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/EpcUeNas"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>StateTransition</b>: fired upon every UE NAS state transition<br>%Callback signature: ns3::EpcUeNas::StateTracedCallback
</li>
</ul>
<b>Size</b> of this type is 264 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2HandoverCancelHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2HandoverPreparationFailureHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2HandoverRequestAckHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2HandoverRequestHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2LoadInformationHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2ResourceStatusUpdateHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2SnStatusTransferHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2UeContextReleaseHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpsBearer

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Release</b>: Change from 11 to 18 if you need bearer definition as per newer Releases. Reference document: TS 23.203. The change does not impact other LTE code than  bearers definition.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 11</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpsBearerTag

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>bid</b>: The EPS bearer id within the UE to which the packet belongs
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>rnti</b>: The rnti that indicates the UE which packet belongs
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ErlangRandomVariable

<h3>Config Paths</h3>

ns3::ErlangRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac/ProbeDelay/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/ForwardingDelay/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice/MeshUnderJitter/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::ErlangRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ErlangRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>K</b>: The k value for the Erlang distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Lambda</b>: The lambda value for the Erlang distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ErrorChannel

<h3>Config Paths</h3>

ns3::ErrorChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::ErrorChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SimpleChannel/$ns3::ErrorChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::ErrorChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SimpleChannel/$ns3::ErrorChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::ErrorChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SimpleChannel/$ns3::ErrorChannel"</li>
<li>"/ChannelList/[i]/$ns3::ErrorChannel"</li>
<li>"/ChannelList/[i]/$ns3::SimpleChannel/$ns3::ErrorChannel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::SimpleChannel</h3>
<ul>
<li><b>Delay</b>: Transmission delay through the channel
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ErrorModel

<h3>Config Paths</h3>

ns3::ErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ErrorRateModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EthernetHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EthernetTrailer

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ExponentialRandomVariable

<h3>Config Paths</h3>

ns3::ExponentialRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac/ProbeDelay/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/ForwardingDelay/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice/MeshUnderJitter/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::ExponentialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ExponentialRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mean</b>: The mean of the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FcfsWifiQueueScheduler

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DropPolicy</b>: Upon enqueue with full queue, drop oldest (DropOldest) or newest (DropNewest) packet
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p DropOldest|DropNewest</li>
    <li>Initial value: DropNewest</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FdashClient

<h3>Config Paths</h3>

ns3::FdashClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DashClient/$ns3::FdashClient"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::FdashClient"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::DashClient</h3>
<ul>
<li><b>Protocol</b>: The type of TCP protocol to use.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TargetDt</b>: The target buffering time
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3.5e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VideoId</b>: The Id of the video that is played.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>bufferSpace</b>: The buffer space in bytes
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 30000000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>window</b>: The window for measuring the average throughput (Time)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::DashClient</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 656 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FdBetFfMacScheduler

<h3>Config Paths</h3>

ns3::FdBetFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdBetFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdBetFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::FdBetFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::FdBetFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p SRS_UL_CQI|PUSCH_UL_CQI</li>
    <li>Initial value: SRS_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1352 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FdMtFfMacScheduler

<h3>Config Paths</h3>

ns3::FdMtFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdMtFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdMtFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::FdMtFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::FdMtFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p SRS_UL_CQI|PUSCH_UL_CQI</li>
    <li>Initial value: SRS_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1344 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FdNetDevice

<h3>Config Paths</h3>

ns3::FdNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::FdNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Address</b>: The MAC address of this device.
  <ul>
    <li>Set with class:  \ref ns3::Mac48AddressValue</li>
    <li>Underlying type: \p Mac48Address</li>
    <li>Initial value: ff:ff:ff:ff:ff:ff</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EncapsulationMode</b>: The link-layer encapsulation type to use.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Dix|Llc|DixPi</li>
    <li>Initial value: Dix</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RxQueueSize</b>: Maximum size of the read queue.  This value limits number of packets that have been read from the network into a memory buffer but have not yet been processed by the simulator.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Start</b>: The simulation time at which to spin up the device thread.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: The simulation time at which to tear down the device thread.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 528 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FdTbfqFfMacScheduler

<h3>Config Paths</h3>

ns3::FdTbfqFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdTbfqFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdTbfqFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::FdTbfqFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::FdTbfqFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CreditLimit</b>: Flow credit limit (default 625000 bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 625000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CreditableThreshold</b>: Threshold of flow credit (default 0 bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DebtLimit</b>: Flow debt limit (default -625000 bytes)
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t -2147483648:2147483647</li>
    <li>Initial value: -625000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TokenPoolSize</b>: The maximum value of flow token pool (default 1 bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p SRS_UL_CQI|PUSCH_UL_CQI</li>
    <li>Initial value: SRS_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1368 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FfMacScheduler

<h3>Config Paths</h3>

ns3::FfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p SRS_UL_CQI|PUSCH_UL_CQI</li>
    <li>Initial value: SRS_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FifoQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 1000p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1096 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FileAggregator

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1008 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FixedRoomPositionAllocator

<h3>Config Paths</h3>

ns3::FixedRoomPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::FixedRoomPositionAllocator"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FixedRssLossModel

<h3>Config Paths</h3>

ns3::FixedRssLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Rss</b>: The fixed receiver Rss.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -150</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::flame::FlameHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::flame::FlameProtocol

<h3>Config Paths</h3>

ns3::flame::FlameProtocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/RoutingProtocol/$ns3::flame::FlameProtocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BroadcastInterval</b>: How often we must send broadcast packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxCost</b>: Cost threshold after which packet will be dropped
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 3:255</li>
    <li>Initial value: 32</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::flame::FlameRtable

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Lifetime</b>: The lifetime of the routing entry
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.2e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::flame::FlameTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FlameStack

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FlowIdTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FlowMonitor

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DelayBinWidth</b>: The width used in the delay histogram.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.001</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FlowInterruptionsBinWidth</b>: The width used in the flowInterruptions histogram.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FlowInterruptionsMinTime</b>: The minimum inter-arrival time that is considered a flow interruption.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>JitterBinWidth</b>: The width used in the jitter histogram.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.001</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxPerHopDelay</b>: The maximum per-hop delay that should be considered.  Packets still not received after this delay are to be considered lost.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketSizeBinWidth</b>: The width used in the packetSize histogram.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartTime</b>: The time when the monitoring starts.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 280 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FqCobaltFlow

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QueueDiscClass</h3>
<ul>
<li><b>QueueDisc</b>: The queue disc attached to the class
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDisc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FqCobaltQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>BlueThreshold</b>: The Threshold after which Blue is enabled
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +4e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CeThreshold</b>: The FqCobalt CE threshold for marking packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +9.22337e+18ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Decrement</b>: Pdrop decrement Value
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.000244141</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DropBatchSize</b>: The maximum number of packets dropped from the fat flow
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSetAssociativeHash</b>: Enable/Disable Set Associative Hash
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Flows</b>: The number of queues into which the incoming packets are classified
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Increment</b>: Pdrop increment value
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.00390625</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Interval</b>: The CoDel algorithm interval for each FqCobalt queue
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: 100ms</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 10240p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Pdrop</b>: Marking Probability
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Perturbation</b>: The salt used as an additional input to the hash function used to classify packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SetWays</b>: The size of a set of queues (used by set associative hash)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Target</b>: The CoDel algorithm target queue delay for each FqCobalt queue
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: 5ms</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1440 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FqCoDelFlow

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QueueDiscClass</h3>
<ul>
<li><b>QueueDisc</b>: The queue disc attached to the class
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDisc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FqCoDelQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>CeThreshold</b>: The FqCoDel CE threshold for marking packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +9.22337e+18ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DropBatchSize</b>: The maximum number of packets dropped from the fat flow
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSetAssociativeHash</b>: Enable/Disable Set Associative Hash
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Flows</b>: The number of queues into which the incoming packets are classified
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Interval</b>: The CoDel algorithm interval for each FQCoDel queue
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: 100ms</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 10240p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Perturbation</b>: The salt used as an additional input to the hash function used to classify packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SetWays</b>: The size of a set of queues (used by set associative hash)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Target</b>: The CoDel algorithm target queue delay for each FQCoDel queue
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: 5ms</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1416 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FqPieFlow

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QueueDiscClass</h3>
<ul>
<li><b>QueueDisc</b>: The queue disc attached to the class
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDisc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FqPieQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>A</b>: Value of alpha
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.125</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>B</b>: Value of beta
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CeThreshold</b>: The FqPie CE threshold for marking packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +9.22337e+18ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DequeueThreshold</b>: Minimum queue size in bytes before dequeue rate is measured
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 16384</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DropBatchSize</b>: The maximum number of packets dropped from the fat flow
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSetAssociativeHash</b>: Enable/Disable Set Associative Hash
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Flows</b>: The number of queues into which the incoming packets are classified
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MarkEcnThreshold</b>: ECN marking threshold (RFC 8033 suggests 0.1 (i.e., 10%) default)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxBurstAllowance</b>: Current max burst allowance before random drop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 10240p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MeanPktSize</b>: Average of packet size
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Perturbation</b>: The salt used as an additional input to the hash function used to classify packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDelayReference</b>: Desired queue delay
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.5e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SetWays</b>: The size of a set of queues (used by set associative hash)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Supdate</b>: Start time of the update timer
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Tupdate</b>: Time period to calculate drop probability
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.5e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseCapDropAdjustment</b>: Enable/Disable Cap Drop Adjustment feature mentioned in RFC 8033
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseDequeueRateEstimator</b>: Enable/Disable usage of Dequeue Rate Estimator
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseDerandomization</b>: Enable/Disable Derandomization feature mentioned in RFC 8033
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1424 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FragmentationSubheader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FrameCaptureModel

<h3>Config Paths</h3>

ns3::FrameCaptureModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/FrameCaptureModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/FrameCaptureModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CaptureWindow</b>: The duration of the capture window.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +16000ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FrameExchangeManager

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 648 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FriisPropagationLossModel

<h3>Config Paths</h3>

ns3::FriisPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Frequency</b>: The carrier frequency (in Hz) at which propagation occurs (default is 5.15 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5.15e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinLoss</b>: The minimum value (dB) of the total loss, used at short ranges.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SystemLoss</b>: The system loss
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FriisSpectrumPropagationLossModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GammaRandomVariable

<h3>Config Paths</h3>

ns3::GammaRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac/ProbeDelay/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/ForwardingDelay/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice/MeshUnderJitter/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::GammaRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::GammaRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: The alpha value for the gamma distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Beta</b>: The beta value for the gamma distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GaussMarkovMobilityModel

<h3>Config Paths</h3>

ns3::GaussMarkovMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: A constant representing the tunable parameter in the Gauss-Markov model.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Bounds</b>: Bounds of the area to cruise.
  <ul>
    <li>Set with class:  \ref ns3::BoxValue</li>
    <li>Underlying type: \p Box</li>
    <li>Initial value: -100|100|-100|100|0|100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MeanDirection</b>: A random variable used to assign the average direction.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=6.283185307]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MeanPitch</b>: A random variable used to assign the average pitch.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=0.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MeanVelocity</b>: A random variable used to assign the average velocity.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NormalDirection</b>: A gaussian random variable used to calculate the next direction value.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NormalRandomVariable></li>
    <li>Initial value: ns3::NormalRandomVariable[Mean=0.0|Variance=1.0|Bound=10.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NormalPitch</b>: A gaussian random variable used to calculate the next pitch value.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NormalRandomVariable></li>
    <li>Initial value: ns3::NormalRandomVariable[Mean=0.0|Variance=1.0|Bound=10.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NormalVelocity</b>: A gaussian random variable used to calculate the next velocity value.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NormalRandomVariable></li>
    <li>Initial value: ns3::NormalRandomVariable[Mean=0.0|Variance=1.0|Bound=10.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TimeStep</b>: Change current direction and speed after moving for this time.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 304 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GenericBatteryModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>BatteryType</b>: Indicates the battery type used by the model
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p LION_LIPO|NIMH_NICD|LEADACID</li>
    <li>Initial value: LION_LIPO</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CutoffVoltage</b>: The voltage where the battery is considered depleted (V).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ExponentialCapacity</b>: (Q_exp) Cell Capacity at the end of the exponential zone (Ah).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.39</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ExponentialVoltage</b>: (V_exp) Cell voltage at the end of the exponential zone (V).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.75</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FullVoltage</b>: (Q_full) The voltage of the cell when fully charged (V).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 4.18</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InternalResistance</b>: (R) Internal resistance of the cell (Ohms)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.083</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LowBatteryThreshold</b>: Low battery threshold for generic battery model.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxCapacity</b>: (Q) The maximum capacity of the cell (Ah).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.45</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NominalCapacity</b>: (Q_nom) Cell capacity at the end of the nominal zone (Ah)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NominalVoltage</b>: (V_nom) Nominal voltage of the cell (V).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.59</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PeriodicEnergyUpdateInterval</b>: Time between two consecutive periodic energy updates.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TypicalDischargeCurrent</b>: Typical discharge current used in manufacters datasheets (A)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.33</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RemainingEnergy</b>: Remaining energy of generic battery<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 296 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GenericMacHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GlobalRouter

<h3>Config Paths</h3>

ns3::GlobalRouter is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::GlobalRouter"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GnuplotAggregator

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 568 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GrantManagementSubheader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GridBuildingAllocator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DeltaX</b>: The x space between buildings.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DeltaY</b>: The y space between buildings.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GridWidth</b>: The number of objects laid out on a line.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Height</b>: The height of the building (roof level)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LayoutType</b>: The type of layout.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p RowFirst|ColumnFirst</li>
    <li>Initial value: RowFirst</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LengthX</b>: The length of the wall of each building along the X axis.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LengthY</b>: The length of the wall of each building along the X axis.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinX</b>: The x coordinate where the grid starts.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinY</b>: The y coordinate where the grid starts.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GridPositionAllocator

<h3>Config Paths</h3>

ns3::GridPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::GridPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DeltaX</b>: The x space between objects.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DeltaY</b>: The y space between objects.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GridWidth</b>: The number of objects laid out on a line.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LayoutType</b>: The type of layout.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p RowFirst|ColumnFirst</li>
    <li>Initial value: RowFirst</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinX</b>: The x coordinate where the grid starts.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinY</b>: The y coordinate where the grid starts.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Z</b>: The z coordinate of all the positions allocated.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GtpcHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GtpuHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HalfDuplexIdealPhy

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Rate</b>: The PHY rate used by this device
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 1000000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RxAbort</b>: Trace fired when a previously started RX is aborted before time<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxEndError</b>: Trace fired when a previously started RX terminates with an error (packet is corrupted)<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxEndOk</b>: Trace fired when a previously started RX terminates successfully<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxStart</b>: Trace fired when the start of a signal is detected<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxEnd</b>: Trace fired when a previously started transmission is finished<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxStart</b>: Trace fired when a new transmission is started<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 384 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HeapScheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HeConfiguration

<h3>Config Paths</h3>

ns3::HeConfiguration is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/HeConfiguration"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BeMuEdcaTimer</b>: The MU EDCA Timer used by BE EDCA. It must be a multiple of 8192 us and must be in the range from 8.192 ms to 2088.96 ms. 0 is a reserved value, but we allow to use this value to indicate that an MU EDCA Parameter Set element must not be sent. Therefore, 0 can only be used if the MU EDCA Timer for all ACs is set to 0.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +0ns:+2.08896e+09ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BkMuEdcaTimer</b>: The MU EDCA Timer used by BK EDCA. It must be a multiple of 8192 us and must be in the range from 8.192 ms to 2088.96 ms.0 is a reserved value, but we allow to use this value to indicate that an MU EDCA Parameter Set element must not be sent. Therefore, 0 can only be used if the MU EDCA Timer for all ACs is set to 0.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +0ns:+2.08896e+09ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BssColor</b>: The BSS color
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GuardInterval</b>: Specify the shortest guard interval duration that can be used for HE transmissions.Possible values are 800ns, 1600ns or 3200ns.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +800ns:+3200ns</li>
    <li>Initial value: +3200ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxTbPpduDelay</b>: If positive, the value of this attribute specifies the maximum delay with which a TB PPDU can be received after the reception of the first TB PPDU. If the delay is higher than this value, the TB PPDU is dropped and considered interference. The maximum delay is anyway capped at the duration of the training fields in the PPDU. This attribute is only valid for APs.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +0ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MpduBufferSize</b>: The MPDU buffer size for receiving A-MPDUs
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 64:256</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MuBeAifsn</b>: AIFSN used by BE EDCA when the MU EDCA Timer is running. It must be either zero (EDCA disabled) or a value from 2 to 15.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:15</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MuBeCwMax</b>: CWmax used by BE EDCA when the MU EDCA Timer is running. It must be a power of 2 minus 1 in the range from 0 to 32767.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:32767</li>
    <li>Initial value: 1023</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MuBeCwMin</b>: CWmin used by BE EDCA when the MU EDCA Timer is running. It must be a power of 2 minus 1 in the range from 0 to 32767.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:32767</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MuBkAifsn</b>: AIFSN used by BK EDCA when the MU EDCA Timer is running. It must be either zero (EDCA disabled) or a value from 2 to 15.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:15</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MuBkCwMax</b>: CWmax used by BK EDCA when the MU EDCA Timer is running. It must be a power of 2 minus 1 in the range from 0 to 32767.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:32767</li>
    <li>Initial value: 1023</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MuBkCwMin</b>: CWmin used by BK EDCA when the MU EDCA Timer is running. It must be a power of 2 minus 1 in the range from 0 to 32767.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:32767</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MuViAifsn</b>: AIFSN used by VI EDCA when the MU EDCA Timer is running. It must be either zero (EDCA disabled) or a value from 2 to 15.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:15</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MuViCwMax</b>: CWmax used by VI EDCA when the MU EDCA Timer is running. It must be a power of 2 minus 1 in the range from 0 to 32767.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:32767</li>
    <li>Initial value: 1023</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MuViCwMin</b>: CWmin used by VI EDCA when the MU EDCA Timer is running. It must be a power of 2 minus 1 in the range from 0 to 32767.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:32767</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MuVoAifsn</b>: AIFSN used by VO EDCA when the MU EDCA Timer is running. It must be either zero (EDCA disabled) or a value from 2 to 15.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:15</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MuVoCwMax</b>: CWmax used by VO EDCA when the MU EDCA Timer is running. It must be a power of 2 minus 1 in the range from 0 to 32767.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:32767</li>
    <li>Initial value: 1023</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MuVoCwMin</b>: CWmin used by VO EDCA when the MU EDCA Timer is running. It must be a power of 2 minus 1 in the range from 0 to 32767.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:32767</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ViMuEdcaTimer</b>: The MU EDCA Timer used by VI EDCA. It must be a multiple of 8192 us and must be in the range from 8.192 ms to 2088.96 ms.0 is a reserved value, but we allow to use this value to indicate that an MU EDCA Parameter Set element must not be sent. Therefore, 0 can only be used if the MU EDCA Timer for all ACs is set to 0.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +0ns:+2.08896e+09ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VoMuEdcaTimer</b>: The MU EDCA Timer used by VO EDCA. It must be a multiple of 8192 us and must be in the range from 8.192 ms to 2088.96 ms.0 is a reserved value, but we allow to use this value to indicate that an MU EDCA Parameter Set element must not be sent. Therefore, 0 can only be used if the MU EDCA Timer for all ACs is set to 0.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +0ns:+2.08896e+09ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HeFrameExchangeManager

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QosFrameExchangeManager</h3>
<ul>
<li><b>PifsRecovery</b>: Perform a PIFS recovery as a response to transmission failure within a TXOP
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SetQueueSize</b>: Whether to set the Queue Size subfield of the QoS Control field of QoS data frames sent by non-AP stations
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1608 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HierarchicalMobilityModel

<h3>Config Paths</h3>

ns3::HierarchicalMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::HierarchicalMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Child</b>: The child mobility model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::MobilityModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Parent</b>: The parent mobility model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::MobilityModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HtConfiguration

<h3>Config Paths</h3>

ns3::HtConfiguration is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/HtConfiguration"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>LdpcSupported</b>: Whether or not LDPC coding is supported.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShortGuardIntervalSupported</b>: Whether or not short guard interval is supported.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Support40MHzOperation</b>: Whether or not 40 MHz operation is to be supported.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HtFrameExchangeManager

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QosFrameExchangeManager</h3>
<ul>
<li><b>PifsRecovery</b>: Perform a PIFS recovery as a response to transmission failure within a TXOP
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SetQueueSize</b>: Whether to set the Queue Size subfield of the QoS Control field of QoS data frames sent by non-AP stations
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1008 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HTTPHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HybridBuildingsPropagationLossModel

<h3>Config Paths</h3>

ns3::HybridBuildingsPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CitySize</b>: Dimension of the city
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Small|Medium|Large</li>
    <li>Initial value: Large</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Environment</b>: Environment Scenario
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Urban|SubUrban|OpenAreas</li>
    <li>Initial value: Urban</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.16e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Los2NlosThr</b>:  Threshold from LoS to NLoS in ITU 1411 [m].
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 200</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RooftopLevel</b>: The height of the rooftop level in meters
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:90</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::BuildingsPropagationLossModel</h3>
<ul>
<li><b>InternalWallLoss</b>: Additional loss for each internal wall [dB]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaExtWalls</b>: Standard deviation of the normal distribution used to calculate the shadowing due to ext walls
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaIndoor</b>: Standard deviation of the normal distribution used to calculate the shadowing for indoor nodes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaOutdoor</b>: Standard deviation of the normal distribution used to calculate the shadowing for outdoor nodes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv4DestinationUnreachable

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv4Echo

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv4Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv4L4Protocol

<h3>Config Paths</h3>

ns3::Icmpv4L4Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Icmpv4L4Protocol"</li>
<li>"/NodeList/[i]/$ns3::Icmpv4L4Protocol"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::IpL4Protocol</h3>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv4TimeExceeded

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6DestinationUnreachable

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6Echo

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6L4Protocol

<h3>Config Paths</h3>

ns3::Icmpv6L4Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DAD</b>: Always do DAD check.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DadTimeout</b>: Duplicate Address Detection (DAD) timeout
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DelayFirstProbe</b>: Neighbor Discovery node constants: delay for the first probe.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxMulticastSolicit</b>: Neighbor Discovery node constants: max multicast solicitations.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxUnicastSolicit</b>: Neighbor Discovery node constants: max unicast solicitations.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReachableTime</b>: Neighbor Discovery node constants: reachable time.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RetransmissionTime</b>: Neighbor Discovery node constants: retransmission timer.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsInitialRetransmissionTime</b>: Multicast RS initial retransmission time.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +4e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsMaxRetransmissionCount</b>: Multicast RS maximum retransmission count (0 means unbound). Note: RFC 7559 suggest a zero value (infinite). The default is 4 to avoid non-terminating simulations.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsMaxRetransmissionDuration</b>: Multicast RS maximum retransmission duration (0 means unbound).
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsMaxRetransmissionTime</b>: Multicast RS maximum retransmission time (0 means unbound).
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3.6e+12ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsRetransmissionJitter</b>: Multicast RS retransmission randomization quantity
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=-0.1|Max=0.1]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SolicitationJitter</b>: The jitter in ms a node is allowed to wait before sending any solicitation. Some jitter aims to prevent collisions. By default, the model will wait for a duration in ms defined by a uniform random-variable between 0 and SolicitationJitter
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=10.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::IpL4Protocol</h3>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 208 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6NA

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6NS

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6OptionHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6OptionLinkLayerAddress

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6OptionMtu

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6OptionPrefixInformation

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6OptionRedirected

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6ParameterError

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6RA

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6Redirection

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6RS

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6TimeExceeded

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6TooBig

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::IdealBeamformingAlgorithm

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 18446744073709551615 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::IdealBeamformingHelper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>BeamformingMethod</b>: Type of the ideal beamforming method in the case that it is enabled, by default is "cell scan" method.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::CellScanBeamforming</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BeamformingPeriodicity</b>: Interval between consecutive beamforming method executions. If set to 0 it will not be updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::IdealWifiManager

<h3>Config Paths</h3>

ns3::IdealWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::IdealWifiManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManagers/[i]/$ns3::IdealWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BerThreshold</b>: The maximum Bit Error Rate acceptable at any transmission mode
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1e-06</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 448 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::InetTopologyReader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::InterferenceHelper

<h3>Config Paths</h3>

ns3::InterferenceHelper is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/InterferenceHelper"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/InterferenceHelper"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::IpcsClassifier

<h3>Config Paths</h3>

ns3::IpcsClassifier is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/BsIpcsPacketClassifier"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/Classifier"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/BsIpcsPacketClassifier"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/Classifier"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::IpL4Protocol

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future Ipv4 devices.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>WeakEsModel</b>: RFC1122 term for whether host accepts datagram with a dest. address on another interface
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4GlobalRouting

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RandomEcmpRouting</b>: Set to true if packets are randomly routed among ECMP; set to false for using only one route consistently
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RespondToInterfaceEvents</b>: Set to true if you want to dynamically recompute the global routes upon Interface notification events (up/down, or add/remove address)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4Interface

<h3>Config Paths</h3>

ns3::Ipv4Interface is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Ipv4L3Protocol/InterfaceList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ArpCache</b>: The arp cache for this ipv4 interface
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ArpCache></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4L3Protocol

<h3>Config Paths</h3>

ns3::Ipv4L3Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Ipv4L3Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DefaultTtl</b>: The TTL value set by default on all outgoing packets generated on this node.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DuplicateExpire</b>: Expiration delay for duplicate cache entries
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+06ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableDuplicatePacketDetection</b>: Enable multicast duplicate packet detection based on RFC 6621
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentExpirationTimeout</b>: When this timeout expires, the fragments will be cleared from the buffer.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InterfaceList</b>: The set of Ipv4 interfaces associated to this Ipv4 stack.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Ipv4Interface></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PurgeExpiredPeriod</b>: Time between purges of expired duplicate packet entries, 0 means never purge
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +0ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Ipv4</h3>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future Ipv4 devices.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>WeakEsModel</b>: RFC1122 term for whether host accepts datagram with a dest. address on another interface
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Drop ipv4 packet<br>%Callback signature: ns3::Ipv4L3Protocol::DropTracedCallback
</li>
<li><b>LocalDeliver</b>: An IPv4 packet was received by/for this node, and it is being forward up the stack<br>%Callback signature: ns3::Ipv4L3Protocol::SentTracedCallback
</li>
<li><b>MulticastForward</b>: A multicast IPv4 packet was received by this node and is being forwarded to another node<br>%Callback signature: ns3::Ipv4L3Protocol::SentTracedCallback
</li>
<li><b>Rx</b>: Receive ipv4 packet from incoming interface.<br>%Callback signature: ns3::Ipv4L3Protocol::TxRxTracedCallback
</li>
<li><b>SendOutgoing</b>: A newly-generated packet by this node is about to be queued for transmission<br>%Callback signature: ns3::Ipv4L3Protocol::SentTracedCallback
</li>
<li><b>Tx</b>: Send ipv4 packet to outgoing interface.<br>%Callback signature: ns3::Ipv4L3Protocol::TxRxTracedCallback
</li>
<li><b>UnicastForward</b>: A unicast IPv4 packet was received by this node and is being forwarded to another node<br>%Callback signature: ns3::Ipv4L3Protocol::SentTracedCallback
</li>
</ul>
<b>Size</b> of this type is 648 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4ListRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4NixVectorRouting

<h3>Config Paths</h3>

ns3::Ipv4NixVectorRouting is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Ipv4NixVectorRouting"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4PacketFilter

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4PacketProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The packet plus its IPv4 object and interface that serve as the output for this probe<br>%Callback signature: ns3::Ipv4L3Protocol::TxRxTracedCallback
</li>
<li><b>OutputBytes</b>: The number of bytes in the packet<br>%Callback signature: ns3::Packet::SizeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4RawSocketFactory

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4RawSocketImpl

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>IcmpFilter</b>: Any icmp header whose type field matches a bit in this filter is dropped. Type must be less than 32.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IpHeaderInclude</b>: Include IP Header information (a.k.a setsockopt (IP_HDRINCL)).
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Protocol</b>: Protocol number to match.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 224 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4RoutingProtocol

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4StaticRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future IPv6 devices.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MtuDiscover</b>: If disabled, every interface will have its MTU set to 1280 bytes.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6Extension

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionAH

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionAHHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionDemux

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Extensions</b>: The set of IPv6 extensions registered with this demux.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Ipv6Extension></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionDestination

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionDestinationHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionESP

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionESPHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionFragment

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>FragmentExpirationTimeout</b>: When this timeout expires, the fragments will be cleared from the buffer.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +6e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionFragmentHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionHopByHop

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionHopByHopHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionLooseRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionLooseRoutingHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionRoutingDemux

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RoutingExtensions</b>: The set of IPv6 Routing extensions registered with this demux.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Ipv6ExtensionRouting></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionRoutingHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6Interface

<h3>Config Paths</h3>

ns3::Ipv6Interface is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Ipv6L3Protocol/InterfaceList/[i]"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6L3Protocol

<h3>Config Paths</h3>

ns3::Ipv6L3Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Ipv6L3Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DefaultTclass</b>: The TCLASS value set by default on all outgoing packets generated on this node.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DefaultTtl</b>: The TTL value set by default on all outgoing packets generated on this node.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InterfaceList</b>: The set of IPv6 interfaces associated to this IPv6 stack.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Ipv6Interface></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>SendIcmpv6Redirect</b>: Send the ICMPv6 Redirect when appropriate.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StrongEndSystemModel</b>: Reject packets for an address not configured on the interface they're coming from (RFC1122, section 3.3.4.2).
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Ipv6</h3>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future IPv6 devices.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MtuDiscover</b>: If disabled, every interface will have its MTU set to 1280 bytes.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Drop IPv6 packet<br>%Callback signature: ns3::Ipv6L3Protocol::DropTracedCallback
</li>
<li><b>LocalDeliver</b>: An IPv6 packet was received by/for this node, and it is being forward up the stack<br>%Callback signature: ns3::Ipv6L3Protocol::SentTracedCallback
</li>
<li><b>Rx</b>: Receive IPv6 packet from incoming interface.<br>%Callback signature: ns3::Ipv6L3Protocol::TxRxTracedCallback
</li>
<li><b>SendOutgoing</b>: A newly-generated packet by this node is about to be queued for transmission<br>%Callback signature: ns3::Ipv6L3Protocol::SentTracedCallback
</li>
<li><b>Tx</b>: Send IPv6 packet to outgoing interface.<br>%Callback signature: ns3::Ipv6L3Protocol::TxRxTracedCallback
</li>
<li><b>UnicastForward</b>: A unicast IPv6 packet was received by this node and is being forwarded to another node<br>%Callback signature: ns3::Ipv6L3Protocol::SentTracedCallback
</li>
</ul>
<b>Size</b> of this type is 520 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ListRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6NixVectorRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6Option

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionDemux

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Options</b>: The set of IPv6 options registered with this demux.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Ipv6Option></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionJumbogram

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Option</h3>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionJumbogramHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionPad1

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Option</h3>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionPad1Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionPadn

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Option</h3>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionPadnHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionRouterAlert

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Option</h3>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionRouterAlertHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6PacketFilter

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6PacketProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The packet plus its IPv6 object and interface that serve as the output for this probe<br>%Callback signature: ns3::Ipv6L3Protocol::TxRxTracedCallback
</li>
<li><b>OutputBytes</b>: The number of bytes in the packet<br>%Callback signature: ns3::Packet::SizeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6PmtuCache

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>CacheExpiryTime</b>: Validity time for a Path MTU entry. Default is 10 minutes, minimum is 5 minutes.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +3e+11ns:+9.22337e+18ns</li>
    <li>Initial value: +6e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6RawSocketFactory

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6RawSocketImpl

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Protocol</b>: Protocol number to match.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 264 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6RoutingProtocol

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6StaticRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::IsotropicAntennaModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Gain</b>: The gain of the antenna in dB
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ItuR1238PropagationLossModel

<h3>Config Paths</h3>

ns3::ItuR1238PropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.16e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ItuR1411LosPropagationLossModel

<h3>Config Paths</h3>

ns3::ItuR1411LosPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Frequency</b>: The propagation frequency in Hz
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.16e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ItuR1411NlosOverRooftopPropagationLossModel

<h3>Config Paths</h3>

ns3::ItuR1411NlosOverRooftopPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BuildingSeparation</b>: The separation between buildings
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BuildingsExtend</b>: The distance over which the buildings extend
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CitySize</b>: Dimension of the city
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Small|Medium|Large</li>
    <li>Initial value: Large</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Environment</b>: Environment Scenario
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Urban|SubUrban|OpenAreas</li>
    <li>Initial value: Urban</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.16e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>RooftopLevel</b>: The height of the rooftop level in meters
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:90</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StreetsOrientation</b>: The orientation of streets in degrees [0,90] with respect to the direction of propagation
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:90</li>
    <li>Initial value: 45</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StreetsWidth</b>: The width of streets
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1000</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::JakesProcess

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DopplerFrequencyHz</b>: Corresponding doppler frequency[Hz]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:10000</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NumberOfOscillators</b>: The number of oscillators
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 4:1000</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::JakesPropagationLossModel

<h3>Config Paths</h3>

ns3::JakesPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Kun2600MhzPropagationLossModel

<h3>Config Paths</h3>

ns3::Kun2600MhzPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LenaErrorModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LiIonEnergySource

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ExpCapacity</b>: Cell Capacity at the end of the exponential zone.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ExpCellVoltage</b>: Cell voltage at the end of the exponential zone.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialCellVoltage</b>: Initial (maximum) voltage of the cell (fully charged).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 4.05</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InternalResistance</b>: Internal resistance of the cell
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.083</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LiIonEnergyLowBatteryThreshold</b>: Low battery threshold for LiIon energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LiIonEnergySourceInitialEnergyJ</b>: Initial energy stored in basic energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 31752</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NomCapacity</b>: Cell capacity at the end of the nominal zone.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NominalCellVoltage</b>: Nominal voltage of the cell.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PeriodicEnergyUpdateInterval</b>: Time between two consecutive periodic energy updates.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RatedCapacity</b>: Rated capacity of the cell.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.45</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ThresholdVoltage</b>: Minimum threshold voltage to consider the battery depleted.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TypCurrent</b>: Typical discharge current used to fit the curves
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.33</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RemainingEnergy</b>: Remaining energy at BasicEnergySource.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 264 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LinearWifiTxCurrentModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Eta</b>: The efficiency of the power amplifier.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IdleCurrent</b>: The current in the IDLE state (in Ampere).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.273333</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Voltage</b>: The supply voltage (in Volts).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ListErrorModel

<h3>Config Paths</h3>

ns3::ListErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::ListErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::ListErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::ListErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::ListErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::ListErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::ListErrorModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ErrorModel</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ListPositionAllocator

<h3>Config Paths</h3>

ns3::ListPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::ListPositionAllocator"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ListScheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LlcSnapHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LogDistancePropagationLossModel

<h3>Config Paths</h3>

ns3::LogDistancePropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Exponent</b>: The exponent of the Path Loss propagation model
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReferenceDistance</b>: The distance at which the reference loss is calculated (m)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReferenceLoss</b>: The reference loss at reference distance (dB). (Default is Friis at 1m with 5.15 GHz)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 46.6777</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LogNormalRandomVariable

<h3>Config Paths</h3>

ns3::LogNormalRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac/ProbeDelay/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/ForwardingDelay/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice/MeshUnderJitter/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::LogNormalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::LogNormalRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mu</b>: The mu value for the log-normal distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Sigma</b>: The sigma value for the log-normal distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LoopbackNetDevice

<h3>Config Paths</h3>

ns3::LoopbackNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoopbackNetDevice"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LrWpanCsmaCa

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LrWpanErrorModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LrWpanLqiTag

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Lqi</b>: The lqi of the last packet received
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LrWpanMac

<h3>Config Paths</h3>

ns3::LrWpanMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Mac"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>PanId</b>: 16-bit identifier of the associated PAN
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>IfsEnd</b>: Trace source reporting the end of an Interframe space (IFS)<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacIncSuperframeStatus</b>: The period status of the incoming superframe<br>%Callback signature: ns3::TracedValueCallback::SuperframeState
</li>
<li><b>MacIndTxDequeue</b>: Trace source indicating a packet has was dequeued from the indirect transaction queue<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacIndTxDrop</b>: Trace source indicating a packet has been dropped from the indirect transaction queue(The pending transaction list)<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacIndTxEnqueue</b>: Trace source indicating a packet has been enqueued in the indirect transaction queue<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacOutSuperframeStatus</b>: The period status of the outgoing superframe<br>%Callback signature: ns3::TracedValueCallback::SuperframeState
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRxDrop</b>: Trace source indicating a packet was received, but dropped before being forwarded up the stack<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacSentPkt</b>: Trace source reporting some information about the sent packet<br>%Callback signature: ns3::LrWpanMac::SentTracedCallback
</li>
<li><b>MacState</b>: The state of LrWpan Mac<br>%Callback signature: ns3::LrWpanMac::StateTracedCallback
</li>
<li><b>MacStateValue</b>: The state of LrWpan Mac<br>%Callback signature: ns3::TracedValueCallback::LrWpanMacState
</li>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDequeue</b>: Trace source indicating a packet has was dequeued from the transaction queue<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped during transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxEnqueue</b>: Trace source indicating a packet has been enqueued in the transaction queue<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxOk</b>: Trace source indicating a packet has been successfully sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1472 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LrWpanMacHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LrWpanMacTrailer

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LrWpanNetDevice

<h3>Config Paths</h3>

ns3::LrWpanNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Channel</b>: The channel attached to this device
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::SpectrumChannel></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Mac</b>: The MAC layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LrWpanMac></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Phy</b>: The PHY layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LrWpanPhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PseudoMacAddressMode</b>: Build the pseudo-MAC Address according to RFC 4944 or RFC 6282 (default: RFC 6282).
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p RFC 6282 (don't use PanId)|RFC 4944 (use PanId)</li>
    <li>Initial value: RFC 6282 (don't use PanId)</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseAcks</b>: Request acknowledgments for data frames.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LrWpanPhy

<h3>Config Paths</h3>

ns3::LrWpanPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>PostReceptionErrorModel</b>: An optional packet error model can be added to the receive packet process after any propagation-based (SNR-based) error models have been applied. Typically this is used to force specific packet drops, for testing purposes.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ErrorModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device<br>%Callback signature: ns3::Packet::SinrTracedCallback
</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TrxState</b>: The state of the transceiver<br>%Callback signature: ns3::LrWpanPhy::StateTracedCallback
</li>
<li><b>TrxStateValue</b>: The state of the transceiver<br>%Callback signature: ns3::TracedValueCallback::LrWpanPhyEnumeration
</li>
</ul>
<b>Size</b> of this type is 728 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteAmc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>AmcModel</b>: AMC model used to assign CQI
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Vienna|PiroEW2010</li>
    <li>Initial value: Vienna</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Ber</b>: The requested BER in assigning MCS (default is 0.00005).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e-05</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteAnr

<h3>Config Paths</h3>

ns3::LteAnr is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteAnr"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteAnr"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Threshold</b>: Minimum RSRQ range value required for detecting a neighbour cell
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:34</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteDataRadioBearerInfo

<h3>Config Paths</h3>

ns3::LteDataRadioBearerInfo is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/DataRadioBearerMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/DataRadioBearerMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DrbIdentity</b>: The id of this Data Radio Bearer
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>EpsBearerIdentity</b>: The id of the EPS bearer corresponding to this Data Radio Bearer
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>LtePdcp</b>: PDCP instance of the radio bearer.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LtePdcp></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LteRlc</b>: RLC instance of the radio bearer.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteRlc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>logicalChannelIdentity</b>: The id of the Logical Channel corresponding to this Data Radio Bearer
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 18446744073709551615 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteEnbComponentCarrierManager

<h3>Config Paths</h3>

ns3::LteEnbComponentCarrierManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 224 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteEnbMac

<h3>Config Paths</h3>

ns3::LteEnbMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbMac"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ComponentCarrierId</b>: ComponentCarrier Id, needed to reply on the appropriate sap.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:4</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ConnEstFailCount</b>: how many time T300 timer can expire on the same cell
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:4</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NumberOfRaPreambles</b>: how many random access preambles are available for the contention based RACH process
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 4:64</li>
    <li>Initial value: 52</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PreambleTransMax</b>: Maximum number of random access preamble transmissions
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 3:200</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RaResponseWindowSize</b>: length of the window (in TTIs) for the reception of the random access response (RAR); the resulting RAR timeout is this value + 3 ms
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 2:10</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>DlScheduling</b>: Information regarding DL scheduling.<br>%Callback signature: ns3::LteEnbMac::DlSchedulingTracedCallback
</li>
<li><b>UlScheduling</b>: Information regarding UL scheduling.<br>%Callback signature: ns3::LteEnbMac::UlSchedulingTracedCallback
</li>
</ul>
<b>Size</b> of this type is 568 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteEnbNetDevice

<h3>Config Paths</h3>

ns3::LteEnbNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CellId</b>: Cell Identifier
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ComponentCarrierMap</b>: List of component carriers.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ComponentCarrierEnb></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CsgIndication</b>: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlBandwidth</b>: Downlink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:262143</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LteAnr</b>: The automatic neighbour relation function associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteAnr></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LteEnbComponentCarrierManager</b>: The RRC associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteEnbComponentCarrierManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LteEnbRrc</b>: The RRC associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteEnbRrc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LteFfrAlgorithm</b>: The FFR algorithm associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteFfrAlgorithm></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LteHandoverAlgorithm</b>: The handover algorithm associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteHandoverAlgorithm></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlBandwidth</b>: Uplink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlEarfcn</b>: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:262143</li>
    <li>Initial value: 18100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::LteNetDevice</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 30000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 208 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteEnbPhy

<h3>Config Paths</h3>

ns3::LteEnbPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DlSpectrumPhy</b>: The downlink LteSpectrumPhy associated to this LtePhy
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteSpectrumPhy></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>InterferenceSamplePeriod</b>: The sampling period for reporting interference stats
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MacToChannelDelay</b>: The delay in TTI units that occurs between a scheduling decision in the MAC and the actual start of the transmission by the PHY. This is intended to be used to model the latency of real PHY and MAC implementations.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver.  According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an ideal receiver with the same overall gain and bandwidth when the receivers are connected to sources at the standard noise temperature T0."  In this model, we consider T0 = 290K.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPower</b>: Transmission power in dBm
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 30</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UeSinrSamplePeriod</b>: The sampling period for reporting UEs' SINR stats.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlSpectrumPhy</b>: The uplink LteSpectrumPhy associated to this LtePhy
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteSpectrumPhy></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>DlPhyTransmission</b>: DL transmission PHY layer statistics.<br>%Callback signature: ns3::PhyTransmissionStatParameters::TracedCallback
</li>
<li><b>ReportInterference</b>: Report linear interference power per PHY RB<br>%Callback signature: ns3::LteEnbPhy::ReportInterferenceTracedCallback
</li>
<li><b>ReportUeSinr</b>: Report UEs' averaged linear SINR<br>%Callback signature: ns3::LteEnbPhy::ReportUeSinrTracedCallback
</li>
</ul>
<b>Size</b> of this type is 672 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteEnbRrc

<h3>Config Paths</h3>

ns3::LteEnbRrc is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AdmitHandoverRequest</b>: Whether to admit an X2 handover request from another eNB
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>AdmitRrcConnectionRequest</b>: Whether to admit a connection request from a UE
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ConnectionRejectedTimeoutDuration</b>: Time to wait between sending a RRC CONNECTION REJECT and destroying the UE context
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ConnectionRequestTimeoutDuration</b>: After a RA attempt, if no RRC CONNECTION REQUEST is received before this time, the UE context is destroyed. Must account for reception of RAR and transmission of RRC CONNECTION REQUEST over UL GRANT. The value of thistimer should not be greater than T300 timer at UE RRC
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +1e+06ns:+1.5e+07ns</li>
    <li>Initial value: +1.5e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ConnectionSetupTimeoutDuration</b>: After accepting connection request, if no RRC CONNECTION SETUP COMPLETE is received before this time, the UE context is destroyed. Must account for the UE's reception of RRC CONNECTION SETUP and transmission of RRC CONNECTION SETUP COMPLETE.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DefaultTransmissionMode</b>: The default UEs' transmission mode (0: SISO)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EpsBearerToRlcMapping</b>: Specify which type of RLC will be used for each type of EPS bearer.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p RlcSmAlways|RlcUmAlways|RlcAmAlways|PacketErrorRateBased</li>
    <li>Initial value: RlcSmAlways</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HandoverJoiningTimeoutDuration</b>: After accepting a handover request, if no RRC CONNECTION RECONFIGURATION COMPLETE is received before this time, the UE context is destroyed. Must account for reception of X2 HO REQ ACK by source eNB, transmission of the Handover Command, non-contention-based random access and reception of the RRC CONNECTION RECONFIGURATION COMPLETE message.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HandoverLeavingTimeoutDuration</b>: After issuing a Handover Command, if neither RRC CONNECTION RE-ESTABLISHMENT nor X2 UE Context Release has been previously received, the UE context is destroyed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NumberOfComponentCarriers</b>: Number of Component Carriers
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int16_t 1:5</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>QRxLevMin</b>: One of information transmitted within the SIB1 message, indicating the required minimum RSRP level that any UE must receive from this cell before it is allowed to camp to this cell. The default value -70 corresponds to -140 dBm and is the lowest possible value as defined by Section 6.3.4 of 3GPP TS 36.133. This restriction, however, only applies to initial cell selection and EPC-enabled simulation.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int8_t -70:-22</li>
    <li>Initial value: -70</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsrpFilterCoefficient</b>: Determines the strength of smoothing effect induced by layer 3 filtering of RSRP in all attached UE; if set to 0, no layer 3 filtering is applicable
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsrqFilterCoefficient</b>: Determines the strength of smoothing effect induced by layer 3 filtering of RSRQ in all attached UE; if set to 0, no layer 3 filtering is applicable
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SrsPeriodicity</b>: The SRS periodicity in milliseconds
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 40</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SystemInformationPeriodicity</b>: The interval for sending system information (Time value)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +8e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UeMap</b>: List of UeManager by C-RNTI.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UeManager></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>ConnectionEstablished</b>: Fired upon successful RRC connection establishment.<br>%Callback signature: ns3::LteEnbRrc::ConnectionHandoverTracedCallback
</li>
<li><b>ConnectionReconfiguration</b>: trace fired upon RRC connection reconfiguration<br>%Callback signature: ns3::LteEnbRrc::ConnectionHandoverTracedCallback
</li>
<li><b>HandoverEndOk</b>: trace fired upon successful termination of a handover procedure<br>%Callback signature: ns3::LteEnbRrc::ConnectionHandoverTracedCallback
</li>
<li><b>HandoverFailureJoining</b>: trace fired upon handover failure due to handover joining timeout at target eNB<br>%Callback signature: ns3::LteEnbRrc::HandoverFailureTracedCallback
</li>
<li><b>HandoverFailureLeaving</b>: trace fired upon handover failure due to handover leaving timeout at source eNB<br>%Callback signature: ns3::LteEnbRrc::HandoverFailureTracedCallback
</li>
<li><b>HandoverFailureMaxRach</b>: trace fired upon handover failure due to max RACH attempts from UE to target eNB<br>%Callback signature: ns3::LteEnbRrc::HandoverFailureTracedCallback
</li>
<li><b>HandoverFailureNoPreamble</b>: trace fired upon handover failure due to non-allocation of non-contention based preamble at eNB for UE to handover due to max count reached<br>%Callback signature: ns3::LteEnbRrc::HandoverFailureTracedCallback
</li>
<li><b>HandoverStart</b>: trace fired upon start of a handover procedure<br>%Callback signature: ns3::LteEnbRrc::HandoverStartTracedCallback
</li>
<li><b>NewUeContext</b>: Fired upon creation of a new UE context.<br>%Callback signature: ns3::LteEnbRrc::NewUeContextTracedCallback
</li>
<li><b>NotifyConnectionRelease</b>: trace fired when an UE is released<br>%Callback signature: ns3::LteEnbRrc::ConnectionHandoverTracedCallback
</li>
<li><b>RecvMeasurementReport</b>: trace fired when measurement report is received<br>%Callback signature: ns3::LteEnbRrc::ReceiveReportTracedCallback
</li>
<li><b>RrcTimeout</b>: trace fired when a timer expires<br>%Callback signature: ns3::LteEnbRrc::TimerExpiryTracedCallback
</li>
</ul>
<b>Size</b> of this type is 1264 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteEnbRrcProtocolIdeal

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteEnbRrcProtocolReal

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteFfrAlgorithm

<h3>Config Paths</h3>

ns3::LteFfrAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteFfrDistributedAlgorithm

<h3>Config Paths</h3>

ns3::LteFfrDistributedAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrDistributedAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrDistributedAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrDistributedAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrDistributedAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CalculationInterval</b>: Time interval between calculation of Edge sub-band, Default value 1 second
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CenterPowerOffset</b>: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EdgePowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EdgeRbNum</b>: Number of RB that can be used in edge Sub-band
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsrpDifferenceThreshold</b>: If the difference between the power of the signal received by UE from the serving cell and the power of the signal received from the adjacent cell is less than a RsrpDifferenceThreshold value, the cell weight is incremented
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::LteFfrAlgorithm</h3>
<ul>
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 512 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteFfrEnhancedAlgorithm

<h3>Config Paths</h3>

ns3::LteFfrEnhancedAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrEnhancedAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrEnhancedAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrEnhancedAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrEnhancedAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CenterAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlCqiThreshold</b>: If the DL-CQI for RBG of is higher than this threshold, transmission on RBG is possible
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlReuse1SubBandwidth</b>: Downlink Reuse 1 SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlReuse3SubBandwidth</b>: Downlink Reuse 3 SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlSubBandOffset</b>: Downlink SubBand Offset for this cell in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EdgeAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 26</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlCqiThreshold</b>: If the UL-CQI for RBG of is higher than this threshold, transmission on RBG is possible
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlReuse1SubBandwidth</b>: Uplink Reuse 1 SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlReuse3SubBandwidth</b>: Uplink Reuse 3 SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlSubBandOffset</b>: Uplink SubBand Offset for this cell in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::LteFfrAlgorithm</h3>
<ul>
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 744 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteFfrSoftAlgorithm

<h3>Config Paths</h3>

ns3::LteFfrSoftAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrSoftAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrSoftAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrSoftAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrSoftAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CenterAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CenterRsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Medium sub-band
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 30</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlCommonSubBandwidth</b>: Downlink Medium (Common) SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlEdgeSubBandOffset</b>: Downlink Edge SubBand Offset in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlEdgeSubBandwidth</b>: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EdgeAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EdgeRsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MediumAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Medium Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MediumAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in medium areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlCommonSubBandwidth</b>: Uplink Medium (Common) SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlEdgeSubBandOffset</b>: Uplink Edge SubBand Offset in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlEdgeSubBandwidth</b>: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::LteFfrAlgorithm</h3>
<ul>
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 464 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteFrHardAlgorithm

<h3>Config Paths</h3>

ns3::LteFrHardAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrHardAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrHardAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrHardAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrHardAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DlSubBandOffset</b>: Downlink Offset in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlSubBandwidth</b>: Downlink Transmission SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlSubBandOffset</b>: Uplink Offset in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlSubBandwidth</b>: Uplink Transmission SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::LteFfrAlgorithm</h3>
<ul>
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteFrNoOpAlgorithm

<h3>Config Paths</h3>

ns3::LteFrNoOpAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrNoOpAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrNoOpAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrNoOpAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrNoOpAlgorithm"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::LteFfrAlgorithm</h3>
<ul>
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteFrSoftAlgorithm

<h3>Config Paths</h3>

ns3::LteFrSoftAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrSoftAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrSoftAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrSoftAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrSoftAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AllowCenterUeUseEdgeSubBand</b>: If true center UEs can receive on Edge SubBand RBGs
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CenterPowerOffset</b>: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlEdgeSubBandOffset</b>: Downlink Edge SubBand Offset in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlEdgeSubBandwidth</b>: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EdgePowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlEdgeSubBandOffset</b>: Uplink Edge SubBand Offset in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlEdgeSubBandwidth</b>: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::LteFfrAlgorithm</h3>
<ul>
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 320 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteFrStrictAlgorithm

<h3>Config Paths</h3>

ns3::LteFrStrictAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrStrictAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrStrictAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrStrictAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrStrictAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CenterPowerOffset</b>: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlCommonSubBandwidth</b>: Downlink Common SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlEdgeSubBandOffset</b>: Downlink Edge SubBand Offset in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlEdgeSubBandwidth</b>: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EdgePowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlCommonSubBandwidth</b>: Uplink Common SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlEdgeSubBandOffset</b>: Uplink Edge SubBand Offset in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlEdgeSubBandwidth</b>: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::LteFfrAlgorithm</h3>
<ul>
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 320 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteHandoverAlgorithm

<h3>Config Paths</h3>

ns3::LteHandoverAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteHandoverAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteHandoverAlgorithm"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteHelper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>AnrEnabled</b>: Activate or deactivate Automatic Neighbour Relation function
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnbComponentCarrierManager</b>: The type of Component Carrier Manager to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting ns3::LteEnbComponentCarrierManager.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: ns3::NoOpComponentCarrierManager</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FadingModel</b>: The type of fading model to be used.The allowed values for this attributes are the type names of any class inheriting from ns3::SpectrumPropagationLossModel.If the type is set to an empty string, no fading model is used.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: ""</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>FfrAlgorithm</b>: The type of FFR algorithm to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::LteFfrAlgorithm.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: ns3::LteFrNoOpAlgorithm</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HandoverAlgorithm</b>: The type of handover algorithm to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::LteHandoverAlgorithm.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: ns3::NoOpHandoverAlgorithm</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NumberOfComponentCarriers</b>: Set the number of Component carrier to use. If it is more than one and m_useCa is false, it will raise an error.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:5</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PathlossModel</b>: The type of pathloss model to be used. The allowed values for this attributes are the type names of any class inheriting from ns3::PropagationLossModel.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::FriisPropagationLossModel</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Scheduler</b>: The type of scheduler to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::FfMacScheduler.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: ns3::PfFfMacScheduler</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UeComponentCarrierManager</b>: The type of Component Carrier Manager to be used for UEs. The allowed values for this attributes are the type names of any class inheriting ns3::LteUeComponentCarrierManager.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: ns3::SimpleUeComponentCarrierManager</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseCa</b>: If true, Carrier Aggregation feature is enabled and a valid Component Carrier Map is expected. If false, single carrier simulation.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseIdealRrc</b>: If true, LteRrcProtocolIdeal will be used for RRC signaling. If false, LteRrcProtocolReal will be used.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UsePdschForCqiGeneration</b>: If true, DL-CQI will be calculated from PDCCH as signal and PDSCH as interference. If false, DL-CQI will be calculated from PDCCH as signal and PDCCH as interference.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 696 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteHexGridEnbTopologyHelper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>GridWidth</b>: The number of sites in even rows (odd rows will have one additional site).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InterSiteDistance</b>: The distance [m] between nearby sites
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 500</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinX</b>: The x coordinate where the hex grid starts.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinY</b>: The y coordinate where the hex grid starts.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SectorOffset</b>: The offset [m] in the position for the node of each sector with respect to the center of the three-sector site
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SiteHeight</b>: The height [m] of each site
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 30</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteNetDevice

<h3>Config Paths</h3>

ns3::LteNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 30000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LtePdcp

<h3>Config Paths</h3>

ns3::LtePdcp is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/DataRadioBearerMap/[i]/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/Srb0/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/Srb1/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/Srb0/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/Srb1/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/DataRadioBearerMap/[i]/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/Srb0/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/Srb1/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/Srb0/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/Srb1/LtePdcp"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>RxPDU</b>: PDU received.<br>%Callback signature: ns3::LtePdcp::PduRxTracedCallback
</li>
<li><b>TxPDU</b>: PDU transmission notified to the RLC.<br>%Callback signature: ns3::LtePdcp::PduTxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LtePdcpHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LtePhy

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LtePhyTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRadioBearerInfo

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRadioBearerTag

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>lcid</b>: The id within the UE identifying the logical channel to which the packet belongs
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>rnti</b>: The rnti that indicates the UE to which packet belongs
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRlc

<h3>Config Paths</h3>

ns3::LteRlc is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/DataRadioBearerMap/[i]/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/Srb0/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/Srb1/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/Srb0/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/Srb1/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/DataRadioBearerMap/[i]/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/Srb0/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/Srb1/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/Srb0/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/Srb1/LteRlc"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>RxPDU</b>: PDU received.<br>%Callback signature: ns3::LteRlc::ReceiveTracedCallback
</li>
<li><b>TxDrop</b>: Trace source indicating a packet has been dropped before transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxPDU</b>: PDU transmission notified to the MAC.<br>%Callback signature: ns3::LteRlc::NotifyTxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRlcAm

<h3>Config Paths</h3>

ns3::LteRlcAm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/Srb0/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/Srb1/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/Srb0/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/Srb1/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcAm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxTxBufferSize</b>: Maximum Size of the Transmission Buffer (in Bytes).  If zero is configured, the buffer is unlimited.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10240</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PollRetransmitTimer</b>: Value of the t-PollRetransmit timer (See section 7.3 of 3GPP TS 36.322)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReorderingTimer</b>: Value of the t-Reordering timer (See section 7.3 of 3GPP TS 36.322)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReportBufferStatusTimer</b>: How much to wait to issue a new Report Buffer Status since the last time a new SDU was received
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StatusProhibitTimer</b>: Value of the t-StatusProhibit timer (See section 7.3 of 3GPP TS 36.322)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxOpportunityForRetxAlwaysBigEnough</b>: If true, always pretend that the size of a TxOpportunity is big enough for retransmission. If false (default and realistic behavior), no retx is performed unless the corresponding TxOpportunity is big enough.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::LteRlc</h3>
<ul>
<li><b>RxPDU</b>: PDU received.<br>%Callback signature: ns3::LteRlc::ReceiveTracedCallback
</li>
<li><b>TxDrop</b>: Trace source indicating a packet has been dropped before transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxPDU</b>: PDU transmission notified to the MAC.<br>%Callback signature: ns3::LteRlc::NotifyTxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 528 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRlcAmHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRlcHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRlcSduStatusTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRlcSm

<h3>Config Paths</h3>

ns3::LteRlcSm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/Srb0/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/Srb1/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/Srb0/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/Srb1/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcSm"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::LteRlc</h3>
<ul>
<li><b>RxPDU</b>: PDU received.<br>%Callback signature: ns3::LteRlc::ReceiveTracedCallback
</li>
<li><b>TxDrop</b>: Trace source indicating a packet has been dropped before transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxPDU</b>: PDU transmission notified to the MAC.<br>%Callback signature: ns3::LteRlc::NotifyTxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRlcTm

<h3>Config Paths</h3>

ns3::LteRlcTm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/Srb0/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/Srb1/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/Srb0/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/Srb1/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcTm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxTxBufferSize</b>: Maximum Size of the Transmission Buffer (in Bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2097152</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::LteRlc</h3>
<ul>
<li><b>RxPDU</b>: PDU received.<br>%Callback signature: ns3::LteRlc::ReceiveTracedCallback
</li>
<li><b>TxDrop</b>: Trace source indicating a packet has been dropped before transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxPDU</b>: PDU transmission notified to the MAC.<br>%Callback signature: ns3::LteRlc::NotifyTxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRlcUm

<h3>Config Paths</h3>

ns3::LteRlcUm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/Srb0/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/Srb1/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/Srb0/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/Srb1/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcUm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DiscardTimerMs</b>: Discard timer in milliseconds to be used to discard packets. If set to 0 then packet delay budget will be used as the discard timer value, otherwise it will be used this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnablePdcpDiscarding</b>: Whether to use the PDCP discarding, i.e., perform discarding at the moment of passing the PDCP SDU to RLC)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxTxBufferSize</b>: Maximum Size of the Transmission Buffer (in Bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10240</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReorderingTimer</b>: Value of the t-Reordering timer (See section 7.3 of 3GPP TS 36.322)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::LteRlc</h3>
<ul>
<li><b>RxPDU</b>: PDU received.<br>%Callback signature: ns3::LteRlc::ReceiveTracedCallback
</li>
<li><b>TxDrop</b>: Trace source indicating a packet has been dropped before transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxPDU</b>: PDU transmission notified to the MAC.<br>%Callback signature: ns3::LteRlc::NotifyTxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 384 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteSignalingRadioBearerInfo

<h3>Config Paths</h3>

ns3::LteSignalingRadioBearerInfo is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/Srb0"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc/Srb1"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/Srb0"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc/Srb1"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/Srb0"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc/Srb1"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/Srb0"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc/Srb1"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>LtePdcp</b>: PDCP instance of the radio bearer.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LtePdcp></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LteRlc</b>: RLC instance of the radio bearer.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteRlc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SrbIdentity</b>: The id of this Signaling Radio Bearer
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 18446744073709551615 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteSpectrumPhy

<h3>Config Paths</h3>

ns3::LteSpectrumPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy/DlSpectrumPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy/UlSpectrumPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy/DlSpectrumPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy/UlSpectrumPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy/DlSpectrumPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy/UlSpectrumPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy/DlSpectrumPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy/UlSpectrumPhy"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CtrlErrorModelEnabled</b>: Activate/Deactivate the error model of control (PCFICH-PDCCH decodification) [by default is active].
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DataErrorModelEnabled</b>: Activate/Deactivate the error model of data (TBs of PDSCH and PUSCH) [by default is active].
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>DlPhyReception</b>: DL reception PHY layer statistics.<br>%Callback signature: ns3::PhyReceptionStatParameters::TracedCallback
</li>
<li><b>RxEndError</b>: Trace fired when a previously started RX terminates with an error<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxEndOk</b>: Trace fired when a previously started RX terminates successfully<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxStart</b>: Trace fired when the start of a signal is detected<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>TxEnd</b>: Trace fired when a previously started transmission is finished<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>TxStart</b>: Trace fired when a new transmission is started<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>UlPhyReception</b>: DL reception PHY layer statistics.<br>%Callback signature: ns3::PhyReceptionStatParameters::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 664 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteStatsCalculator

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteUeComponentCarrierManager

<h3>Config Paths</h3>

ns3::LteUeComponentCarrierManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeComponentCarrierManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteUeMac

<h3>Config Paths</h3>

ns3::LteUeMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUeMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUeMac"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>RaResponseTimeout</b>: trace fired upon RA response timeout<br>%Callback signature: ns3::LteUeMac::RaResponseTimeoutTracedCallback
</li>
</ul>
<b>Size</b> of this type is 328 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteUeNetDevice

<h3>Config Paths</h3>

ns3::LteUeNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ComponentCarrierMapUe</b>: List of all component Carrier.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ComponentCarrierUe></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this UE is associated with, i.e., giving the UE access to cells which belong to this particular CSG. This restriction only applies to initial cell selection and EPC-enabled simulation. This does not revoke the UE's access to non-CSG cells.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:262143</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EpcUeNas</b>: The NAS associated to this UeNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::EpcUeNas></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Imsi</b>: International Mobile Subscriber Identity assigned to this UE
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint64_t 0:18446744073709551615</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LteUeComponentCarrierManager</b>: The ComponentCarrierManager associated to this UeNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteUeComponentCarrierManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LteUeRrc</b>: The RRC associated to this UeNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteUeRrc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::LteNetDevice</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 30000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteUePhy

<h3>Config Paths</h3>

ns3::LteUePhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DlSpectrumPhy</b>: The downlink LteSpectrumPhy associated to this LtePhy
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteSpectrumPhy></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>DownlinkCqiPeriodicity</b>: Periodicity in milliseconds for reporting thewideband and subband downlink CQIs to the eNB
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+06ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>EnableRlfDetection</b>: If true, RLF detection will be enabled.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableUplinkPowerControl</b>: If true, Uplink Power Control will be enabled.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0." In this model, we consider T0 = 290K.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 9</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NumQinEvalSf</b>: This specifies the total number of consecutive subframeswhich corresponds to the Qin evaluation period
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NumQoutEvalSf</b>: This specifies the total number of consecutive subframeswhich corresponds to the Qout evaluation period
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 200</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Qin</b>: corresponds to 2% block error rate of a hypothetical PDCCH transmissiontaking into account the PCFICH errors with transmission parameters.see 3GPP TS 36.213 4.2.1 and TS 36.133 7.6
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -3.9</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Qout</b>: corresponds to 10% block error rate of a hypothetical PDCCH transmissiontaking into account the PCFICH errors with transmission parameters.see 3GPP TS 36.213 4.2.1 and TS 36.133 7.6
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsrpSinrSamplePeriod</b>: The sampling period for reporting RSRP-SINR stats (default value 1)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RsrqUeMeasThreshold</b>: Receive threshold for PSS on RSRQ [dB]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxMode1Gain</b>: Transmission mode 1 gain in dB
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>TxMode2Gain</b>: Transmission mode 2 gain in dB
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 4.2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>TxMode3Gain</b>: Transmission mode 3 gain in dB
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -2.8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>TxMode4Gain</b>: Transmission mode 4 gain in dB
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>TxMode5Gain</b>: Transmission mode 5 gain in dB
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>TxMode6Gain</b>: Transmission mode 6 gain in dB
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>TxMode7Gain</b>: Transmission mode 7 gain in dB
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>TxPower</b>: Transmission power in dBm
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UeMeasurementsFilterPeriod</b>: Time period for reporting UE measurements, i.e., thelength of layer-1 filtering.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlSpectrumPhy</b>: The uplink LteSpectrumPhy associated to this LtePhy
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteSpectrumPhy></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>ReportCurrentCellRsrpSinr</b>: RSRP and SINR statistics.<br>%Callback signature: ns3::LteUePhy::RsrpSinrTracedCallback
</li>
<li><b>ReportPowerSpectralDensity</b>: Power Spectral Density data.<br>%Callback signature: ns3::LteUePhy::PowerSpectralDensityTracedCallback
</li>
<li><b>ReportUeMeasurements</b>: Report UE measurements RSRP (dBm) and RSRQ (dB).<br>%Callback signature: ns3::LteUePhy::RsrpRsrqTracedCallback
</li>
<li><b>ReportUlPhyResourceBlocks</b>: UL transmission PHY layer resource blocks.<br>%Callback signature: ns3::LteUePhy::UlPhyResourceBlocksTracedCallback
</li>
<li><b>StateTransition</b>: Trace fired upon every UE PHY state transition<br>%Callback signature: ns3::LteUePhy::StateTracedCallback
</li>
<li><b>UlPhyTransmission</b>: DL transmission PHY layer statistics.<br>%Callback signature: ns3::PhyTransmissionStatParameters::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 928 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteUePowerControl

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>AccumulationEnabled</b>: If true TCP accumulation mode will be active, otherwise absolute mode will be active
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Alpha</b>: Value of Alpha parameter
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>ClosedLoop</b>: If true Closed Loop mode will be active, otherwise Open Loop
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Pcmax</b>: Max Transmission power in dBm, Default value 23 dBmTS36.101 section 6.2.3
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 23</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Pcmin</b>: Min Transmission power in dBm, Default value -40 dBmTS36.101 section 6.2.3
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -40</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PoNominalPusch</b>: P_O_NOMINAL_PUSCH   INT (-126 ... 24), Default value -80
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int16_t -32768:32767</li>
    <li>Initial value: -80</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>PoUePusch</b>: P_O_UE_PUSCH   INT(-8...7), Default value 0
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int16_t -32768:32767</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>PsrsOffset</b>: P_SRS_OFFSET   INT(0...15), Default value 7
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int16_t -32768:32767</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>ReportPucchTxPower</b>: Report PUCCH TxPower in dBm<br>%Callback signature: ns3::LteUePowerControl::TxPowerTracedCallback
</li>
<li><b>ReportPuschTxPower</b>: Report PUSCH TxPower in dBm<br>%Callback signature: ns3::LteUePowerControl::TxPowerTracedCallback
</li>
<li><b>ReportSrsTxPower</b>: Report SRS TxPower in dBm<br>%Callback signature: ns3::LteUePowerControl::TxPowerTracedCallback
</li>
</ul>
<b>Size</b> of this type is 320 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteUeRrc

<h3>Config Paths</h3>

ns3::LteUeRrc is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/nrUeRrc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeRrc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/nrUeRrc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeRrc"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>C-RNTI</b>: Cell Radio Network Temporary Identifier
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>CellId</b>: Serving cell identifier
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>DataRadioBearerMap</b>: List of UE RadioBearerInfo for Data Radio Bearers by LCID.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteDataRadioBearerInfo></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>N310</b>: This specifies the maximum number of out-of-sync indications. Standard values: 1, 2, 3, 4, 6, 8, 10, 20
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:20</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>N311</b>: This specifies the maximum number of in-sync indications. Standard values: 1, 2, 3, 4, 5, 6, 8, 10
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:10</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Srb0</b>: SignalingRadioBearerInfo for SRB0
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteSignalingRadioBearerInfo></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Srb1</b>: SignalingRadioBearerInfo for SRB1
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteSignalingRadioBearerInfo></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>T300</b>: Timer for the RRC Connection Establishment procedure (i.e., the procedure is deemed as failed if it takes longer than this). Standard values: 100ms, 200ms, 300ms, 400ms, 600ms, 1000ms, 1500ms, 2000ms
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +1e+08ns:+2e+09ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>T310</b>: Timer for detecting the Radio link failure (i.e., the radio link is deemed as failed if this timer expires). Standard values: 0ms 50ms, 100ms, 200ms, 500ms, 1000ms, 2000ms
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +0ns:+2e+09ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>ConnectionEstablished</b>: trace fired upon successful RRC connection establishment<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback
</li>
<li><b>ConnectionReconfiguration</b>: trace fired upon RRC connection reconfiguration<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback
</li>
<li><b>ConnectionTimeout</b>: trace fired upon timeout RRC connection establishment because of T300<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiCountTracedCallback
</li>
<li><b>DrbCreated</b>: trace fired after DRB is created<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiLcIdTracedCallback
</li>
<li><b>HandoverEndError</b>: trace fired upon failure of a handover procedure<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback
</li>
<li><b>HandoverEndOk</b>: trace fired upon successful termination of a handover procedure<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback
</li>
<li><b>HandoverStart</b>: trace fired upon start of a handover procedure<br>%Callback signature: ns3::LteUeRrc::MibSibHandoverTracedCallback
</li>
<li><b>InitialCellSelectionEndError</b>: trace fired upon failed initial cell selection procedure<br>%Callback signature: ns3::LteUeRrc::CellSelectionTracedCallback
</li>
<li><b>InitialCellSelectionEndOk</b>: trace fired upon successful initial cell selection procedure<br>%Callback signature: ns3::LteUeRrc::CellSelectionTracedCallback
</li>
<li><b>MibReceived</b>: trace fired upon reception of Master Information Block<br>%Callback signature: ns3::LteUeRrc::MibSibHandoverTracedCallback
</li>
<li><b>PhySyncDetection</b>: trace fired upon receiving in Sync or out of Sync indications from UE PHY<br>%Callback signature: ns3::LteUeRrc::PhySyncDetectionTracedCallback
</li>
<li><b>RadioLinkFailure</b>: trace fired upon failure of radio link<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback
</li>
<li><b>RandomAccessError</b>: trace fired upon failure of the random access procedure<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback
</li>
<li><b>RandomAccessSuccessful</b>: trace fired upon successful completion of the random access procedure<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback
</li>
<li><b>SCarrierConfigured</b>: trace fired after configuring secondary carriers<br>%Callback signature: ns3::LteUeRrc::SCarrierConfiguredTracedCallback
</li>
<li><b>Sib1Received</b>: trace fired upon reception of System Information Block Type 1<br>%Callback signature: ns3::LteUeRrc::MibSibHandoverTracedCallback
</li>
<li><b>Sib2Received</b>: trace fired upon reception of System Information Block Type 2<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback
</li>
<li><b>Srb1Created</b>: trace fired after SRB1 is created<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback
</li>
<li><b>StateTransition</b>: trace fired upon every UE RRC state transition<br>%Callback signature: ns3::LteUeRrc::StateTracedCallback
</li>
</ul>
<b>Size</b> of this type is 1448 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteUeRrcProtocolIdeal

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteUeRrcProtocolReal

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MacHeaderType

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MacStatsCalculator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DlOutputFilename</b>: Name of the file where the downlink results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: DlMacStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>UlOutputFilename</b>: Name of the file where the uplink results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: UlMacStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1224 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ManagementMessageType

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MapScheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MatrixPropagationLossModel

<h3>Config Paths</h3>

ns3::MatrixPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DefaultLoss</b>: The default value for propagation loss, dB.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.79769e+308</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MeshInformationElementVector

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MeshL2RoutingProtocol

<h3>Config Paths</h3>

ns3::MeshL2RoutingProtocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/RoutingProtocol"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MeshPointDevice

<h3>Config Paths</h3>

ns3::MeshPointDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ForwardingDelay</b>: A random variable to account for processing time (microseconds) to forward a frame.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=300.0|Max=400.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RoutingProtocol</b>: The mesh routing protocol used by this mesh point.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::MeshL2RoutingProtocol></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MeshStack

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MeshWifiInterfaceMac

<h3>Config Paths</h3>

ns3::MeshWifiInterfaceMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::MeshWifiInterfaceMac"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BeaconGeneration</b>: Enable/Disable Beaconing.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BeaconInterval</b>: Beacon Interval
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RandomStart</b>: Window when beacon generating starts (uniform random) in seconds
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>BE_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BE_BlockAckThreshold</b>: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BE_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BE access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BE_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BE access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BE_Txop</b>: Queue that manages packets belonging to AC_BE access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>BK_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BK_BlockAckThreshold</b>: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BK_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BK access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BK_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BK access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BK_Txop</b>: Queue that manages packets belonging to AC_BK access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>CtsToSelfSupported</b>: Use CTS to Self when using a rate that is not in the basic rate set.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>QosSupported</b>: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShortSlotTimeSupported</b>: Whether or not short slot time is supported (only used by ERP APs or STAs).
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Ssid</b>: The ssid we want to belong to.
  <ul>
    <li>Set with class:  \ref ns3::SsidValue</li>
    <li>Underlying type: \p Ssid</li>
    <li>Initial value: ssid=default</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Txop</b>: The Txop object.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Txop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>VI_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VI_BlockAckThreshold</b>: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VI_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VI access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VI_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VI access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VI_Txop</b>: Queue that manages packets belonging to AC_VI access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>VO_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VO_BlockAckThreshold</b>: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VO_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VO access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VO_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VO access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VO_Txop</b>: Queue that manages packets belonging to AC_VO access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>AckedMpdu</b>: An MPDU that was successfully acknowledged, via either a Normal Ack or a Block Ack.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>DroppedMpdu</b>: An MPDU that was dropped for the given reason (see WifiMacDropReason).<br>%Callback signature: ns3::WifiMac::DroppedMpduCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: A packet has been dropped in the MAC layer before being queued for transmission. This trace source is fired, e.g., when an AP's MAC receives from the upper layer a packet destined to a station that is not associated with the AP or a STA's MAC receives a packet from the upper layer while it is not associated with any AP.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MpduResponseTimeout</b>: An MPDU whose response was not received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason) and the TXVECTOR used to transmit the MPDU. This trace source is fired when a CTS is missing after an RTS, when all CTS frames are missing after an MU-RTS, or when a Normal Ack is missing after an MPDU or after a DL MU PPDU acknowledged in SU format.<br>%Callback signature: ns3::WifiMac::MpduResponseTimeoutCallback
</li>
<li><b>NAckedMpdu</b>: An MPDU that was negatively acknowledged via a Block Ack.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>PsduMapResponseTimeout</b>: A PSDU map for which not all the responses were received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason), the set of MAC addresses of the stations that did not respond and the total number of stations that had to respond. This trace source is fired when not all the addressed stations responded to an MU-BAR Trigger frame (either sent as a SU frame or aggregated to PSDUs in the DL MU PPDU), a Basic Trigger Frame or a BSRP Trigger Frame.<br>%Callback signature: ns3::WifiMac::PsduMapResponseTimeoutCallback
</li>
<li><b>PsduResponseTimeout</b>: A PSDU whose response was not received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason) and the TXVECTOR used to transmit the PSDU. This trace source is fired when a BlockAck is missing after an A-MPDU, a BlockAckReq (possibly in the context of the acknowledgment of a DL MU PPDU in SU format) or a TB PPDU (in the latter case the missing BlockAck is a Multi-STA BlockAck).<br>%Callback signature: ns3::WifiMac::PsduResponseTimeoutCallback
</li>
<li><b>TxErrHeader</b>: The header of unsuccessfuly transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
<li><b>TxOkHeader</b>: The header of successfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 880 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtAddBaRequestHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtAddBaResponseHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtAssocRequestHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1208 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtAssocResponseHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1536 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtBeaconHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1584 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtDelBaHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtEmlOperatingModeNotification

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtProbeRequestHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 968 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtProbeResponseHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1584 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtReassocRequestHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1216 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MinstrelHtWifiManager

<h3>Config Paths</h3>

ns3::MinstrelHtWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::MinstrelHtWifiManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManagers/[i]/$ns3::MinstrelHtWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>EWMA</b>: EWMA level
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:100</li>
    <li>Initial value: 75</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LegacyUpdateStatistics</b>: The interval between updating statistics table (for legacy Minstrel)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LookAroundRate</b>: The percentage to try other rates (for legacy Minstrel)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:100</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketLength</b>: The packet length used for calculating mode TxTime (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1200</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PrintStats</b>: Control the printing of the statistics table
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SampleColumn</b>: The number of columns used for sampling
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdateStatistics</b>: The interval between updating statistics table
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseLatestAmendmentOnly</b>: Use only the latest amendment when it is supported by both peers
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 488 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MinstrelWifiManager

<h3>Config Paths</h3>

ns3::MinstrelWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::MinstrelWifiManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManagers/[i]/$ns3::MinstrelWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>EWMA</b>: EWMA level
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 75</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LookAroundRate</b>: The percentage to try other rates
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketLength</b>: The packet length used for calculating mode TxTime
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1200</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PrintSamples</b>: Print samples table
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PrintStats</b>: Print statistics table
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SampleColumn</b>: The number of columns used for sampling
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdateStatistics</b>: The interval between updating statistics table
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 496 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MobilityBuildingInfo

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MobilityModel

<h3>Config Paths</h3>

ns3::MobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MpduAggregator

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MPEGHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MqQueueDisc

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1096 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MsduAggregator

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MultiModelSpectrumChannel

<h3>Config Paths</h3>

ns3::MultiModelSpectrumChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::MultiModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/$ns3::MultiModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::MultiModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/$ns3::MultiModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::MultiModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/$ns3::MultiModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/$ns3::MultiModelSpectrumChannel"</li>
<li>"/ChannelList/[i]/$ns3::MultiModelSpectrumChannel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/$ns3::MultiModelSpectrumChannel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::SpectrumChannel</h3>
<ul>
<li><b>MaxLossDb</b>: If a single-frequency PropagationLossModel is used, this value represents the maximum loss in dB for which transmissions will be passed to the receiving PHY. Signals for which the PropagationLossModel returns a loss bigger than this value will not be propagated to the receiver. This parameter is to be used to reduce the computational load by not propagating signals that are far beyond the interference range. Note that the default value corresponds to considering all signals for reception. Tune this value with care.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PropagationLossModel</b>: A pointer to the propagation loss model attached to this channel.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PropagationLossModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::SpectrumChannel</h3>
<ul>
<li><b>Gain</b>: This trace is fired whenever a new path loss value is calculated. The parameters to this trace are : Pointer to the mobility model of the transmitter, Pointer to the mobility model of the receiver, Tx antenna gain, Rx antenna gain, Propagation gain, Pathloss<br>%Callback signature: ns3::SpectrumChannel::GainTracedCallback
</li>
<li><b>PathLoss</b>: This trace is fired whenever a new path loss value is calculated. The first and second parameters to the trace are pointers respectively to the TX and RX SpectrumPhy instances, whereas the third parameters is the loss value in dB. Note that the loss value reported by this trace is the single-frequency loss value obtained by evaluating only the TX and RX AntennaModels and the PropagationLossModel. In particular, note that SpectrumPropagationLossModel (even if present) is never used to evaluate the loss value reported in this trace.<br>%Callback signature: ns3::SpectrumChannel::LossTracedCallback
</li>
<li><b>TxSigParams</b>: This trace is fired whenever a signal is transmitted. The sole parameter is a pointer to a copy of the SpectrumSignalParameters provided by the transmitter.<br>%Callback signature: ns3::SpectrumChannel::SignalParametersTracedCallback
</li>
</ul>
<b>Size</b> of this type is 256 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MultiUserScheduler

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>AccessReqAc</b>: The Access Category for which the MultiUserScheduler makes requests for channel access.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p AC_BE|AC_VI|AC_VO|AC_BK</li>
    <li>Initial value: AC_BE</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>AccessReqInterval</b>: Duration of the interval between two consecutive requests for channel access made by the MultiUserScheduler. Such requests are made independently of the presence of frames in the queues of the AP and are intended to allow the AP to coordinate UL MU transmissions even without DL traffic. A null duration indicates that such requests shall not be made.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DelayAccessReqUponAccess</b>: If enabled, the access request interval is measured starting from the last time an EDCA function obtained channel access. Otherwise, the access request interval is measured starting from the last time the MultiUserScheduler made a request for channel access.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MuSnrTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NakagamiPropagationLossModel

<h3>Config Paths</h3>

ns3::NakagamiPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Distance1</b>: Beginning of the second distance field. Default is 80m.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Distance2</b>: Beginning of the third distance field. Default is 200m.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 200</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErlangRv</b>: Access to the underlying ErlangRandomVariable
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ErlangRandomVariable></li>
    <li>Initial value: ns3::ErlangRandomVariable</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>GammaRv</b>: Access to the underlying GammaRandomVariable
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::GammaRandomVariable></li>
    <li>Initial value: ns3::GammaRandomVariable</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>m0</b>: m0 for distances smaller than Distance1. Default is 1.5.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>m1</b>: m1 for distances smaller than Distance2. Default is 0.75.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.75</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>m2</b>: m2 for distances greater than Distance2. Default is 0.75.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.75</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NdiscCache

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>UnresolvedQueueSize</b>: Size of the queue for packets pending an NA reply.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NetDevice

<h3>Config Paths</h3>

ns3::NetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NetDeviceQueue

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 18446744073709551615 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NetDeviceQueueInterface

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>NTxQueues</b>: The number of device transmission queues
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:65535</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxQueuesType</b>: The type of transmission queues to be used
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::NetDeviceQueue</li>
    <li>Flags: <span class="mlabel">construct</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NeverLosChannelConditionModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NeverLosVehicleChannelConditionModel

<h3>Config Paths</h3>

ns3::NeverLosVehicleChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::NeverLosVehicleChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::NeverLosVehicleChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::NeverLosVehicleChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::NeverLosVehicleChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::NeverLosVehicleChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::NeverLosVehicleChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::NeverLosVehicleChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::NeverLosVehicleChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::NeverLosVehicleChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NistErrorRateModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NoBackhaulEpcHelper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>S11LinkDataRate</b>: The data rate to be used for the next S11 link to be created
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 10000000000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S11LinkDelay</b>: The delay to be used for the next S11 link to be created
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S11LinkMtu</b>: The MTU of the next S11 link to be created.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 2000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S5LinkDataRate</b>: The data rate to be used for the next S5 link to be created
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 100000000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S5LinkDelay</b>: The delay to be used for the next S5 link to be created
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S5LinkMtu</b>: The MTU of the next S5 link to be created
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 2000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X2LinkDataRate</b>: The data rate to be used for the next X2 link to be created
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 10000000000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X2LinkDelay</b>: The delay to be used for the next X2 link to be created
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X2LinkEnablePcap</b>: Enable Pcap for X2 link
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X2LinkMtu</b>: The MTU of the next X2 link to be created. Note that, because of some big X2 messages, you need a big MTU.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 3000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X2LinkPcapPrefix</b>: Prefix for Pcap generated by X2 link
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: x2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 408 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Node

<h3>Config Paths</h3>

ns3::Node is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ApplicationList</b>: The list of applications associated to this Node.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Application></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>DeviceList</b>: The list of devices associated to this Node.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NetDevice></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Id</b>: The id (unique integer) of this Node.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>SystemId</b>: The systemId of this node: a unique integer used for parallel simulations.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NodeListPriv

<h3>Config Paths</h3>

ns3::NodeListPriv is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>""</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>NodeList</b>: The list of all nodes created during the simulation.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Node></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NonCommunicatingNetDevice

<h3>Config Paths</h3>

ns3::NonCommunicatingNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NonCommunicatingNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Phy</b>: The PHY layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Object></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NoOpComponentCarrierManager

<h3>Config Paths</h3>

ns3::NoOpComponentCarrierManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 272 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NoOpHandoverAlgorithm

<h3>Config Paths</h3>

ns3::NoOpHandoverAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::NoOpHandoverAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::NoOpHandoverAlgorithm"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NormalRandomVariable

<h3>Config Paths</h3>

ns3::NormalRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac/ProbeDelay/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/ForwardingDelay/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice/MeshUnderJitter/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/NormalVelocity"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/NormalDirection"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/NormalPitch"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::NormalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::NormalRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bound</b>: The bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1e+307</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mean</b>: The mean value for the normal distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Variance</b>: The variance value for the normal distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrAlwaysOnAccessManager

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::NrChAccessManager</h3>
<ul>
<li><b>GrantDuration</b>: Duration of grant for transmitting.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +6e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrAmc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>AmcModel</b>: AMC model used to assign CQI
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p ErrorModel|ShannonModel</li>
    <li>Initial value: ErrorModel</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErrorModelType</b>: Type of the Error Model to use when AmcModel is set to ErrorModel. This parameter has to match the ErrorModelType in nr-spectrum-model,because they need to refer to same MCS tables and indexes
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::NrLteMiErrorModel</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NumRefScPerRb</b>: Number of Subcarriers carrying Reference Signals per RB
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:12</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrBearerStatsBase

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrBearerStatsCalculator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DlPdcpOutputFilename</b>: Name of the file where the downlink results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: NrDlPdcpStatsE2E.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlRlcOutputFilename</b>: Name of the file where the downlink results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: NrDlRlcStatsE2E.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EpochDuration</b>: Epoch duration.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2.5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartTime</b>: Start time of the on going epoch.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlPdcpOutputFilename</b>: Name of the file where the uplink results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: NrUlPdcpStatsE2E.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlRlcOutputFilename</b>: Name of the file where the uplink results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: NrUlRlcStatsE2E.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1984 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrBearerStatsSimple

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DlPdcpRxOutputFilename</b>: Name of the file where the downlink PDCP RX results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: NrDlPdcpRxStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlPdcpTxOutputFilename</b>: Name of the file where the downlink PDCP TX results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: NrDlPdcpTxStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlRlcRxOutputFilename</b>: Name of the file where the RLC downlink RX results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: NrDlRxRlcStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlRlcTxOutputFilename</b>: Name of the file where the RLC downlink TX results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: NrDlTxRlcStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlPdcpRxOutputFilename</b>: Name of the file where the uplink PDCP RX results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: NrUlPdcpRxStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlPdcpTxOutputFilename</b>: Name of the file where the uplink PDCP TX results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: NrUlPdcpTxStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlRlcRxOutputFilename</b>: Name of the file where the RLC uplink TX results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: NrUlRlcRxStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlRlcTxOutputFilename</b>: Name of the file where the RLC uplink RX results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: NrUlRlcTxStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 2368 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrChAccessManager

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>GrantDuration</b>: Duration of grant for transmitting.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +6e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrEesmCc

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrEesmCcT1

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrEesmCcT2

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrEesmErrorModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrEesmIr

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrEesmIrT1

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrEesmIrT2

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrErrorModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrGnbMac

<h3>Config Paths</h3>

ns3::NrGnbMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/NrGnbMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/NrGnbMac"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>NumHarqProcess</b>: Number of concurrent stop-and-wait Hybrid ARQ processes per user
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NumRbPerRbg</b>: Number of resource blocks per resource block group.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>DlHarqFeedback</b>: Harq feedback.<br>%Callback signature: ns3::NrGnbMac::DlHarqFeedbackTracedCallback
</li>
<li><b>DlScheduling</b>: Information regarding DL scheduling.<br>%Callback signature: ns3::NrGnbMac::DlSchedulingTracedCallback
</li>
<li><b>GnbMacRxedCtrlMsgsTrace</b>: Enb MAC Rxed Control Messages Traces.<br>%Callback signature: ns3::NrMacRxTrace::RxedGnbMacCtrlMsgsTracedCallback
</li>
<li><b>GnbMacTxedCtrlMsgsTrace</b>: Enb MAC Txed Control Messages Traces.<br>%Callback signature: ns3::NrMacRxTrace::TxedGnbMacCtrlMsgsTracedCallback
</li>
<li><b>SrReq</b>: Information regarding received scheduling request.<br>%Callback signature: ns3::NrGnbMac::SrTracedCallback
</li>
<li><b>UlScheduling</b>: Information regarding UL scheduling.<br>%Callback signature: ns3::NrGnbMac::SchedulingTracedCallback
</li>
</ul>
<b>Size</b> of this type is 720 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrGnbNetDevice

<h3>Config Paths</h3>

ns3::NrGnbNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BandwidthPartMap</b>: List of Bandwidth Part container.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BandwidthPartGnb></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>LteEnbComponentCarrierManager</b>: The component carrier manager associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteEnbComponentCarrierManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LteEnbRrc</b>: The RRC layer associated with the ENB
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteEnbRrc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::NrNetDevice</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 30000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::NrNetDevice</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Tx</b>: A packet has been transmitted with the Address as the recipient<br>%Callback signature: ns3::Packet::AddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrGnbPhy

<h3>Config Paths</h3>

ns3::NrGnbPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/NrGnbPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/NrGnbPhy"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>N0Delay</b>: Minimum processing delay needed to decode DL DCI and decode DL data
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>N1Delay</b>: Minimum processing delay (UE side) from the end of DL Data reception to the earliest possible start of the corresponding ACK/NACK transmission
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>N2Delay</b>: Minimum processing delay needed to decode UL DCI and prepare UL data
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0." In this model, we consider T0 = 290K.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NrSpectrumPhyList</b>: List of all SpectrumPhy instances of this NrUePhy.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrSpectrumPhy></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Numerology</b>: The 3GPP numerology to be used
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Pattern</b>: The slot pattern
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: F|F|F|F|F|F|F|F|F|F|</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PowerAllocationType</b>: Defines the type of the power allocation. Currently are supported two types: "UniformPowerAllocBw", which is a uniform power allocation over all bandwidth (over all RBs), and "UniformPowerAllocUsed", which is a uniform power allocation over used (active) RBs. By default is set a uniform power allocation over used RBs .
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p UniformPowerAllocBw|UniformPowerAllocUsed</li>
    <li>Initial value: UniformPowerAllocUsed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RbOverhead</b>: Overhead when calculating the usable RB number
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:0.5</li>
    <li>Initial value: 0.04</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SymbolsPerSlot</b>: Number of symbols in one slot
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 14</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TbDecodeLatency</b>: Transport block decode latency
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +100000ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPower</b>: Transmission power in dBm
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>GnbPhyRxedCtrlMsgsTrace</b>: Enb PHY Rxed Control Messages Traces.<br>%Callback signature: ns3::NrPhyRxTrace::RxedGnbPhyCtrlMsgsTracedCallback
</li>
<li><b>GnbPhyTxedCtrlMsgsTrace</b>: Enb PHY Txed Control Messages Traces.<br>%Callback signature: ns3::NrPhyRxTrace::TxedGnbPhyCtrlMsgsTracedCallback
</li>
<li><b>RBDataStats</b>: Resource Block used for data: SfnSf, symbol, RB PHY map, bwp ID, cell ID<br>%Callback signature: ns3::NrGnbPhy::RBStatsTracedCallback
</li>
<li><b>SlotCtrlStats</b>: Ctrl statistics for the current slot: SfnSf, active UE, used RE, used symbols, available RBs, available symbols, bwp ID, cell ID<br>%Callback signature: ns3::NrGnbPhy::SlotStatsTracedCallback
</li>
<li><b>SlotDataStats</b>: Data statistics for the current slot: SfnSf, active UE, used RE, used symbols, available RBs, available symbols, bwp ID, cell ID<br>%Callback signature: ns3::NrGnbPhy::SlotStatsTracedCallback
</li>
<li><b>UlSinrTrace</b>: UL SINR statistics.<br>%Callback signature: ns3::UlSinr::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1176 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrGnbRrcProtocolIdeal

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrHelper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>HarqEnabled</b>: Enable Hybrid ARQ
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1240 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrLteMiErrorModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacHeaderFs

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacHeaderFsDl

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacHeaderFsUl

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacHeaderVs

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacHeaderVsDl

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacHeaderVsUl

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacRxTrace

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacScheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacSchedulerLcAlgorithm

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacSchedulerLcQos

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacSchedulerLcRR

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacSchedulerNs3

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The time while a CQI is valid
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlAmc</b>: The DL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlCtrlSymbols</b>: Number of symbols allocated for DL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableHarqReTx</b>: If true, it would set the max HARQ ReTx to 3; otherwise it set it to 0
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInFSlots</b>: Denotes whether the SRSs will be transmitted in F slotsIf true, it can be transmitted in F slots, otherwise it cannot.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInUlSlots</b>: Denotes whether the SRSs will be transmitted only in F slotsor both in F and UL slots. If False, SRS is transmitted onlyin F slots, if True in both (F/UL)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsDl</b>: Fix MCS to value set in StartingMcsDl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsUl</b>: Fix MCS to value set in StartingMcsUl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxDlMcs</b>: Maximum MCS index for DL
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int8_t -1:30</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SchedLcAlgorithmType</b>: Type of the scheduling algorithm that assigns bytes to the different LCs.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::NrMacSchedulerLcRR</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>SrsSymbols</b>: Number of symbols allocated for UL SRS
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsDl</b>: Starting MCS for DL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsUl</b>: Starting MCS for UL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlAmc</b>: The UL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlCtrlSymbols</b>: Number of symbols allocated for UL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 584 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacSchedulerOfdma

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::NrMacSchedulerNs3</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The time while a CQI is valid
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlAmc</b>: The DL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlCtrlSymbols</b>: Number of symbols allocated for DL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableHarqReTx</b>: If true, it would set the max HARQ ReTx to 3; otherwise it set it to 0
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInFSlots</b>: Denotes whether the SRSs will be transmitted in F slotsIf true, it can be transmitted in F slots, otherwise it cannot.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInUlSlots</b>: Denotes whether the SRSs will be transmitted only in F slotsor both in F and UL slots. If False, SRS is transmitted onlyin F slots, if True in both (F/UL)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsDl</b>: Fix MCS to value set in StartingMcsDl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsUl</b>: Fix MCS to value set in StartingMcsUl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxDlMcs</b>: Maximum MCS index for DL
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int8_t -1:30</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SchedLcAlgorithmType</b>: Type of the scheduling algorithm that assigns bytes to the different LCs.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::NrMacSchedulerLcRR</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>SrsSymbols</b>: Number of symbols allocated for UL SRS
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsDl</b>: Starting MCS for DL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsUl</b>: Starting MCS for UL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlAmc</b>: The UL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlCtrlSymbols</b>: Number of symbols allocated for UL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>SymPerBeam</b>: Number of assigned symbol per beam. Gets called every time an assignment is made<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 616 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacSchedulerOfdmaMR

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::NrMacSchedulerNs3</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The time while a CQI is valid
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlAmc</b>: The DL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlCtrlSymbols</b>: Number of symbols allocated for DL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableHarqReTx</b>: If true, it would set the max HARQ ReTx to 3; otherwise it set it to 0
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInFSlots</b>: Denotes whether the SRSs will be transmitted in F slotsIf true, it can be transmitted in F slots, otherwise it cannot.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInUlSlots</b>: Denotes whether the SRSs will be transmitted only in F slotsor both in F and UL slots. If False, SRS is transmitted onlyin F slots, if True in both (F/UL)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsDl</b>: Fix MCS to value set in StartingMcsDl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsUl</b>: Fix MCS to value set in StartingMcsUl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxDlMcs</b>: Maximum MCS index for DL
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int8_t -1:30</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SchedLcAlgorithmType</b>: Type of the scheduling algorithm that assigns bytes to the different LCs.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::NrMacSchedulerLcRR</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>SrsSymbols</b>: Number of symbols allocated for UL SRS
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsDl</b>: Starting MCS for DL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsUl</b>: Starting MCS for UL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlAmc</b>: The UL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlCtrlSymbols</b>: Number of symbols allocated for UL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::NrMacSchedulerOfdma</h3>
<ul>
<li><b>SymPerBeam</b>: Number of assigned symbol per beam. Gets called every time an assignment is made<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 616 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacSchedulerOfdmaPF

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>FairnessIndex</b>: Value (between 0 and 1) that defines the PF metric (1 is the traditional 3GPP PF, 0 is RR in throughput
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: \p float 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LastAvgTPutWeight</b>: Weight of the last average throughput in the average throughput calculation
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: \p float 0:3.40282e+38</li>
    <li>Initial value: 99</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::NrMacSchedulerNs3</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The time while a CQI is valid
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlAmc</b>: The DL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlCtrlSymbols</b>: Number of symbols allocated for DL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableHarqReTx</b>: If true, it would set the max HARQ ReTx to 3; otherwise it set it to 0
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInFSlots</b>: Denotes whether the SRSs will be transmitted in F slotsIf true, it can be transmitted in F slots, otherwise it cannot.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInUlSlots</b>: Denotes whether the SRSs will be transmitted only in F slotsor both in F and UL slots. If False, SRS is transmitted onlyin F slots, if True in both (F/UL)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsDl</b>: Fix MCS to value set in StartingMcsDl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsUl</b>: Fix MCS to value set in StartingMcsUl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxDlMcs</b>: Maximum MCS index for DL
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int8_t -1:30</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SchedLcAlgorithmType</b>: Type of the scheduling algorithm that assigns bytes to the different LCs.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::NrMacSchedulerLcRR</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>SrsSymbols</b>: Number of symbols allocated for UL SRS
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsDl</b>: Starting MCS for DL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsUl</b>: Starting MCS for UL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlAmc</b>: The UL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlCtrlSymbols</b>: Number of symbols allocated for UL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::NrMacSchedulerOfdma</h3>
<ul>
<li><b>SymPerBeam</b>: Number of assigned symbol per beam. Gets called every time an assignment is made<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 632 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacSchedulerOfdmaQos

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>FairnessIndex</b>: Value (between 0 and 1) that defines the PF metric (1 is the traditional 3GPP PF, 0 is RR in throughput
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: \p float 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LastAvgTPutWeight</b>: Weight of the last average throughput in the average throughput calculation
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: \p float 0:3.40282e+38</li>
    <li>Initial value: 99</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::NrMacSchedulerNs3</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The time while a CQI is valid
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlAmc</b>: The DL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlCtrlSymbols</b>: Number of symbols allocated for DL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableHarqReTx</b>: If true, it would set the max HARQ ReTx to 3; otherwise it set it to 0
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInFSlots</b>: Denotes whether the SRSs will be transmitted in F slotsIf true, it can be transmitted in F slots, otherwise it cannot.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInUlSlots</b>: Denotes whether the SRSs will be transmitted only in F slotsor both in F and UL slots. If False, SRS is transmitted onlyin F slots, if True in both (F/UL)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsDl</b>: Fix MCS to value set in StartingMcsDl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsUl</b>: Fix MCS to value set in StartingMcsUl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxDlMcs</b>: Maximum MCS index for DL
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int8_t -1:30</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SchedLcAlgorithmType</b>: Type of the scheduling algorithm that assigns bytes to the different LCs.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::NrMacSchedulerLcRR</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>SrsSymbols</b>: Number of symbols allocated for UL SRS
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsDl</b>: Starting MCS for DL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsUl</b>: Starting MCS for UL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlAmc</b>: The UL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlCtrlSymbols</b>: Number of symbols allocated for UL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::NrMacSchedulerOfdma</h3>
<ul>
<li><b>SymPerBeam</b>: Number of assigned symbol per beam. Gets called every time an assignment is made<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 632 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacSchedulerOfdmaRR

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::NrMacSchedulerNs3</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The time while a CQI is valid
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlAmc</b>: The DL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlCtrlSymbols</b>: Number of symbols allocated for DL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableHarqReTx</b>: If true, it would set the max HARQ ReTx to 3; otherwise it set it to 0
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInFSlots</b>: Denotes whether the SRSs will be transmitted in F slotsIf true, it can be transmitted in F slots, otherwise it cannot.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInUlSlots</b>: Denotes whether the SRSs will be transmitted only in F slotsor both in F and UL slots. If False, SRS is transmitted onlyin F slots, if True in both (F/UL)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsDl</b>: Fix MCS to value set in StartingMcsDl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsUl</b>: Fix MCS to value set in StartingMcsUl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxDlMcs</b>: Maximum MCS index for DL
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int8_t -1:30</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SchedLcAlgorithmType</b>: Type of the scheduling algorithm that assigns bytes to the different LCs.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::NrMacSchedulerLcRR</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>SrsSymbols</b>: Number of symbols allocated for UL SRS
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsDl</b>: Starting MCS for DL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsUl</b>: Starting MCS for UL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlAmc</b>: The UL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlCtrlSymbols</b>: Number of symbols allocated for UL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::NrMacSchedulerOfdma</h3>
<ul>
<li><b>SymPerBeam</b>: Number of assigned symbol per beam. Gets called every time an assignment is made<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 616 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacSchedulerSrsDefault

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>StartingPeriodicity</b>: Starting value for the periodicity
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacSchedulerTdma

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::NrMacSchedulerNs3</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The time while a CQI is valid
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlAmc</b>: The DL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlCtrlSymbols</b>: Number of symbols allocated for DL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableHarqReTx</b>: If true, it would set the max HARQ ReTx to 3; otherwise it set it to 0
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInFSlots</b>: Denotes whether the SRSs will be transmitted in F slotsIf true, it can be transmitted in F slots, otherwise it cannot.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInUlSlots</b>: Denotes whether the SRSs will be transmitted only in F slotsor both in F and UL slots. If False, SRS is transmitted onlyin F slots, if True in both (F/UL)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsDl</b>: Fix MCS to value set in StartingMcsDl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsUl</b>: Fix MCS to value set in StartingMcsUl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxDlMcs</b>: Maximum MCS index for DL
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int8_t -1:30</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SchedLcAlgorithmType</b>: Type of the scheduling algorithm that assigns bytes to the different LCs.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::NrMacSchedulerLcRR</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>SrsSymbols</b>: Number of symbols allocated for UL SRS
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsDl</b>: Starting MCS for DL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsUl</b>: Starting MCS for UL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlAmc</b>: The UL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlCtrlSymbols</b>: Number of symbols allocated for UL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 584 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacSchedulerTdmaMR

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::NrMacSchedulerNs3</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The time while a CQI is valid
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlAmc</b>: The DL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlCtrlSymbols</b>: Number of symbols allocated for DL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableHarqReTx</b>: If true, it would set the max HARQ ReTx to 3; otherwise it set it to 0
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInFSlots</b>: Denotes whether the SRSs will be transmitted in F slotsIf true, it can be transmitted in F slots, otherwise it cannot.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInUlSlots</b>: Denotes whether the SRSs will be transmitted only in F slotsor both in F and UL slots. If False, SRS is transmitted onlyin F slots, if True in both (F/UL)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsDl</b>: Fix MCS to value set in StartingMcsDl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsUl</b>: Fix MCS to value set in StartingMcsUl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxDlMcs</b>: Maximum MCS index for DL
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int8_t -1:30</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SchedLcAlgorithmType</b>: Type of the scheduling algorithm that assigns bytes to the different LCs.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::NrMacSchedulerLcRR</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>SrsSymbols</b>: Number of symbols allocated for UL SRS
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsDl</b>: Starting MCS for DL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsUl</b>: Starting MCS for UL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlAmc</b>: The UL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlCtrlSymbols</b>: Number of symbols allocated for UL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 584 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacSchedulerTdmaPF

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>FairnessIndex</b>: Value (between 0 and 1) that defines the PF metric (1 is the traditional 3GPP PF, 0 is RR in throughput
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LastAvgTPutWeight</b>: Weight of the last average throughput in the average throughput calculation
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 99</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::NrMacSchedulerNs3</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The time while a CQI is valid
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlAmc</b>: The DL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlCtrlSymbols</b>: Number of symbols allocated for DL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableHarqReTx</b>: If true, it would set the max HARQ ReTx to 3; otherwise it set it to 0
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInFSlots</b>: Denotes whether the SRSs will be transmitted in F slotsIf true, it can be transmitted in F slots, otherwise it cannot.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInUlSlots</b>: Denotes whether the SRSs will be transmitted only in F slotsor both in F and UL slots. If False, SRS is transmitted onlyin F slots, if True in both (F/UL)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsDl</b>: Fix MCS to value set in StartingMcsDl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsUl</b>: Fix MCS to value set in StartingMcsUl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxDlMcs</b>: Maximum MCS index for DL
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int8_t -1:30</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SchedLcAlgorithmType</b>: Type of the scheduling algorithm that assigns bytes to the different LCs.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::NrMacSchedulerLcRR</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>SrsSymbols</b>: Number of symbols allocated for UL SRS
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsDl</b>: Starting MCS for DL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsUl</b>: Starting MCS for UL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlAmc</b>: The UL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlCtrlSymbols</b>: Number of symbols allocated for UL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 600 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacSchedulerTdmaQos

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>FairnessIndex</b>: Value (between 0 and 1) that defines the PF metric (1 is the traditional 3GPP PF, 0 is RR in throughput
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LastAvgTPutWeight</b>: Weight of the last average throughput in the average throughput calculation
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 99</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::NrMacSchedulerNs3</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The time while a CQI is valid
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlAmc</b>: The DL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlCtrlSymbols</b>: Number of symbols allocated for DL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableHarqReTx</b>: If true, it would set the max HARQ ReTx to 3; otherwise it set it to 0
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInFSlots</b>: Denotes whether the SRSs will be transmitted in F slotsIf true, it can be transmitted in F slots, otherwise it cannot.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInUlSlots</b>: Denotes whether the SRSs will be transmitted only in F slotsor both in F and UL slots. If False, SRS is transmitted onlyin F slots, if True in both (F/UL)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsDl</b>: Fix MCS to value set in StartingMcsDl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsUl</b>: Fix MCS to value set in StartingMcsUl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxDlMcs</b>: Maximum MCS index for DL
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int8_t -1:30</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SchedLcAlgorithmType</b>: Type of the scheduling algorithm that assigns bytes to the different LCs.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::NrMacSchedulerLcRR</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>SrsSymbols</b>: Number of symbols allocated for UL SRS
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsDl</b>: Starting MCS for DL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsUl</b>: Starting MCS for UL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlAmc</b>: The UL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlCtrlSymbols</b>: Number of symbols allocated for UL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 600 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacSchedulerTdmaRR

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::NrMacSchedulerNs3</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The time while a CQI is valid
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlAmc</b>: The DL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlCtrlSymbols</b>: Number of symbols allocated for DL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableHarqReTx</b>: If true, it would set the max HARQ ReTx to 3; otherwise it set it to 0
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInFSlots</b>: Denotes whether the SRSs will be transmitted in F slotsIf true, it can be transmitted in F slots, otherwise it cannot.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSrsInUlSlots</b>: Denotes whether the SRSs will be transmitted only in F slotsor both in F and UL slots. If False, SRS is transmitted onlyin F slots, if True in both (F/UL)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsDl</b>: Fix MCS to value set in StartingMcsDl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FixedMcsUl</b>: Fix MCS to value set in StartingMcsUl
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxDlMcs</b>: Maximum MCS index for DL
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int8_t -1:30</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SchedLcAlgorithmType</b>: Type of the scheduling algorithm that assigns bytes to the different LCs.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::NrMacSchedulerLcRR</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>SrsSymbols</b>: Number of symbols allocated for UL SRS
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsDl</b>: Starting MCS for DL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingMcsUl</b>: Starting MCS for UL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlAmc</b>: The UL AMC of this scheduler
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrAmc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlCtrlSymbols</b>: Number of symbols allocated for UL CTRL
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 584 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacSchedulingStats

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DlOutputFilename</b>: Name of the file where the downlink results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: NrDlMacStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>UlOutputFilename</b>: Name of the file where the uplink results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: NrUlMacStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrMacShortBsrCe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrNetDevice

<h3>Config Paths</h3>

ns3::NrNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 30000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Tx</b>: A packet has been transmitted with the Address as the recipient<br>%Callback signature: ns3::Packet::AddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrPhy

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 424 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrPhyRxTrace

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>SimTag</b>: simulation tag that will be concatenated to output file namesin order to distinguish them, for example: RxPacketTrace-${SimTag}.out. 
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: ""</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrPointToPointEpcHelper

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::PointToPointEpcHelper</h3>
<ul>
<li><b>S1uLinkDataRate</b>: The data rate to be used for the next S1-U link to be created
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 10000000000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S1uLinkDelay</b>: The delay to be used for the next S1-U link to be created
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S1uLinkEnablePcap</b>: Enable Pcap for X2 link
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S1uLinkMtu</b>: The MTU of the next S1-U link to be created. Note that, because of the additional GTP/UDP/IP tunneling overhead, you need a MTU larger than the end-to-end MTU that you want to support.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 2000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S1uLinkPcapPrefix</b>: Prefix for Pcap generated by S1-U link
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: s1u</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::NoBackhaulEpcHelper</h3>
<ul>
<li><b>S11LinkDataRate</b>: The data rate to be used for the next S11 link to be created
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 10000000000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S11LinkDelay</b>: The delay to be used for the next S11 link to be created
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S11LinkMtu</b>: The MTU of the next S11 link to be created.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 2000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S5LinkDataRate</b>: The data rate to be used for the next S5 link to be created
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 100000000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S5LinkDelay</b>: The delay to be used for the next S5 link to be created
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S5LinkMtu</b>: The MTU of the next S5 link to be created
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 2000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X2LinkDataRate</b>: The data rate to be used for the next X2 link to be created
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 10000000000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X2LinkDelay</b>: The delay to be used for the next X2 link to be created
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X2LinkEnablePcap</b>: Enable Pcap for X2 link
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X2LinkMtu</b>: The MTU of the next X2 link to be created. Note that, because of some big X2 messages, you need a big MTU.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 3000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X2LinkPcapPrefix</b>: Prefix for Pcap generated by X2 link
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: x2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 512 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrRadioBearerTag

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>lcid</b>: The id within the UE identifying the logical channel to which the packet belongs
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>rnti</b>: The rnti that indicates the UE to which packet belongs
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>size</b>: Size in bytes of the RLC PDU
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrRadioEnvironmentMapHelper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>InstallationDelay</b>: How many time it is needed in the simulation to configure phy parameters at UE, depends on RRC message timing.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>IterForAverage</b>: Number of iterations for the calculationof the average rem value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>RemMode</b>: There are three high level modes of Rem generation: a) BEAM_SHAPE in which are represented the beams that are configured in the user's script scenario, considering that the receiver always has quasi-omni, and that all the beams point toward the UE which is passed as UE of interest. The purpose of this map is to illustrate the REM of the scenario that is configured.b) COVERAGE_AREA which produces two REM maps: the worst-case SINR and best-SNR for each rem position; Worst case SINR means that all interfering devices use for the transmission the beam towards the rem point;and also for the best-SNR, for each transmitting device and the REM point are used the best directional beam-pair and then is selected the best SNR.c) UE_COVERAGE which is similar as the above, although the Tx Deviceis the UE (UL direction), and the Rx device is each gNB to which it is connected each time, while the rest of gNBs (if they are present) arepointing their beams towards the Rx gNB. In case of TDD, the SINR mapwill show the interference caused by the DL of these gNBs.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p BeamShape|CoverageArea|UeCoverageArea</li>
    <li>Initial value: CoverageArea</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SimTag</b>: simulation tag that will be concatenated to output file namesin order to distinguish them, for example: nr-rem-${SimTag}.out. nr-rem-${SimTag}-ues.txt, nr-rem-${SimTag}-gnbs.txt, nr-rem-${SimTag}-buildings.txt.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: ""</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>XMax</b>: The max x coordinate of the map.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>XMin</b>: The min x coordinate of the map.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>XRes</b>: The resolution (number of points) of themap along the x axis.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 2:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>YMax</b>: The max y coordinate of the map.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>YMin</b>: The min y coordinate of the map.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>YRes</b>: The resolution (number of points) of themap along the y axis.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 2:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Z</b>: The value of the z coordinate for whichthe map is to be generated.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 480 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrSpectrumPhy

<h3>Config Paths</h3>

ns3::NrSpectrumPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/NrGnbPhy/NrSpectrumPhyList/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/ComponentCarrierMapUe/[i]/NrUePhy/NrSpectrumPhyList/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/NrGnbPhy/NrSpectrumPhyList/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/ComponentCarrierMapUe/[i]/NrUePhy/NrSpectrumPhyList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CcaMode1Threshold</b>: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to declare CCA BUSY state.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -62</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DataErrorModelEnabled</b>: Activate/Deactivate the error model of data (TBs of PDSCH and PUSCH) [by default is active].
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>ErrorModelType</b>: Default type of the Error Model to apply to TBs of PDSCH and PUSCH
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::NrLteMiErrorModel</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>InterStreamInterferenceRatio</b>: Inter-stream interference ratio in the range of 0 to 1, e.g.,0 means no interference and 1 means full interference
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>UnlicensedMode</b>: Activate/Deactivate unlicensed mode in which energy detection is performed and PHY state machine has an additional state CCA_BUSY.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>ChannelOccupied</b>: This traced callback is triggered every time that the channel is occupied<br>%Callback signature: ns3::Time::TracedCallback
</li>
<li><b>DlCtrlPathloss</b>: Pathloss calculated for CTRL<br>%Callback signature: ns3::NrSpectrumPhy::DlPathlossTrace
</li>
<li><b>DlDataPathloss</b>: Pathloss calculated for CTRL<br>%Callback signature: ns3::NrSpectrumPhy::DlPathlossTrace
</li>
<li><b>DlDataSnrTrace</b>: Report the SNR computed for each TB in DL<br>%Callback signature: ns3::NrSpectrumPhy::DataSnrTracedCallback
</li>
<li><b>RxDataTrace</b>: Indicates the reception of data from this cell (reporting the rxPsd without interferences)<br>%Callback signature: ns3::RxDataTracedCallback::TracedCallback
</li>
<li><b>RxPacketTraceEnb</b>: The no. of packets received and transmitted by the Base Station<br>%Callback signature: ns3::RxPacketTraceParams::TracedCallback
</li>
<li><b>RxPacketTraceUe</b>: The no. of packets received and transmitted by the User Device<br>%Callback signature: ns3::RxPacketTraceParams::TracedCallback
</li>
<li><b>TxCtrlTrace</b>: Indicates when the channel is being occupied by a ctrl transmission<br>%Callback signature: ns3::Time::TracedCallback
</li>
<li><b>TxDataTrace</b>: Indicates when the channel is being occupied by a data transmission<br>%Callback signature: ns3::Time::TracedCallback
</li>
<li><b>TxPacketTraceEnb</b>: Traces when the packet is being transmitted by the Base Station<br>%Callback signature: ns3::GnbPhyPacketCountParameter::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 736 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrStatsCalculator

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrUeMac

<h3>Config Paths</h3>

ns3::NrUeMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/ComponentCarrierMapUe/[i]/NrUeMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/ComponentCarrierMapUe/[i]/NrUeMac"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>NumHarqProcess</b>: Number of concurrent stop-and-wait Hybrid ARQ processes per user
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>UeMacRxedCtrlMsgsTrace</b>: Ue MAC Control Messages Traces.<br>%Callback signature: ns3::NrMacRxTrace::RxedUeMacCtrlMsgsTracedCallback
</li>
<li><b>UeMacTxedCtrlMsgsTrace</b>: Ue MAC Control Messages Traces.<br>%Callback signature: ns3::NrMacRxTrace::TxedUeMacCtrlMsgsTracedCallback
</li>
</ul>
<b>Size</b> of this type is 368 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrUeNetDevice

<h3>Config Paths</h3>

ns3::NrUeNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ComponentCarrierMapUe</b>: List of all component Carrier.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BandwidthPartUe></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>EpcUeNas</b>: The NAS associated to this UeNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::EpcUeNas></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Imsi</b>: International Mobile Subscriber Identity assigned to this UE
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint64_t 0:18446744073709551615</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LteUeComponentCarrierManager</b>: The ComponentCarrierManager associated to this UeNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteUeComponentCarrierManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LteUeRrc</b>: The RRC layer associated with the ENB
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteUeRrc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>nrUeRrc</b>: The RRC associated to this UeNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteUeRrc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::NrNetDevice</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 30000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::NrNetDevice</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Tx</b>: A packet has been transmitted with the Address as the recipient<br>%Callback signature: ns3::Packet::AddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 208 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrUePhy

<h3>Config Paths</h3>

ns3::NrUePhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/ComponentCarrierMapUe/[i]/NrUePhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/ComponentCarrierMapUe/[i]/NrUePhy"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>EnableUplinkPowerControl</b>: If true, Uplink Power Control will be enabled.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>FixedRankIndicator</b>: The rank indicator
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:2</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LBTThresholdForCtrl</b>: After a DL/UL transmission, if we have less than this value to send the UL CTRL, we consider the channel as granted
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +25000ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0." In this model, we consider T0 = 290K.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NrSpectrumPhyList</b>: List of all SpectrumPhy instances of this NrUePhy.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NrSpectrumPhy></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PowerAllocationType</b>: Defines the type of the power allocation. Currently are supported two types: "UniformPowerAllocBw", which is a uniform power allocation over all bandwidth (over all RBs), and "UniformPowerAllocBw", which is a uniform power allocation over used (active) RBs. By default is set a uniform power allocation over used RBs .
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p UniformPowerAllocBw|UniformPowerAllocUsed</li>
    <li>Initial value: UniformPowerAllocUsed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RiSinrThreshold1</b>: The SINR threshold 1 in dB. It is used to adaptively choosethe rank indicator value when a UE is trying to switch fromone stream to two. The UE will report RI = 2 if the averageSINR of the measured stream is above this threshold; otherwise,it will report RI = 1. The initial threshold value of 10 dBis selected according to: https://ieeexplore.ieee.org/abstract/document/6364098 Figure 2
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RiSinrThreshold2</b>: The SINR threshold 2 in dB. It is used to adaptively choosethe rank indicator value once a UE has already switched totwo streams, i.e., it has already received the data on thesecond stream and has measured its average SINR. The UE willreport RI = 2 if the average SINR of both the stream isabove this threshold; otherwise, it will report RI = 1.The initial threshold value of 10 dB is selected according to: https://ieeexplore.ieee.org/abstract/document/6364098 Figure 2
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TbDecodeLatency</b>: Transport block decode latency
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +100000ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPower</b>: Transmission power in dBm
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UeMeasurementsFilterPeriod</b>: Time period for reporting UE measurements, i.e., thelength of layer-1 filtering.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseFixedRi</b>: If true, UE will use a fixed configured RI value; otherwise,it will use an adaptive RI value based on the SINR of thestreams
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>DlCtrlSinr</b>: Report the SINR computed for DL CTRL<br>%Callback signature: ns3::NrUePhy::DlCtrlSinrTracedCallback
</li>
<li><b>DlDataSinr</b>: DL DATA SINR statistics.<br>%Callback signature: ns3::NrUePhy::DlDataSinrTracedCallback
</li>
<li><b>ReportDownlinkTbSize</b>: Report allocated downlink TB size for trace.<br>%Callback signature: ns3::DlTbSize::TracedCallback
</li>
<li><b>ReportPowerSpectralDensity</b>: Power Spectral Density data.<br>%Callback signature: ns3::NrUePhy::PowerSpectralDensityTracedCallback
</li>
<li><b>ReportRsrp</b>: RSRP statistics.<br>%Callback signature: ns3::CurrentRsrp::TracedCallback
</li>
<li><b>ReportUplinkTbSize</b>: Report allocated uplink TB size for trace.<br>%Callback signature: ns3::UlTbSize::TracedCallback
</li>
<li><b>UePhyRxedCtrlMsgsTrace</b>: Ue PHY Control Messages Traces.<br>%Callback signature: ns3::NrPhyRxTrace::RxedUePhyCtrlMsgsTracedCallback
</li>
<li><b>UePhyRxedDlDciTrace</b>: Ue PHY DL DCI Traces.<br>%Callback signature: ns3::NrPhyRxTrace::RxedUePhyDlDciTracedCallback
</li>
<li><b>UePhyTxedCtrlMsgsTrace</b>: Ue PHY Control Messages Traces.<br>%Callback signature: ns3::NrPhyRxTrace::TxedUePhyCtrlMsgsTracedCallback
</li>
<li><b>UePhyTxedHarqFeedbackTrace</b>: Ue PHY DL HARQ Feedback Traces.<br>%Callback signature: ns3::NrPhyRxTrace::TxedUePhyHarqFeedbackTracedCallback
</li>
</ul>
<b>Size</b> of this type is 1128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NrUePowerControl

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>AccumulationEnabled</b>: If true TPC accumulation mode will be active, otherwise absolute mode will be active
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Alpha</b>: Value of Alpha parameter
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BL_CE</b>: When set to true means that this power control is applied to bandwidth reduced, low complexity or coverage enhanced (BL/CE) device.By default this attribute is set to false. Default BL_CE mode is CEModeB. This option can be used only in conjunction with attribute TSpec being set to TS 36.213.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>ClosedLoop</b>: If true Closed Loop mode will be active, otherwise Open Loop
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>K0Pucch</b>: K0_PUCCH parameter needed for PUCCH accumulation state calculation. Should be configured according TS 36.213 or TS 38.213 specification depending on TSpec attribute setting. According to TS 38.213 for FDD or FDD-TDD and primary cell frame structure type 1, M is equal to 1 and K0PUCCH is 4
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>KPusch</b>: K_PUSCH parameter needed for PUSCH accumulation state calculation. This value must be carefully configured according to TS 36.213 or TS 38.213 and taking into account the type of simulation scenario. E.g. TDD, FDD, frame structure type, etc. For, LTE FDD or FDD-TDD and frame structure type 1, KPusch is 4.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Pcmax</b>: Max Transmission power in dBm, Default value 23 dBmTS36.101 section 6.2.3
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 23</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Pcmin</b>: Min Transmission power in dBm, Default value -40 dBmTS36.101 section 6.2.3
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -40</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>PoNominalPucch</b>: P_O_NOMINAL_PUCCH   INT (-126 ... 24), Default value -80
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int16_t -126:24</li>
    <li>Initial value: -80</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>PoNominalPusch</b>: P_O_NOMINAL_PUSCH   INT (-126 ... 24), Default value -80
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int16_t -126:24</li>
    <li>Initial value: -80</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>PoUePucch</b>: P_O_UE_PUCCH   INT(-8...7), Default value 0
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int16_t -8:7</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>PoUePusch</b>: P_O_UE_PUSCH   INT(-8...7), Default value 0
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int16_t -8:7</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>PsrsOffset</b>: P_SRS_OFFSET   INT(0...15), Default value 7
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int16_t 0:15</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TSpec</b>: Technical specification TS 36.213 or TS 38.213,By default is set TS to 36.213. To configure TS 36.213 set the value TS36.213, while for TS 38.213 should be configured TS38.213.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p TS36.213|TS38.213</li>
    <li>Initial value: TS36.213</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>ReportPucchTxPower</b>: Report PUCCH TxPower in dBm<br>%Callback signature: ns3::NrUePowerControl::TxPowerTracedCallback
</li>
<li><b>ReportPuschTxPower</b>: Report PUSCH TxPower in dBm<br>%Callback signature: ns3::NrUePowerControl::TxPowerTracedCallback
</li>
<li><b>ReportSrsTxPower</b>: Report SRS TxPower in dBm<br>%Callback signature: ns3::NrUePowerControl::TxPowerTracedCallback
</li>
</ul>
<b>Size</b> of this type is 344 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::nrUeRrcProtocolIdeal

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Object

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ObjectBase

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ObssPdAlgorithm

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ObssPdLevel</b>: The current OBSS PD level (dBm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -101:-62</li>
    <li>Initial value: -82</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ObssPdLevelMax</b>: Maximum value (dBm) of OBSS PD level.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -101:-62</li>
    <li>Initial value: -62</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ObssPdLevelMin</b>: Minimum value (dBm) of OBSS PD level.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -101:-62</li>
    <li>Initial value: -82</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPowerRefMimo</b>: The MIMO reference TX power level (dBm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPowerRefSiso</b>: The SISO reference TX power level (dBm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 21</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Reset</b>: Trace CCA Reset event<br>%Callback signature: ns3::ObssPdAlgorithm::ResetTracedCallback
</li>
</ul>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OhBuildingsPropagationLossModel

<h3>Config Paths</h3>

ns3::OhBuildingsPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::BuildingsPropagationLossModel</h3>
<ul>
<li><b>InternalWallLoss</b>: Additional loss for each internal wall [dB]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaExtWalls</b>: Standard deviation of the normal distribution used to calculate the shadowing due to ext walls
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaIndoor</b>: Standard deviation of the normal distribution used to calculate the shadowing for indoor nodes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowSigmaOutdoor</b>: Standard deviation of the normal distribution used to calculate the shadowing for outdoor nodes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OkumuraHataPropagationLossModel

<h3>Config Paths</h3>

ns3::OkumuraHataPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CitySize</b>: Dimension of the city
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Small|Medium|Large</li>
    <li>Initial value: Large</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Environment</b>: Environment Scenario
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Urban|SubUrban|OpenAreas</li>
    <li>Initial value: Urban</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The propagation frequency in Hz
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.16e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::olsr::MessageHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::olsr::PacketHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::olsr::RoutingProtocol

<h3>Config Paths</h3>

ns3::olsr::RoutingProtocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::olsr::RoutingProtocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>HelloInterval</b>: HELLO messages emission interval.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HnaInterval</b>: HNA messages emission interval.  Normally it is equal to TcInterval.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MidInterval</b>: MID messages emission interval.  Normally it is equal to TcInterval.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TcInterval</b>: TC messages emission interval.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Willingness</b>: Willingness of a node to carry and forward traffic for other nodes.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p never|low|default|high|always</li>
    <li>Initial value: default</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RoutingTableChanged</b>: The OLSR routing table has changed.<br>%Callback signature: ns3::olsr::RoutingProtocol::TableChangeTracedCallback
</li>
<li><b>Rx</b>: Receive OLSR packet.<br>%Callback signature: ns3::olsr::RoutingProtocol::PacketTxRxTracedCallback
</li>
<li><b>Tx</b>: Send OLSR packet.<br>%Callback signature: ns3::olsr::RoutingProtocol::PacketTxRxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 992 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OnoeWifiManager

<h3>Config Paths</h3>

ns3::OnoeWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::OnoeWifiManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManagers/[i]/$ns3::OnoeWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AddCreditThreshold</b>: Add credit threshold
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RaiseThreshold</b>: Attempt to raise the rate if we hit that threshold
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: The interval between decisions about rate control changes
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 432 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OnOffApplication

<h3>Config Paths</h3>

ns3::OnOffApplication is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DataRate</b>: The data rate in on state.
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 500000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableSeqTsSizeHeader</b>: Enable use of SeqTsSizeHeader for sequence number and timestamp
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Local</b>: The Address on which to bind the socket. If not set, it is generated automatically.
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxBytes</b>: The total number of bytes to send. Once these bytes are sent, no packet is sent again, even in on state. The value zero means that there is no limit.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint64_t 0:18446744073709551615</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>OffTime</b>: A RandomVariableStream used to pick the duration of the 'Off' state.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>OnTime</b>: A RandomVariableStream used to pick the duration of the 'On' state.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketSize</b>: The size of packets sent in on state
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 512</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Protocol</b>: The type of protocol to use. This should be a subclass of ns3::SocketFactory
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::UdpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxWithAddresses</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
<li><b>TxWithSeqTsSize</b>: A new packet is created with SeqTsSizeHeader<br>%Callback signature: ns3::PacketSink::SeqTsSizeCallback
</li>
</ul>
<b>Size</b> of this type is 368 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OptimalCovMatrixBeamforming

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OrbisTopologyReader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OsmpClient

<h3>Config Paths</h3>

ns3::OsmpClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DashClient/$ns3::OsmpClient"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OsmpClient"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::DashClient</h3>
<ul>
<li><b>Protocol</b>: The type of TCP protocol to use.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TargetDt</b>: The target buffering time
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3.5e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VideoId</b>: The Id of the video that is played.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>bufferSpace</b>: The buffer space in bytes
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 30000000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>window</b>: The window for measuring the average throughput (Time)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::DashClient</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 648 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OutdoorPositionAllocator

<h3>Config Paths</h3>

ns3::OutdoorPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxAttempts</b>: Maximum number of attempts for the rejection sampling before giving up.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Z</b>: A random variable which represents the z coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketBurst

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketFilter

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The packet that serve as the output for this probe<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>OutputBytes</b>: The number of bytes in the packet<br>%Callback signature: ns3::Packet::SizeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSink

<h3>Config Paths</h3>

ns3::PacketSink is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::PacketSink"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>EnableSeqTsSizeHeader</b>: Enable optional header tracing of SeqTsSizeHeader
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Local</b>: The Address on which to Bind the rx socket.
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Protocol</b>: The type id of the protocol to use for the rx socket.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::UdpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::AddressTracedCallback
</li>
<li><b>RxWithAddresses</b>: A packet has been received<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
<li><b>RxWithSeqTsSize</b>: A packet with SeqTsSize header has been received<br>%Callback signature: ns3::PacketSink::SeqTsSizeCallback
</li>
</ul>
<b>Size</b> of this type is 304 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSocket

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RcvBufSize</b>: PacketSocket maximum receive buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Drop packet due to receive buffer overflow<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 328 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSocketClient

<h3>Config Paths</h3>

ns3::PacketSocketClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::PacketSocketClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Interval</b>: The time to wait between packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send (zero means infinite)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketSize</b>: Size of packets generated (bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Priority</b>: Priority assigned to the packets generated.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A packet has been sent<br>%Callback signature: ns3::Packet::AddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 232 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSocketFactory

<h3>Config Paths</h3>

ns3::PacketSocketFactory is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::PacketSocketFactory"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSocketServer

<h3>Config Paths</h3>

ns3::PacketSocketServer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::PacketSocketServer"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::AddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSocketTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ParabolicAntennaModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Beamwidth</b>: The 3dB beamwidth (degrees)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:180</li>
    <li>Initial value: 60</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxAttenuation</b>: The maximum attenuation (dB) of the antenna radiation pattern.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Orientation</b>: The angle (degrees) that expresses the orientation of the antenna on the x-y plane relative to the x axis
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -360:360</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ParetoRandomVariable

<h3>Config Paths</h3>

ns3::ParetoRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac/ProbeDelay/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/ForwardingDelay/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice/MeshUnderJitter/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::ParetoRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ParetoRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream (if non-zero).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Scale</b>: The scale parameter for the Pareto distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Shape</b>: The shape parameter for the Pareto distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ParfWifiManager

<h3>Config Paths</h3>

ns3::ParfWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::ParfWifiManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManagers/[i]/$ns3::ParfWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AttemptThreshold</b>: The minimum number of transmission attempts to try a new power or rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SuccessThreshold</b>: The minimum number of successful transmissions to try a new power or rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>PowerChange</b>: The transmission power has change<br>%Callback signature: ns3::WifiRemoteStationManager::PowerChangeTracedCallback
</li>
<li><b>RateChange</b>: The transmission rate has change<br>%Callback signature: ns3::WifiRemoteStationManager::RateChangeTracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 448 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PbbPacket

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PcapFileWrapper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>CaptureSize</b>: Maximum length of captured packets (cf. pcap snaplen)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NanosecMode</b>: Whether packet timestamps in the PCAP file are nanoseconds or microseconds(default).
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 632 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PdcpTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PfFfMacScheduler

<h3>Config Paths</h3>

ns3::PfFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::PfFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::PfFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::PfFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::PfFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p SRS_UL_CQI|PUSCH_UL_CQI</li>
    <li>Initial value: SRS_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1352 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PfifoFastQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc.
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 1000p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1096 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PhasedArrayModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>AntennaElement</b>: A pointer to the antenna element used by the phased array
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::AntennaModel></li>
    <li>Initial value: 0x60a9e4d197c0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PhasedArraySpectrumPropagationLossModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PhyRxStatsCalculator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DlRxOutputFilename</b>: Name of the file where the downlink results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: DlRxPhyStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>UlRxOutputFilename</b>: Name of the file where the uplink results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: UlRxPhyStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1224 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PhyStatsCalculator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DlRsrpSinrFilename</b>: Name of the file where the RSRP/SINR statistics will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: DlRsrpSinrStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>UlInterferenceFilename</b>: Name of the file where the interference statistics will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: UlInterferenceStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>UlSinrFilename</b>: Name of the file where the UE SINR statistics will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: UlSinrStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1832 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PhyTxStatsCalculator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DlTxOutputFilename</b>: Name of the file where the downlink results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: DlTxPhyStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>UlTxOutputFilename</b>: Name of the file where the uplink results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: UlTxPhyStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1224 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PieQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>A</b>: Value of alpha
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.125</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ActiveThreshold</b>: Threshold for activating PIE (disabled by default)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +9.22337e+18ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>B</b>: Value of beta
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CeThreshold</b>: The FqPie CE threshold for marking packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +9.22337e+18ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DequeueThreshold</b>: Minimum queue size in bytes before dequeue rate is measured
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 16384</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MarkEcnThreshold</b>: ECN marking threshold (RFC 8033 suggests 0.1 (i.e., 10%) default)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxBurstAllowance</b>: Current max burst allowance before random drop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 25p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MeanPktSize</b>: Average of packet size
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDelayReference</b>: Desired queue delay
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.5e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Supdate</b>: Start time of the update timer
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Tupdate</b>: Time period to calculate drop probability
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.5e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseCapDropAdjustment</b>: Enable/Disable Cap Drop Adjustment feature mentioned in RFC 8033
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseDequeueRateEstimator</b>: Enable/Disable usage of Dequeue Rate Estimator
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseDerandomization</b>: Enable/Disable Derandomization feature mentioned in RFC 8033
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1312 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ping

<h3>Config Paths</h3>

ns3::Ping is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::Ping"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Count</b>: The maximum number of packets the application will send (zero means no limits)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Destination</b>: The unicast IPv4 or IPv6 address of the machine we want to ping
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InterfaceAddress</b>: Local address of the sender
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Interval</b>: Time interval between sending each packet
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Size</b>: The number of data bytes to be sent, before ICMP and IP headers are added
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 16:4294967295</li>
    <li>Initial value: 56</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Timeout</b>: Time to wait for a response if no RTT samples are available
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VerboseMode</b>: Configure verbose, quiet, or silent output
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Verbose|Quiet|Silent</li>
    <li>Initial value: Verbose</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Drop events due to destination unreachable or other errors.<br>%Callback signature: ns3::Ping::DropTrace
</li>
<li><b>Report</b>: Summary report at close of application.<br>%Callback signature: ns3::Ping::ReportTrace
</li>
<li><b>Rtt</b>: The sequence number and RTT sample.<br>%Callback signature: ns3::Ping::RttTrace
</li>
<li><b>Tx</b>: The sequence number and ICMP echo response packet.<br>%Callback signature: ns3::Ping::TxTrace
</li>
</ul>
<b>Size</b> of this type is 664 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ping6

<h3>Config Paths</h3>

ns3::Ping6 is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::Ping6"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Interval</b>: The time to wait between packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LocalIpv6</b>: Local Ipv6Address of the sender
  <ul>
    <li>Set with class:  \ref ns3::Ipv6AddressValue</li>
    <li>Underlying type: \p Ipv6Address</li>
    <li>Initial value: ::</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send (zero means infinite)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketSize</b>: Size of packets generated
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RemoteIpv6</b>: The Ipv6Address of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::Ipv6AddressValue</li>
    <li>Underlying type: \p Ipv6Address</li>
    <li>Initial value: ::</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 272 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PointToPointChannel

<h3>Config Paths</h3>

ns3::PointToPointChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::PointToPointChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::PointToPointChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::PointToPointChannel"</li>
<li>"/ChannelList/[i]/$ns3::PointToPointChannel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Delay</b>: Propagation delay through the channel
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TxRxPointToPoint</b>: Trace source indicating transmission of packet from the PointToPointChannel, used by the Animation interface.<br>%Callback signature: ns3::PointToPointChannel::TxRxAnimationCallback
</li>
</ul>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PointToPointEpcHelper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>S1uLinkDataRate</b>: The data rate to be used for the next S1-U link to be created
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 10000000000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S1uLinkDelay</b>: The delay to be used for the next S1-U link to be created
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S1uLinkEnablePcap</b>: Enable Pcap for X2 link
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S1uLinkMtu</b>: The MTU of the next S1-U link to be created. Note that, because of the additional GTP/UDP/IP tunneling overhead, you need a MTU larger than the end-to-end MTU that you want to support.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 2000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S1uLinkPcapPrefix</b>: Prefix for Pcap generated by S1-U link
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: s1u</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::NoBackhaulEpcHelper</h3>
<ul>
<li><b>S11LinkDataRate</b>: The data rate to be used for the next S11 link to be created
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 10000000000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S11LinkDelay</b>: The delay to be used for the next S11 link to be created
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S11LinkMtu</b>: The MTU of the next S11 link to be created.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 2000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S5LinkDataRate</b>: The data rate to be used for the next S5 link to be created
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 100000000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S5LinkDelay</b>: The delay to be used for the next S5 link to be created
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>S5LinkMtu</b>: The MTU of the next S5 link to be created
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 2000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X2LinkDataRate</b>: The data rate to be used for the next X2 link to be created
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 10000000000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X2LinkDelay</b>: The delay to be used for the next X2 link to be created
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X2LinkEnablePcap</b>: Enable Pcap for X2 link
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X2LinkMtu</b>: The MTU of the next X2 link to be created. Note that, because of some big X2 messages, you need a big MTU.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 3000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X2LinkPcapPrefix</b>: Prefix for Pcap generated by X2 link
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: x2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 512 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PointToPointNetDevice

<h3>Config Paths</h3>

ns3::PointToPointNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Address</b>: The MAC address of this device.
  <ul>
    <li>Set with class:  \ref ns3::Mac48AddressValue</li>
    <li>Underlying type: \p Mac48Address</li>
    <li>Initial value: ff:ff:ff:ff:ff:ff</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DataRate</b>: The default data rate for point to point links
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 32768bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InterframeGap</b>: The time to wait between packet (frame) transmissions
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1500</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReceiveErrorModel</b>: The receiver error model used to simulate packet loss
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ErrorModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxQueue</b>: A queue to use as the transmit queue in the device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<Packet>></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 464 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PositionAllocator

<h3>Config Paths</h3>

ns3::PositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PppHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PreambleDetectionModel

<h3>Config Paths</h3>

ns3::PreambleDetectionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PreambleDetectionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PreambleDetectionModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PrioQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Priomap</b>: The priority to band mapping.
  <ul>
    <li>Set with class:  \ref ns3::PriomapValue</li>
    <li>Underlying type: \p Priomap</li>
    <li>Initial value: 1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PriorityQueueScheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ProbabilisticV2vHighwayChannelConditionModel

<h3>Config Paths</h3>

ns3::ProbabilisticV2vHighwayChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vHighwayChannelConditionModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Density</b>: Specifies the density of the vehicles in the scenario.It can be set to Low, Medium or High.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Low|Medium|High</li>
    <li>Initial value: Low</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ProbabilisticV2vUrbanChannelConditionModel

<h3>Config Paths</h3>

ns3::ProbabilisticV2vUrbanChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ProbabilisticV2vUrbanChannelConditionModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Density</b>: Specifies the density of the vehicles in the scenario.It can be set to Low, Medium or High.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Low|Medium|High</li>
    <li>Initial value: Low</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Probe

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PropagationDelayModel

<h3>Config Paths</h3>

ns3::PropagationDelayModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PropagationLossModel

<h3>Config Paths</h3>

ns3::PropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PssFfMacScheduler

<h3>Config Paths</h3>

ns3::PssFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::PssFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::PssFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::PssFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::PssFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PssFdSchedulerType</b>: FD scheduler in PSS (default value is PFsch)
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: PFsch</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>nMux</b>: The number of UE selected by TD scheduler (default value is 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p SRS_UL_CQI|PUSCH_UL_CQI</li>
    <li>Initial value: SRS_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1384 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::QosFrameExchangeManager

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>PifsRecovery</b>: Perform a PIFS recovery as a response to transmission failure within a TXOP
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SetQueueSize</b>: Whether to set the Queue Size subfield of the QoS Control field of QoS data frames sent by non-AP stations
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 704 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::QosTxop

<h3>Config Paths</h3>

ns3::QosTxop is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/Txop/$ns3::QosTxop"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/VO_Txop"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/VI_Txop"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/BE_Txop"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/BK_Txop"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AddBaResponseTimeout</b>: The timeout to wait for ADDBA response after the Ack to ADDBA request is received.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+06ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BlockAckManager</b>: The BlockAckManager object.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BlockAckManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FailedAddBaTimeout</b>: The timeout after a failed BA agreement. During this timeout, the originator resumes sending packets using normal MPDU. After that, BA agreement is reset and the originator will retry BA negotiation.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NMaxInflights</b>: The maximum number of links (in the range 1-15) on which an MPDU can be simultaneously in-flight.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:15</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseExplicitBarAfterMissedBlockAck</b>: Specify whether explicit BlockAckRequest should be sent upon missed BlockAck Response.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Txop</h3>
<ul>
<li><b>Aifsn</b>: The AIFSN: the default value conforms to non-QOS (just for the first link, in case of 11be multi-link devices).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Aifsns</b>: The values of AIFSN for all the links
  <ul>
    <li>Set with class:  \ref ns3::AttributeContainerValue<N3ns313UintegerValueE, NSt7__cxx114listIN3ns33PtrINS1_13UintegerValueEEESaIS4_EEE></li>
    <li>Underlying type: \p ns3::Ptr<N3ns313UintegerValueE></li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxCw</b>: The maximum value of the contention window (just for the first link, in case of 11be multi-link devices).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxCws</b>: The maximum values of the contention window for all the links
  <ul>
    <li>Set with class:  \ref ns3::AttributeContainerValue<N3ns313UintegerValueE, NSt7__cxx114listIN3ns33PtrINS1_13UintegerValueEEESaIS4_EEE></li>
    <li>Underlying type: \p ns3::Ptr<N3ns313UintegerValueE></li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinCw</b>: The minimum value of the contention window (just for the first link, in case of 11be multi-link devices).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinCws</b>: The minimum values of the contention window for all the links
  <ul>
    <li>Set with class:  \ref ns3::AttributeContainerValue<N3ns313UintegerValueE, NSt7__cxx114listIN3ns33PtrINS1_13UintegerValueEEESaIS4_EEE></li>
    <li>Underlying type: \p ns3::Ptr<N3ns313UintegerValueE></li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Queue</b>: The WifiMacQueue object
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiMacQueue></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>TxopLimit</b>: The TXOP limit: the default value conforms to non-QoS (just for the first link, in case of 11be multi-link devices).
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxopLimits</b>: The values of TXOP limit for all the links
  <ul>
    <li>Set with class:  \ref ns3::AttributeContainerValue<N3ns39TimeValueE, NSt7__cxx114listIN3ns33PtrINS1_9TimeValueEEESaIS4_EEE></li>
    <li>Underlying type: \p ns3::Ptr<N3ns39TimeValueE></li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TxopTrace</b>: Trace source for TXOP start and duration times<br>%Callback signature: ns3::QosTxop::TxopTracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::Txop</h3>
<ul>
<li><b>BackoffTrace</b>: Trace source for backoff values<br>%Callback signature: ns3::Txop::BackoffValueTracedCallback
</li>
<li><b>CwTrace</b>: Trace source for contention window values<br>%Callback signature: ns3::Txop::CwValueTracedCallback
</li>
</ul>
<b>Size</b> of this type is 240 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::QuasiOmniDirectPathBeamforming

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Queue<Packet>

<h3>Config Paths</h3>

ns3::Queue<Packet> is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/TxQueue"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/TxQueue"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/TxQueue"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::AlohaNoackNetDevice/Queue"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>Dequeue</b>: Dequeue a packet from the queue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 296 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Queue<QueueDiscItem>

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>Dequeue</b>: Dequeue a packet from the queue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 296 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Queue<WifiMpdu,WifiMacQueueContainer>

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>Dequeue</b>: Dequeue a packet from the queue.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 408 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::QueueBase

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::QueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1096 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::QueueDiscClass

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>QueueDisc</b>: The queue disc attached to the class
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDisc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::QueueLimits

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RaahsClient

<h3>Config Paths</h3>

ns3::RaahsClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DashClient/$ns3::RaahsClient"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::RaahsClient"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::DashClient</h3>
<ul>
<li><b>Protocol</b>: The type of TCP protocol to use.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TargetDt</b>: The target buffering time
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3.5e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VideoId</b>: The Id of the video that is played.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>bufferSpace</b>: The buffer space in bytes
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 30000000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>window</b>: The window for measuring the average throughput (Time)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::DashClient</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 648 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RadioBearerStatsCalculator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DlPdcpOutputFilename</b>: Name of the file where the downlink results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: DlPdcpStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>DlRlcOutputFilename</b>: Name of the file where the downlink results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: DlRlcStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>EpochDuration</b>: Epoch duration.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2.5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartTime</b>: Start time of the on going epoch.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlPdcpOutputFilename</b>: Name of the file where the uplink results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: UlPdcpStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>UlRlcOutputFilename</b>: Name of the file where the uplink results will be saved.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: UlRlcStats.txt</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1056 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RadioEnvironmentMapHelper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Bandwidth</b>: Transmission Bandwidth Configuration (in number of RBs) over which the SINR will be calculated
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Channel</b>: The DL spectrum channel for which the RadioEnvironment Map is to be generated. Alternatively ChannelPath attribute can be used.Only one of the two (Channel or ChannelPath) should be set.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::SpectrumChannel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelPath</b>: The path to the channel for which the Radio Environment Map is to be generated.This attribute is an alternative to Channel attribute and is only used if Channel is not set (equal to nullptr). Only one of the two (Channel or ChannelPath) should be set.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: /ChannelList/0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Earfcn</b>: E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxPointsPerIteration</b>: Maximum number of REM points to be calculated per iteration. Every point consumes approximately 5KB of memory.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 20000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NoisePower</b>: the power of the measuring instrument noise, in Watts. Default to a kT of -174 dBm with a noise figure of 9 dB and a bandwidth of 25 LTE Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.423e-13</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>OutputFile</b>: the filename to which the Radio Environment Map is saved
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: rem.out</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RbId</b>: Resource block Id, for which REM will be generated, default value is -1, what means REM will be averaged from all RBs
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t -2147483648:2147483647</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopWhenDone</b>: If true, Simulator::Stop () will be called as soon as the REM has been generated
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseDataChannel</b>: If true, REM will be generated for PDSCH and for PDCCH otherwise
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>XMax</b>: The max x coordinate of the map.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>XMin</b>: The min x coordinate of the map.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>XRes</b>: The resolution (number of points) of the map along the x axis.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 2:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>YMax</b>: The max y coordinate of the map.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>YMin</b>: The min y coordinate of the map.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>YRes</b>: The resolution (number of points) of the map along the y axis.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 2:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Z</b>: The value of the z coordinate for which the map is to be generated
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 744 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RadiotapHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Radvd

<h3>Config Paths</h3>

ns3::Radvd is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::Radvd"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AdvertisementJitter</b>: Uniform variable to provide jitter between min and max values of AdvInterval
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UniformRandomVariable></li>
    <li>Initial value: ns3::UniformRandomVariable</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 288 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomBoxPositionAllocator

<h3>Config Paths</h3>

ns3::RandomBoxPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Z</b>: A random variable which represents the z coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomBuildingPositionAllocator

<h3>Config Paths</h3>

ns3::RandomBuildingPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBuildingPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>WithReplacement</b>: If true, the building will be randomly selected with replacement. If false, no replacement will occur, until the list of buildings to select becomes empty, at which point it will be filled again with the list of all buildings.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomDirection2dMobilityModel

<h3>Config Paths</h3>

ns3::RandomDirection2dMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bounds</b>: The 2d bounding area
  <ul>
    <li>Set with class:  \ref ns3::RectangleValue</li>
    <li>Underlying type: \p Rectangle</li>
    <li>Initial value: -100|100|-100|100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Pause</b>: A random variable to control the pause (s).
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=2.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Speed</b>: A random variable to control the speed (m/s).
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=1.0|Max=2.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomDiscPositionAllocator

<h3>Config Paths</h3>

ns3::RandomDiscPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Rho</b>: A random variable which represents the radius of a position in a random disc.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=200.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Theta</b>: A random variable which represents the angle (gradients) of a position in a random disc.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=6.2830]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>X</b>: The x coordinate of the center of the random position disc.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Y</b>: The y coordinate of the center of the random position disc.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Z</b>: The z coordinate of all the positions in the disc.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomPropagationDelayModel

<h3>Config Paths</h3>

ns3::RandomPropagationDelayModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Variable</b>: The random variable which generates random delays (s).
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomPropagationLossModel

<h3>Config Paths</h3>

ns3::RandomPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Variable</b>: The random variable used to pick a loss every time CalcRxPower is invoked.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomRectanglePositionAllocator

<h3>Config Paths</h3>

ns3::RandomRectanglePositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random rectangle.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random rectangle.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Z</b>: The z coordinate of all the positions allocated.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomRoomPositionAllocator

<h3>Config Paths</h3>

ns3::RandomRoomPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRoomPositionAllocator"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomVariableStream

<h3>Config Paths</h3>

ns3::RandomVariableStream is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac/ProbeDelay"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/ForwardingDelay"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice/MeshUnderJitter"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomWalk2dMobilityModel

<h3>Config Paths</h3>

ns3::RandomWalk2dMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bounds</b>: Bounds of the area to cruise.
  <ul>
    <li>Set with class:  \ref ns3::RectangleValue</li>
    <li>Underlying type: \p Rectangle</li>
    <li>Initial value: 0|100|0|100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Direction</b>: A random variable used to pick the direction (radians).
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=6.283184]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Distance</b>: Change current direction and speed after moving for this distance.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mode</b>: The mode indicates the condition used to change the current speed and direction
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Distance|Time</li>
    <li>Initial value: Distance</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Speed</b>: A random variable used to pick the speed (m/s).
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=2.0|Max=4.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Time</b>: Change current direction and speed after moving for this delay.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 216 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomWalk2dOutdoorMobilityModel

<h3>Config Paths</h3>

ns3::RandomWalk2dOutdoorMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bounds</b>: Bounds of the area to cruise.
  <ul>
    <li>Set with class:  \ref ns3::RectangleValue</li>
    <li>Underlying type: \p Rectangle</li>
    <li>Initial value: 0|100|0|100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Direction</b>: A random variable used to pick the direction (radians).
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=6.283184]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Distance</b>: Change current direction and speed after moving for this distance.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 30</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxIterations</b>: Maximum number of attempts to find an alternative next positionif the original one is inside a building.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mode</b>: The mode indicates the condition used to change the current speed and direction
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Distance|Time</li>
    <li>Initial value: Distance</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Speed</b>: A random variable used to pick the speed (m/s).The default value is taken from Figure 1 of the paperHenderson, L.F., 1971. The statistics of crowd fluids. nature, 229(5284), p.381.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::NormalRandomVariable[Mean=1.53|Variance=0.040401]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Time</b>: Change current direction and speed after moving for this delay.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Tolerance</b>: Tolerance for the intersection point with buildings (m).It represents a small distance from where the building limitis actually placed, for example to represent a sidewalk.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1e-06</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 256 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomWaypointMobilityModel

<h3>Config Paths</h3>

ns3::RandomWaypointMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Pause</b>: A random variable used to pick the pause of a random waypoint model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=2.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PositionAllocator</b>: The position model used to pick a destination point.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PositionAllocator></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Speed</b>: A random variable used to pick the speed of a random waypoint model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.3|Max=0.7]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RangePropagationLossModel

<h3>Config Paths</h3>

ns3::RangePropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxRange</b>: Maximum Transmission Range (meters)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 250</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RateErrorModel

<h3>Config Paths</h3>

ns3::RateErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::RateErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ErrorRate</b>: The error rate.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErrorUnit</b>: The error unit
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p ERROR_UNIT_BIT|ERROR_UNIT_BYTE|ERROR_UNIT_PACKET</li>
    <li>Initial value: ERROR_UNIT_BYTE</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RanVar</b>: The decision variable attached to this error model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ErrorModel</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RealisticBeamformingAlgorithm

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>BeamSearchAngleStep</b>: Angle step when searching for the best beam
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 30</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseSnrSrs</b>: Denotes whether the SRS measurement will be SNR or SINR. If FalseSINR is used, if True the SNR
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RealisticBeamformingHelper

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RealisticBfManager

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>TriggerEvent</b>: Defines a beamforming trigger event
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p SrsCount|DelayedUpdate</li>
    <li>Initial value: SrsCount</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdateDelay</b>: Delay between SRS SINR report and the beamforming vectors update. Should be lower then SRS periodicity in slots, otherwise the SRS SINR being used will be the latest received.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriodicity</b>: Interval between consecutive beamforming update method executions expressed in the number of SRS periodicities to wait before triggering the next beamforming update.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 256 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RealtimeSimulatorImpl

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>HardLimit</b>: Maximum acceptable real-time jitter (used in conjunction with SynchronizationMode=HardLimit)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SynchronizationMode</b>: What to do if the simulation cannot keep up with real time.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p BestEffort|HardLimit</li>
    <li>Initial value: BestEffort</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ReceiveListErrorModel

<h3>Config Paths</h3>

ns3::ReceiveListErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::ReceiveListErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::ReceiveListErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::ReceiveListErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::ReceiveListErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::ReceiveListErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::ReceiveListErrorModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ErrorModel</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RedQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ARED</b>: True to enable ARED
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>AdaptMaxP</b>: True to adapt m_curMaxP
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Alpha</b>: Increment parameter for m_curMaxP in ARED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.01</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Beta</b>: Decrement parameter for m_curMaxP in ARED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.9</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Bottom</b>: Lower bound for m_curMaxP in ARED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FengAdaptive</b>: True to enable Feng's Adaptive RED
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FengAlpha</b>: Decrement parameter for m_curMaxP in Feng's Adaptive RED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>FengBeta</b>: Increment parameter for m_curMaxP in Feng's Adaptive RED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Gentle</b>: True to increases dropping probability slowly when average queue exceeds maxthresh
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IdlePktSize</b>: Average packet size used during idle times. Used when m_cautions = 3
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Interval</b>: Time interval to update m_curMaxP
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LInterm</b>: The maximum probability of dropping a packet
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LastSet</b>: Store the last time m_curMaxP was updated
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LinkBandwidth</b>: The RED link bandwidth
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 1500000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LinkDelay</b>: The RED link delay
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 25p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxTh</b>: Maximum average length threshold in packets/bytes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MeanPktSize</b>: Average of packet size
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 500</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinTh</b>: Minimum average length threshold in packets/bytes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NLRED</b>: True to enable Nonlinear RED
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Ns1Compat</b>: NS-1 compatibility
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>QW</b>: Queue weight related to the exponential weighted moving average (EWMA)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.002</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Rtt</b>: Round Trip Time to be considered while automatically setting m_bottom
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TargetDelay</b>: Target average queuing delay in ARED
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+06ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Top</b>: Upper bound for m_curMaxP in ARED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseHardDrop</b>: True to always drop packets above max threshold
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Wait</b>: True for waiting between dropped packets
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1376 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RemSpectrumPhy

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Rip

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>GarbageCollectionDelay</b>: The delay to delete an expired route.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.2e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LinkDownValue</b>: Value for link down in count to infinity.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxTriggeredCooldown</b>: Max cooldown delay after a Triggered Update.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinTriggeredCooldown</b>: Min cooldown delay after a Triggered Update.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SplitHorizon</b>: Split Horizon strategy.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p NoSplitHorizon|SplitHorizon|PoisonReverse</li>
    <li>Initial value: PoisonReverse</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartupDelay</b>: Maximum random delay for protocol startup (send route requests).
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TimeoutDelay</b>: The delay to invalidate a route.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.8e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UnsolicitedRoutingUpdate</b>: The time between two Unsolicited Routing Updates.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 336 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RipHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RipNg

<h3>Config Paths</h3>

ns3::RipNg is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::RipNg"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>GarbageCollectionDelay</b>: The delay to delete an expired route.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.2e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LinkDownValue</b>: Value for link down in count to infinity.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxTriggeredCooldown</b>: Max cooldown delay after a Triggered Update.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinTriggeredCooldown</b>: Min cooldown delay after a Triggered Update.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SplitHorizon</b>: Split Horizon strategy.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p NoSplitHorizon|SplitHorizon|PoisonReverse</li>
    <li>Initial value: PoisonReverse</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartupDelay</b>: Maximum random delay for protocol startup (send route requests).
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TimeoutDelay</b>: The delay to invalidate a route.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.8e+11ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UnsolicitedRoutingUpdate</b>: The time between two Unsolicited Routing Updates.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 328 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RipNgHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RipNgRte

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RipRte

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RlcTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RngReq

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RngRsp

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RocketfuelTopologyReader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RraaWifiManager

<h3>Config Paths</h3>

ns3::RraaWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::RraaWifiManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManagers/[i]/$ns3::RraaWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AckFrameLength</b>: The Ack frame length (in bytes) used for calculating mode TxTime.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 14</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Alpha</b>: Constant for calculating the MTL threshold.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 1:1.79769e+308</li>
    <li>Initial value: 1.25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Basic</b>: If true the RRAA-BASIC algorithm will be used, otherwise the RRAA will be used
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Beta</b>: Constant for calculating the ORI threshold.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 1:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FrameLength</b>: The Data frame length (in bytes) used for calculating mode TxTime.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1420</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Tau</b>: Constant for calculating the EWND size.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 0.012</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Timeout</b>: Timeout for the RRAA BASIC loss estimation block
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 504 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RrComponentCarrierManager

<h3>Config Paths</h3>

ns3::RrComponentCarrierManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::RrComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::RrComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::RrComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::RrComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::RrComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::RrComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::RrComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbComponentCarrierManager/$ns3::RrComponentCarrierManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 280 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RrFfMacScheduler

<h3>Config Paths</h3>

ns3::RrFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::RrFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::RrFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::RrFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::RrFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p SRS_UL_CQI|PUSCH_UL_CQI</li>
    <li>Initial value: SRS_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RrMultiUserScheduler

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>EnableBsrp</b>: If enabled, send a BSRP Trigger Frame before an UL MU transmission.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableTxopSharing</b>: If enabled, allow A-MPDUs of different TIDs in a DL MU PPDU.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnableUlOfdma</b>: If enabled, return UL_MU_TX if DL_MU_TX was returned the previous time.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ForceDlOfdma</b>: If enabled, return DL_MU_TX even if no DL MU PPDU could be built.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxCredits</b>: Maximum amount of credits a station can have. When transmitting a DL MU PPDU, the amount of credits received by each station equals the TX duration (in microseconds) divided by the total number of stations. Stations that are the recipient of the DL MU PPDU have to pay a number of credits equal to the TX duration (in microseconds) times the allocated bandwidth share
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NStations</b>: The maximum number of stations that can be granted an RU in a DL MU OFDMA transmission
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:74</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlPsduSize</b>: The default size in bytes of the solicited PSDU (to be sent in a TB PPDU)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 500</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseCentral26TonesRus</b>: If enabled, central 26-tone RUs are allocated, too, when the selected RU type is at least 52 tones.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::MultiUserScheduler</h3>
<ul>
<li><b>AccessReqAc</b>: The Access Category for which the MultiUserScheduler makes requests for channel access.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p AC_BE|AC_VI|AC_VO|AC_BK</li>
    <li>Initial value: AC_BE</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>AccessReqInterval</b>: Duration of the interval between two consecutive requests for channel access made by the MultiUserScheduler. Such requests are made independently of the presence of frames in the queues of the AP and are intended to allow the AP to coordinate UL MU transmissions even without DL traffic. A null duration indicates that such requests shall not be made.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DelayAccessReqUponAccess</b>: If enabled, the access request interval is measured starting from the last time an EDCA function obtained channel access. Otherwise, the access request interval is measured starting from the last time the MultiUserScheduler made a request for channel access.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 608 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RrpaaWifiManager

<h3>Config Paths</h3>

ns3::RrpaaWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::RrpaaWifiManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManagers/[i]/$ns3::RrpaaWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AckFrameLength</b>: The Ack frame length (in bytes) used for calculating mode TxTime.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 14</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Alpha</b>: Constant for calculating the MTL threshold.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 1:1.79769e+308</li>
    <li>Initial value: 1.25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Basic</b>: If true the RRPAA-BASIC algorithm will be used, otherwise the RRPAA will be used.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Beta</b>: Constant for calculating the ORI threshold.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 1:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Delta</b>: Constant for Probabilistic Decision Table increments.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 1:1.79769e+308</li>
    <li>Initial value: 1.0905</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FrameLength</b>: The Data frame length (in bytes) used for calculating mode TxTime.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1420</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Gamma</b>: Constant for Probabilistic Decision Table decrements.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 1:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Tau</b>: Constant for calculating the EWND size.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 0.015</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Timeout</b>: Timeout for the RRPAA-BASIC loss estimation block.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>PowerChange</b>: The transmission power has change.<br>%Callback signature: ns3::WifiRemoteStationManager::PowerChangeTracedCallback
</li>
<li><b>RateChange</b>: The transmission rate has change.<br>%Callback signature: ns3::WifiRemoteStationManager::RateChangeTracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 552 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RttEstimator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>InitialEstimation</b>: Initial RTT estimate
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RttMeanDeviation

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: Gain used in estimating the RTT, must be 0 <= alpha <= 1
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.125</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Beta</b>: Gain used in estimating the RTT variation, must be 0 <= beta <= 1
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RttEstimator</h3>
<ul>
<li><b>InitialEstimation</b>: Initial RTT estimate
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RvBatteryModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RvBatteryModelAlphaValue</b>: RV battery model alpha value.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 35220</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RvBatteryModelBetaValue</b>: RV battery model beta value.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.637</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RvBatteryModelCutoffVoltage</b>: RV battery model cutoff voltage.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RvBatteryModelLowBatteryThreshold</b>: Low battery threshold.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RvBatteryModelNumOfTerms</b>: The number of terms of the infinite sum for estimating battery level.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t -2147483648:2147483647</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RvBatteryModelOpenCircuitVoltage</b>: RV battery model open circuit voltage.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 4.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RvBatteryModelPeriodicEnergyUpdateInterval</b>: RV battery model sampling interval.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RvBatteryModelBatteryLevel</b>: RV battery model battery level.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
<li><b>RvBatteryModelBatteryLifetime</b>: RV battery model battery lifetime.<br>%Callback signature: ns3::TracedValueCallback::Time
</li>
</ul>
<b>Size</b> of this type is 296 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SameRoomPositionAllocator

<h3>Config Paths</h3>

ns3::SameRoomPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::SameRoomPositionAllocator"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Scheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SeqTsEchoHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SeqTsHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SeqTsSizeHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SequentialRandomVariable

<h3>Config Paths</h3>

ns3::SequentialRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac/ProbeDelay/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/ForwardingDelay/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice/MeshUnderJitter/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::SequentialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::SequentialRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Consecutive</b>: The number of times each member of the sequence is repeated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Increment</b>: The sequence random variable increment.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=1]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Max</b>: One more than the last value of the sequence.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Min</b>: The first value of the sequence.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ServiceFlowManager

<h3>Config Paths</h3>

ns3::ServiceFlowManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/ServiceFlowManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/ServiceFlowManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SftmClient

<h3>Config Paths</h3>

ns3::SftmClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DashClient/$ns3::SftmClient"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::SftmClient"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::DashClient</h3>
<ul>
<li><b>Protocol</b>: The type of TCP protocol to use.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TargetDt</b>: The target buffering time
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3.5e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VideoId</b>: The Id of the video that is played.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>bufferSpace</b>: The buffer space in bytes
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 30000000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>window</b>: The window for measuring the average throughput (Time)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::DashClient</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 656 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ShannonSpectrumErrorModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleChannel

<h3>Config Paths</h3>

ns3::SimpleChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SimpleChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SimpleChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SimpleChannel"</li>
<li>"/ChannelList/[i]/$ns3::SimpleChannel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Delay</b>: Transmission delay through the channel
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleDeviceEnergyModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>TotalEnergyConsumption</b>: Total energy consumption of the radio device.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleFrameCaptureModel

<h3>Config Paths</h3>

ns3::SimpleFrameCaptureModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/FrameCaptureModel/$ns3::SimpleFrameCaptureModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/FrameCaptureModel/$ns3::SimpleFrameCaptureModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Margin</b>: Reception is switched if the newly arrived frame has a power higher than this value above the frame currently being received (expressed in dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::FrameCaptureModel</h3>
<ul>
<li><b>CaptureWindow</b>: The duration of the capture window.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +16000ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleNetDevice

<h3>Config Paths</h3>

ns3::SimpleNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DataRate</b>: The default data rate for point to point links. Zero means infinite
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 0bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PointToPointMode</b>: The device is configured in Point to Point mode
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReceiveErrorModel</b>: The receiver error model used to simulate packet loss
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ErrorModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxQueue</b>: A queue to use as the transmit queue in the device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<Packet>></li>
    <li>Initial value: ns3::DropTailQueue<Packet></li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleOfdmWimaxPhy

<h3>Config Paths</h3>

ns3::SimpleOfdmWimaxPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/Phy/$ns3::SimpleOfdmWimaxPhy"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>G</b>: This is the ratio of CP time to useful time.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.25</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Nfft</b>: FFT size
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 256:1024</li>
    <li>Initial value: 256</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RxGain</b>: Reception gain (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TraceFilePath</b>: Path to the directory containing SNR to block error rate files
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: ""</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxGain</b>: Transmission gain (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPower</b>: Transmission power (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 30</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WimaxPhy</h3>
<ul>
<li><b>Bandwidth</b>: The channel bandwidth in Hz.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 5000000:30000000</li>
    <li>Initial value: 10000000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Channel</b>: Wimax channel
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxChannel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FrameDuration</b>: The frame duration in seconds.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The central frequency in KHz.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1000000:11000000</li>
    <li>Initial value: 5000000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>Rx</b>: Receive trace<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>Tx</b>: Transmit trace<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 520 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleUeComponentCarrierManager

<h3>Config Paths</h3>

ns3::SimpleUeComponentCarrierManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 216 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimulatorImpl

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SingleModelSpectrumChannel

<h3>Config Paths</h3>

ns3::SingleModelSpectrumChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/$ns3::SingleModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SingleModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/$ns3::SingleModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SingleModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/$ns3::SingleModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SingleModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/$ns3::SingleModelSpectrumChannel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/$ns3::SingleModelSpectrumChannel"</li>
<li>"/ChannelList/[i]/$ns3::SingleModelSpectrumChannel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::SpectrumChannel</h3>
<ul>
<li><b>MaxLossDb</b>: If a single-frequency PropagationLossModel is used, this value represents the maximum loss in dB for which transmissions will be passed to the receiving PHY. Signals for which the PropagationLossModel returns a loss bigger than this value will not be propagated to the receiver. This parameter is to be used to reduce the computational load by not propagating signals that are far beyond the interference range. Note that the default value corresponds to considering all signals for reception. Tune this value with care.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PropagationLossModel</b>: A pointer to the propagation loss model attached to this channel.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PropagationLossModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::SpectrumChannel</h3>
<ul>
<li><b>Gain</b>: This trace is fired whenever a new path loss value is calculated. The parameters to this trace are : Pointer to the mobility model of the transmitter, Pointer to the mobility model of the receiver, Tx antenna gain, Rx antenna gain, Propagation gain, Pathloss<br>%Callback signature: ns3::SpectrumChannel::GainTracedCallback
</li>
<li><b>PathLoss</b>: This trace is fired whenever a new path loss value is calculated. The first and second parameters to the trace are pointers respectively to the TX and RX SpectrumPhy instances, whereas the third parameters is the loss value in dB. Note that the loss value reported by this trace is the single-frequency loss value obtained by evaluating only the TX and RX AntennaModels and the PropagationLossModel. In particular, note that SpectrumPropagationLossModel (even if present) is never used to evaluate the loss value reported in this trace.<br>%Callback signature: ns3::SpectrumChannel::LossTracedCallback
</li>
<li><b>TxSigParams</b>: This trace is fired whenever a signal is transmitted. The sole parameter is a pointer to a copy of the SpectrumSignalParameters provided by the transmitter.<br>%Callback signature: ns3::SpectrumChannel::SignalParametersTracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanBc0

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanFrag1

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanFragN

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanHc1

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanIphc

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanIpv6

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanMesh

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanNetDevice

<h3>Config Paths</h3>

ns3::SixLowPanNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CompressionThreshold</b>: The minimum MAC layer payload size.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EtherType</b>: The specific EtherType to be used in L2 frames.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ForceEtherType</b>: Force a specific EtherType in L2 frames.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentExpirationTimeout</b>: When this timeout expires, the fragments will be cleared from the buffer.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +6e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentReassemblyListSize</b>: The maximum size of the reassembly buffer (in packets). Zero meaning infinite.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MeshCacheLength</b>: Length of the cache for each source.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MeshUnderJitter</b>: The jitter in ms a node uses to forward mesh-under packets - used to prevent collisions
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=10.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MeshUnderRadius</b>: Hops Left to use in mesh-under.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>OmitUdpChecksum</b>: Omit the UDP checksum in IPHC compression.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Rfc6282</b>: Use RFC6282 (IPHC) if true, RFC4944 (HC1) otherwise.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseMeshUnder</b>: Use a mesh-under routing protocol.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Drop - DropReason, packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.<br>%Callback signature: ns3::SixLowPanNetDevice::DropTracedCallback
</li>
<li><b>Rx</b>: Receive - packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.<br>%Callback signature: ns3::SixLowPanNetDevice::RxTxTracedCallback
</li>
<li><b>Tx</b>: Send - packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.<br>%Callback signature: ns3::SixLowPanNetDevice::RxTxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 376 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanNhcExtension

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 272 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanUdpNhcExtension

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SllHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SnrTag

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Snr</b>: The SNR of the last packet received
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Socket

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SocketFactory

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SocketIpTtlTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SocketIpv6HopLimitTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SocketSetDontFragmentTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SpectrumAnalyzer

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>NoisePowerSpectralDensity</b>: The power spectral density of the measuring instrument noise, in Watt/Hz. Mostly useful to make spectrograms look more similar to those obtained by real devices. Defaults to the value for thermal noise at 300K.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 4.14e-21</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Resolution</b>: The length of the time interval over which the power spectral density of incoming signals is averaged
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+06ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>AveragePowerSpectralDensityReport</b>: Trace fired whenever a new value for the average Power Spectral Density is calculated<br>%Callback signature: ns3::SpectrumValue::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SpectrumChannel

<h3>Config Paths</h3>

ns3::SpectrumChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxLossDb</b>: If a single-frequency PropagationLossModel is used, this value represents the maximum loss in dB for which transmissions will be passed to the receiving PHY. Signals for which the PropagationLossModel returns a loss bigger than this value will not be propagated to the receiver. This parameter is to be used to reduce the computational load by not propagating signals that are far beyond the interference range. Note that the default value corresponds to considering all signals for reception. Tune this value with care.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PropagationLossModel</b>: A pointer to the propagation loss model attached to this channel.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PropagationLossModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Gain</b>: This trace is fired whenever a new path loss value is calculated. The parameters to this trace are : Pointer to the mobility model of the transmitter, Pointer to the mobility model of the receiver, Tx antenna gain, Rx antenna gain, Propagation gain, Pathloss<br>%Callback signature: ns3::SpectrumChannel::GainTracedCallback
</li>
<li><b>PathLoss</b>: This trace is fired whenever a new path loss value is calculated. The first and second parameters to the trace are pointers respectively to the TX and RX SpectrumPhy instances, whereas the third parameters is the loss value in dB. Note that the loss value reported by this trace is the single-frequency loss value obtained by evaluating only the TX and RX AntennaModels and the PropagationLossModel. In particular, note that SpectrumPropagationLossModel (even if present) is never used to evaluate the loss value reported in this trace.<br>%Callback signature: ns3::SpectrumChannel::LossTracedCallback
</li>
<li><b>TxSigParams</b>: This trace is fired whenever a signal is transmitted. The sole parameter is a pointer to a copy of the SpectrumSignalParameters provided by the transmitter.<br>%Callback signature: ns3::SpectrumChannel::SignalParametersTracedCallback
</li>
</ul>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SpectrumErrorModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SpectrumPhy

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SpectrumPropagationLossModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SpectrumTransmitFilter

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SpectrumWifiPhy

<h3>Config Paths</h3>

ns3::SpectrumWifiPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/$ns3::SpectrumWifiPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/$ns3::SpectrumWifiPhy"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DisableWifiReception</b>: Prevent Wi-Fi frame sync from ever happening
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TrackSignalsFromInactiveInterfaces</b>: Enable or disable tracking signals coming from inactive spectrum PHY interfaces
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxMaskInnerBandMinimumRejection</b>: Minimum rejection (dBr) for the inner band of the transmit spectrum mask
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxMaskOuterBandMaximumRejection</b>: Maximum rejection (dBr) for the outer band of the transmit spectrum mask
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -40</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxMaskOuterBandMinimumRejection</b>: Minimum rejection (dBr) for the outer band of the transmit spectrum mask
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -28</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiPhy</h3>
<ul>
<li><b>Antennas</b>: The number of antennas on the device.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CcaEdThreshold</b>: The energy of all received signals should be higher than this threshold (dBm) in the primary channel to allow the PHY layer to declare CCA BUSY state.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -62</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CcaSensitivity</b>: The energy of a received wifi signal should be higher than this threshold (dBm) in the primary channel to allow the PHY layer to declare CCA BUSY state.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -82</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Channel</b>: The channel attached to this PHY
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Channel></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelNumber</b>: The channel number of the current operating channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:233</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelSettings</b>: Tuple {channel number, channel width (MHz), PHY band, primary20 index} describing the settings of the operating channel. The primary20 index is the index of the primary 20 MHz channel within the operating channel (0 indicates the 20 MHz subchannel with the lowest center frequency) and is only valid if the width of the operating channel is a multiple of 20 MHz. If the standard for this object has not been set yet, the value of this attribute is saved and will be used to set the operating channel when the standard is configured. If the PHY band is left unspecified, the default band for the configured standard is used. If the channel width and the channel number are both 0, the default channel width for the configured standard and band are used. If the channel number is 0, the default channel number for the configured standard, band and channel width is used.Note that the channel width can be left unspecified (0) if the channel number uniquely identify a frequency channel for the given standard and band.
  <ul>
    <li>Set with class:  \ref ns3::TupleValue</li>
    <li>Initial value: {0, 0, BAND_UNSPECIFIED, 0}</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>ChannelSwitchDelay</b>: Delay between two short frames transmitted on different frequencies.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +0ns:+9.22337e+18ns</li>
    <li>Initial value: +250000ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelWidth</b>: The width in MHz of the current operating channel (5, 10, 20, 22, 40, 80 or 160).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 5:160</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>FixedPhyBand</b>: If set to true, changing PHY band is prohibited after initialization.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FrameCaptureModel</b>: Ptr to an object that implements the frame capture model
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::FrameCaptureModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The center frequency (MHz) of the current operating channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>InterferenceHelper</b>: Ptr to an object that implements the interference helper
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::InterferenceHelper></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSupportedRxSpatialStreams</b>: The maximum number of supported RX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSupportedTxSpatialStreams</b>: The maximum number of supported TX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Pifs</b>: The duration of the PCF Interframe Space. NOTE that the default value is overwritten by the value defined by the standard; if you want to set this attribute, you have to do it after that the PHY object is initialized.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PostReceptionErrorModel</b>: An optional packet error model can be added to the receive packet process after any propagation-based (SNR-based) error models have been applied. Typically this is used to force specific packet drops, for testing purposes.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ErrorModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PowerDensityLimit</b>: The mean equivalent isotropically radiated power densitylimit (in dBm/MHz) set by regulators.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PreambleDetectionModel</b>: Ptr to an object that implements the preamble detection model
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PreambleDetectionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Primary20MHzIndex</b>: The index of the primary 20 MHz channel within the current operating channel (0 indicates the 20 MHz subchannel with the lowest center frequency).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:7</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>RxGain</b>: Reception gain (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RxNoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0 (usually 290 K)".
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>RxSensitivity</b>: The energy of a received signal should be higher than this threshold (dBm) for the PHY to detect the signal. This threshold refers to a width of 20 MHz and will be scaled to match the width of the received signal.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -101</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShortPlcpPreambleSupported</b>: Whether or not short PHY preamble is supported.This parameter is only valuable for 802.11b STAs and APs.Note: 802.11g APs and STAs always support short PHY preamble.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Sifs</b>: The duration of the Short Interframe Space. NOTE that the default value is overwritten by the value defined by the standard; if you want to set this attribute, you have to do it after that the PHY object is initialized.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Slot</b>: The duration of a slot. NOTE that the default value is overwritten by the value defined by the standard; if you want to set this attribute, you have to do it after that the PHY object is initialized.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>State</b>: The state of the PHY layer.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiPhyStateHelper></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxGain</b>: Transmission gain (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPowerEnd</b>: Maximum available transmission level (dBm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 16.0206</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPowerLevels</b>: Number of transmission power levels available between TxPowerStart and TxPowerEnd included.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPowerStart</b>: Minimum available transmission level (dBm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 16.0206</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>SignalArrival</b>: Signal arrival<br>%Callback signature: ns3::SpectrumWifiPhy::SignalArrivalCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiPhy</h3>
<ul>
<li><b>MonitorSnifferRx</b>: Trace source simulating a wifi device in monitor mode sniffing all received frames<br>%Callback signature: ns3::WifiPhy::MonitorSnifferRxTracedCallback
</li>
<li><b>MonitorSnifferTx</b>: Trace source simulating the capability of a wifi device in monitor mode to sniff all frames being transmitted<br>%Callback signature: ns3::WifiPhy::MonitorSnifferTxTracedCallback
</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device<br>%Callback signature: ns3::WifiPhy::PhyRxBeginTracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxPayloadBegin</b>: Trace source indicating the reception of the payload of a PPDU has begun<br>%Callback signature: ns3::WifiPhy::PhyRxPayloadBeginTracedCallback
</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium<br>%Callback signature: ns3::WifiPhy::PhyTxBeginTracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxPsduBegin</b>: Trace source indicating a PSDU has begun transmitting over the channel medium<br>%Callback signature: ns3::WifiPhy::PsduTxBeginCallback
</li>
</ul>
<b>Size</b> of this type is 872 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SSLinkManager

<h3>Config Paths</h3>

ns3::SSLinkManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/LinkManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/LinkManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SSManager

<h3>Config Paths</h3>

ns3::SSManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/SSManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/SSManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SSScheduler

<h3>Config Paths</h3>

ns3::SSScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/SSScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/SSScheduler"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::StaWifiMac

<h3>Config Paths</h3>

ns3::StaWifiMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ActiveProbing</b>: If true, we send probe requests. If false, we don't.NOTE: if more than one STA in your simulation is using active probing, you should enable it at a different simulation time for each STA, otherwise all the STAs will start sending probes at the same time resulting in collisions. See bug 1060 for more info.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>AssocRequestTimeout</b>: The interval between two consecutive association request attempts.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxMissedBeacons</b>: Number of beacons which much be consecutively missed before we attempt to restart association.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PmModeSwitchTimeout</b>: If switching to a new Power Management mode is not completed within this amount of time, make another attempt at switching Power Management mode.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PowerSaveMode</b>: Enable/disable power save mode on the given link. The power management mode is actually changed when the AP acknowledges a frame sent with the Power Management field set to the value corresponding to the requested mode
  <ul>
    <li>Set with class:  \ref ns3::PairValue<N3ns33PtrINS_12BooleanValueEEE, N3ns33PtrINS_13UintegerValueEEE></li>
    <li>Underlying type: \p St4pairIN3ns33PtrINS0_12BooleanValueEEENS1_INS0_13UintegerValueEEEE</li>
    <li>Flags: <span class="mlabel">write</span></li>
  </ul>
<li><b>ProbeDelay</b>: Delay (in microseconds) to be used prior to transmitting a Probe frame during active scanning.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=50.0|Max=250.0]</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ProbeRequestTimeout</b>: The duration to actively probe the channel.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>WaitBeaconTimeout</b>: The duration to dwell on a channel while passively scanning for beacon
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.2e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>BE_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BE_BlockAckThreshold</b>: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BE_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BE access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BE_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BE access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BE_Txop</b>: Queue that manages packets belonging to AC_BE access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>BK_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BK_BlockAckThreshold</b>: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BK_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BK access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BK_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BK access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BK_Txop</b>: Queue that manages packets belonging to AC_BK access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>CtsToSelfSupported</b>: Use CTS to Self when using a rate that is not in the basic rate set.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>QosSupported</b>: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShortSlotTimeSupported</b>: Whether or not short slot time is supported (only used by ERP APs or STAs).
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Ssid</b>: The ssid we want to belong to.
  <ul>
    <li>Set with class:  \ref ns3::SsidValue</li>
    <li>Underlying type: \p Ssid</li>
    <li>Initial value: ssid=default</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Txop</b>: The Txop object.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Txop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>VI_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VI_BlockAckThreshold</b>: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VI_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VI access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VI_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VI access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VI_Txop</b>: Queue that manages packets belonging to AC_VI access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>VO_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VO_BlockAckThreshold</b>: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VO_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VO access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VO_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VO access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VO_Txop</b>: Queue that manages packets belonging to AC_VO access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Assoc</b>: Associated with an access point. If this is an MLD that associated with an AP MLD, the AP MLD address is provided.<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>BeaconArrival</b>: Time of beacons arrival from associated AP<br>%Callback signature: ns3::Time::TracedCallback
</li>
<li><b>DeAssoc</b>: Association with an access point lost. If this is an MLD that disassociated with an AP MLD, the AP MLD address is provided.<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>LinkSetupCanceled</b>: A link setup in the context of ML setup with an AP MLD was torn down. Provides ID of the setup link and AP MAC address<br>%Callback signature: ns3::StaWifiMac::LinkSetupCallback
</li>
<li><b>LinkSetupCompleted</b>: A link was setup in the context of ML setup with an AP MLD. Provides ID of the setup link and AP MAC address<br>%Callback signature: ns3::StaWifiMac::LinkSetupCallback
</li>
<li><b>ReceivedBeaconInfo</b>: Information about every received Beacon frame<br>%Callback signature: ns3::ApInfo::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>AckedMpdu</b>: An MPDU that was successfully acknowledged, via either a Normal Ack or a Block Ack.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>DroppedMpdu</b>: An MPDU that was dropped for the given reason (see WifiMacDropReason).<br>%Callback signature: ns3::WifiMac::DroppedMpduCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: A packet has been dropped in the MAC layer before being queued for transmission. This trace source is fired, e.g., when an AP's MAC receives from the upper layer a packet destined to a station that is not associated with the AP or a STA's MAC receives a packet from the upper layer while it is not associated with any AP.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MpduResponseTimeout</b>: An MPDU whose response was not received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason) and the TXVECTOR used to transmit the MPDU. This trace source is fired when a CTS is missing after an RTS, when all CTS frames are missing after an MU-RTS, or when a Normal Ack is missing after an MPDU or after a DL MU PPDU acknowledged in SU format.<br>%Callback signature: ns3::WifiMac::MpduResponseTimeoutCallback
</li>
<li><b>NAckedMpdu</b>: An MPDU that was negatively acknowledged via a Block Ack.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>PsduMapResponseTimeout</b>: A PSDU map for which not all the responses were received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason), the set of MAC addresses of the stations that did not respond and the total number of stations that had to respond. This trace source is fired when not all the addressed stations responded to an MU-BAR Trigger frame (either sent as a SU frame or aggregated to PSDUs in the DL MU PPDU), a Basic Trigger Frame or a BSRP Trigger Frame.<br>%Callback signature: ns3::WifiMac::PsduMapResponseTimeoutCallback
</li>
<li><b>PsduResponseTimeout</b>: A PSDU whose response was not received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason) and the TXVECTOR used to transmit the PSDU. This trace source is fired when a BlockAck is missing after an A-MPDU, a BlockAckReq (possibly in the context of the acknowledgment of a DL MU PPDU in SU format) or a TB PPDU (in the latter case the missing BlockAck is a Multi-STA BlockAck).<br>%Callback signature: ns3::WifiMac::PsduResponseTimeoutCallback
</li>
<li><b>TxErrHeader</b>: The header of unsuccessfuly transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
<li><b>TxOkHeader</b>: The header of successfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1088 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SteadyStateRandomWaypointMobilityModel

<h3>Config Paths</h3>

ns3::SteadyStateRandomWaypointMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::SteadyStateRandomWaypointMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxPause</b>: Maximum pause value, [s]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSpeed</b>: Maximum speed value, [m/s]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxX</b>: Maximum X value of traveling region, [m]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxY</b>: Maximum Y value of traveling region, [m]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinPause</b>: Minimum pause value, [s]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinSpeed</b>: Minimum speed value, [m/s]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinX</b>: Minimum X value of traveling region, [m]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinY</b>: Minimum Y value of traveling region, [m]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Z</b>: Z value of traveling region (fixed), [m]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 304 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SubscriberStationNetDevice

<h3>Config Paths</h3>

ns3::SubscriberStationNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BasicConnection</b>: Basic connection
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxConnection></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Classifier</b>: The ss classifier attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::IpcsClassifier></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IntervalT1</b>: Wait for DCD timeout. Maximum is 5*maxDcdInterval
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IntervalT12</b>: Wait for UCD descriptor.Maximum is 5*MaxUcdInterval
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IntervalT2</b>: Wait for broadcast ranging timeout, i.e., wait for initial ranging opportunity. Maximum is 5*Ranging interval
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IntervalT20</b>: Time the SS searches for preambles on a given channel. Minimum is 2 MAC frames
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IntervalT21</b>: time the SS searches for (decodable) DL-MAP on a given channel
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IntervalT3</b>: ranging Response reception timeout following the transmission of a ranging request. Maximum is 200ms
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IntervalT7</b>: wait for DSA/DSC/DSD Response timeout. Maximum is 1s
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LinkManager</b>: The ss link manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::SSLinkManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LostDlMapInterval</b>: Time since last received DL-MAP message before downlink synchronization is considered lost. Maximum is 600ms
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LostUlMapInterval</b>: Time since last received UL-MAP before uplink synchronization is considered lost, maximum is 600.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxContentionRangingRetries</b>: Number of retries on contention Ranging Requests
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:16</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxDcdInterval</b>: Maximum time between transmission of DCD messages. Maximum is 10s
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxUcdInterval</b>: Maximum time between transmission of UCD messages. Maximum is 10s
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PrimaryConnection</b>: Primary connection
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxConnection></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SSScheduler</b>: The ss scheduler attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::SSScheduler></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WimaxNetDevice</h3>
<ul>
<li><b>BandwidthManager</b>: The bandwidth manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BandwidthManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BroadcastConnection</b>: Broadcast connection
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxConnection></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BurstProfileManager</b>: The burst profile manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BurstProfileManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Channel</b>: The channel attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxChannel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ConnectionManager</b>: The connection manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ConnectionManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialRangingConnection</b>: Initial ranging connection
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxConnection></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:1500</li>
    <li>Initial value: 1400</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Phy</b>: The PHY layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxPhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RTG</b>: receive/transmit transition gap.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:120</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TTG</b>: transmit/receive transition gap.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:120</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>SSPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>SSRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>SSRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>SSTxDrop</b>: A packet has been dropped in the MAC layer before being queued for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WimaxNetDevice</h3>
<ul>
<li><b>Rx</b>: Receive trace<br>%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback
</li>
<li><b>Tx</b>: Transmit trace<br>%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 904 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SvaaClient

<h3>Config Paths</h3>

ns3::SvaaClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DashClient/$ns3::SvaaClient"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::SvaaClient"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::DashClient</h3>
<ul>
<li><b>Protocol</b>: The type of TCP protocol to use.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TargetDt</b>: The target buffering time
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3.5e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VideoId</b>: The Id of the video that is played.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>bufferSpace</b>: The buffer space in bytes
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 30000000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>window</b>: The window for measuring the average throughput (Time)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::DashClient</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 664 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Synchronizer

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TableBasedErrorRateModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>FallbackErrorRateModel</b>: Ptr to the fallback error rate model to be used when no matching value is found in a table
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ErrorRateModel></li>
    <li>Initial value: 0x60a9e4e356a0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SizeThreshold</b>: Threshold in bytes over which the table for large size frames is used
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint64_t 0:18446744073709551615</li>
    <li>Initial value: 400</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Tag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TapBridge

<h3>Config Paths</h3>

ns3::TapBridge is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::TapBridge"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DeviceName</b>: The name of the tap device to create.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: ""</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Gateway</b>: The IP address of the default gateway to assign to the host machine, when in ConfigureLocal mode.
  <ul>
    <li>Set with class:  \ref ns3::Ipv4AddressValue</li>
    <li>Underlying type: \p Ipv4Address</li>
    <li>Initial value: 255.255.255.255</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IpAddress</b>: The IP address to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered IP address of the simulated device.
  <ul>
    <li>Set with class:  \ref ns3::Ipv4AddressValue</li>
    <li>Underlying type: \p Ipv4Address</li>
    <li>Initial value: 255.255.255.255</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MacAddress</b>: The MAC address to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered MAC address of the simulated device.
  <ul>
    <li>Set with class:  \ref ns3::Mac48AddressValue</li>
    <li>Underlying type: \p Mac48Address</li>
    <li>Initial value: ff:ff:ff:ff:ff:ff</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mode</b>: The operating and configuration mode to use.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p ConfigureLocal|UseLocal|UseBridge</li>
    <li>Initial value: UseLocal</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Netmask</b>: The network mask to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered MAC address of the simulated device.
  <ul>
    <li>Set with class:  \ref ns3::Ipv4MaskValue</li>
    <li>Underlying type: \p Ipv4Mask</li>
    <li>Initial value: 255.255.255.255</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Start</b>: The simulation time at which to spin up the tap device read thread.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: The simulation time at which to tear down the tap device read thread.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Verbose</b>: Enable verbose output from tap-creator child process
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 280 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TbfQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Burst</b>: Size of the first bucket in bytes
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 125000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 1000p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mtu</b>: Size of the second bucket in bytes. If null, it is initialized to the MTU of the receiving NetDevice (if any)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>PeakRate</b>: Rate at which tokens enter the second bucket in bps or Bps.If null, there is no second bucket
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 0bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Rate</b>: Rate at which tokens enter the first bucket in bps or Bps.
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 1000000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TokensInFirstBucket</b>: Number of First Bucket Tokens in bytes<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>TokensInSecondBucket</b>: Number of Second Bucket Tokens in bytes<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1216 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpBbr

<h3>Config Paths</h3>

ns3::TcpBbr is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpBbr"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AckEpochAckedResetThresh</b>: Max allowed val for m_ackEpochAcked, after which sampling epoch is reset
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4096</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BwWindowLength</b>: Length of bandwidth windowed filter
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ExtraAckedRttWindowLength</b>: Window length of extra acked window
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HighGain</b>: Value of high gain
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.89</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ProbeRttDuration</b>: Time to be spent in PROBE_RTT phase
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RttWindowLength</b>: Length of RTT windowed filter
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: Random number stream (default is set to 4 to align with Linux results)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 336 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpBic

<h3>Config Paths</h3>

ns3::TcpBic is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpBic"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Beta</b>: Beta for multiplicative decrease
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 0.8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BinarySearchCoefficient</b>: Inverse of the coefficient for the binary search. Default 4, as in Linux
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 2:255</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FastConvergence</b>: Turn on/off fast convergence.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LowWnd</b>: Threshold window size (in segments) for engaging BIC response
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 14</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxIncr</b>: Limit on increment allowed during binary search
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SmoothPart</b>: Number of RTT needed to approach cWnd_max from cWnd_max-BinarySearchCoefficient. It can be viewed as the gradient of the slow start AIM phase: less this value is, more steep the increment will be.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpClassicRecovery

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpCongestionOps

<h3>Config Paths</h3>

ns3::TcpCongestionOps is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpCubic

<h3>Config Paths</h3>

ns3::TcpCubic is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/$ns3::TcpCubic"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Beta</b>: Beta for multiplicative decrease
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 0.7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>C</b>: Cubic Scaling factor
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 0.4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CntClamp</b>: Counter value when no losses are detected (counter is used when incrementing cWnd in congestion avoidance, to avoid floating point arithmetic). It is the modulo of the (avoided) division
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CubicDelta</b>: Delta Time to wait after fast recovery before adjusting param
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FastConvergence</b>: Enable (true) or disable (false) fast convergence
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HyStart</b>: Enable (true) or disable (false) hybrid slow start algorithm
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HyStartAckDelta</b>: Spacing between ack's indicating train
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+06ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HyStartDelayMax</b>: Maximum time for hystart algorithm
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HyStartDelayMin</b>: Minimum time for hystart algorithm
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +4e+06ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HyStartDetect</b>: Hybrid Slow Start detection mechanisms:packet train, delay, both
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p PACKET_TRAIN|DELAY|BOTH</li>
    <li>Initial value: BOTH</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HyStartLowWindow</b>: Lower bound cWnd for hybrid slow start (segments)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HyStartMinSamples</b>: Number of delay samples for detecting the increase of delay
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::TcpSocketBase</h3>
<ul>
<li><b>ClockGranularity</b>: Clock Granularity used in RTO calculations
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+06ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CongestionOps</b>: Pointer to TcpCongestionOps object
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::TcpCongestionOps></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IcmpCallback</b>: Callback invoked whenever an icmp error is received on this socket.
  <ul>
    <li>Set with class:  \ref ns3::CallbackValue</li>
    <li>Underlying type: \p Callback</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IcmpCallback6</b>: Callback invoked whenever an icmpv6 error is received on this socket.
  <ul>
    <li>Set with class:  \ref ns3::CallbackValue</li>
    <li>Underlying type: \p Callback</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LimitedTransmit</b>: Enable limited transmit
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSegLifetime</b>: Maximum segment lifetime in seconds, use for TIME_WAIT state transition to CLOSED state
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 120</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxWindowSize</b>: Max size of advertised window
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinRto</b>: Minimum retransmit timeout value
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReTxThreshold</b>: Threshold for fast retransmit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RxBuffer</b>: TCP Rx buffer
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::TcpRxBuffer></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Sack</b>: Enable or disable Sack option
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Timestamp</b>: Enable or disable Timestamp option
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxBuffer</b>: TCP Tx buffer
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::TcpTxBuffer></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: Parameter to set ECN functionality
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Off|On|AcceptOnly</li>
    <li>Initial value: Off</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>WindowScaling</b>: Enable or disable Window Scaling option
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::TcpSocket</h3>
<ul>
<li><b>ConnCount</b>: Number of connection attempts (SYN retransmissions) before returning failure
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ConnTimeout</b>: TCP retransmission timeout when opening connection (seconds)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DataRetries</b>: Number of data retransmission attempts
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DelAckCount</b>: Number of packets to wait before sending a TCP ack
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DelAckTimeout</b>: Timeout value for TCP delayed acks, in seconds
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialCwnd</b>: TCP initial congestion window size (segments)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialSlowStartThreshold</b>: TCP initial slow start threshold (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4294967295</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PersistTimeout</b>: Persist timeout to probe for rx window
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +6e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RcvBufSize</b>: TcpSocket maximum receive buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SegmentSize</b>: TCP maximum segment size in bytes (may be adjusted based on MTU discovery)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 536</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SndBufSize</b>: TcpSocket maximum transmit buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TcpNoDelay</b>: Set to true to disable Nagle's algorithm
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::TcpSocketBase</h3>
<ul>
<li><b>AdvWND</b>: Advertised Window Size<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInFlight</b>: Socket estimation of bytes in flight<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>CongState</b>: TCP Congestion machine state<br>%Callback signature: ns3::TcpSocketState::TcpCongStatesTracedValueCallback
</li>
<li><b>CongestionWindow</b>: The TCP connection's congestion window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>CongestionWindowInflated</b>: The TCP connection's congestion window inflates as in older RFC<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>EcnCeSeq</b>: Sequence of last received CE<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>EcnCwrSeq</b>: Sequence of last received CWR<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>EcnEchoSeq</b>: Sequence of last received ECN Echo<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>EcnState</b>: Trace ECN state change of socket<br>%Callback signature: ns3::TcpSocketState::EcnStatesTracedValueCallback
</li>
<li><b>HighestRxAck</b>: Highest ack received from peer<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>HighestRxSequence</b>: Highest sequence number received from peer<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>HighestSequence</b>: Highest sequence number ever sent in socket's life time<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>NextTxSequence</b>: Next sequence number to send (SND.NXT)<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>PacingRate</b>: The current TCP pacing rate<br>%Callback signature: ns3::TracedValueCallback::DataRate
</li>
<li><b>RTO</b>: Retransmission timeout<br>%Callback signature: ns3::TracedValueCallback::Time
</li>
<li><b>RTT</b>: Last RTT sample<br>%Callback signature: ns3::TracedValueCallback::Time
</li>
<li><b>RWND</b>: Remote side's flow control window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Rx</b>: Receive tcp packet from IP protocol<br>%Callback signature: ns3::TcpSocketBase::TcpTxRxTracedCallback
</li>
<li><b>SlowStartThreshold</b>: TCP slow start threshold (bytes)<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>State</b>: TCP state<br>%Callback signature: ns3::TcpStatesTracedValueCallback
</li>
<li><b>Tx</b>: Send tcp packet to IP protocol<br>%Callback signature: ns3::TcpSocketBase::TcpTxRxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpDctcp

<h3>Config Paths</h3>

ns3::TcpDctcp is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpDctcp"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpLinuxReno/$ns3::TcpDctcp"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DctcpAlphaOnInit</b>: Initial alpha value
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>DctcpShiftG</b>: Parameter G for updating dctcp_alpha
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.0625</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseEct0</b>: Use ECT(0) for ECN codepoint, if false use ECT(1)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>CongestionEstimate</b>: Update sender-side congestion estimate state<br>%Callback signature: ns3::TcpDctcp::CongestionEstimateTracedCallback
</li>
</ul>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpHighSpeed

<h3>Config Paths</h3>

ns3::TcpHighSpeed is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpHighSpeed"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpHighSpeed"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpHtcp

<h3>Config Paths</h3>

ns3::TcpHtcp is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpHtcp"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpHtcp"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DefaultBackoff</b>: The default AIMD backoff factor
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DeltaL</b>: Delta_L parameter in increase function
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ThroughputRatio</b>: Threshold value for updating beta
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpHybla

<h3>Config Paths</h3>

ns3::TcpHybla is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpHybla"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpHybla"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>RRTT</b>: Reference RTT
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rho</b>: Rho parameter of Hybla<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpIllinois

<h3>Config Paths</h3>

ns3::TcpIllinois is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpIllinois"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpIllinois"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AlphaBase</b>: Alpha base threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>AlphaMax</b>: Maximum alpha threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>AlphaMin</b>: Minimum alpha threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BetaBase</b>: Beta base threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BetaMax</b>: Maximum beta threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BetaMin</b>: Minimum beta threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.125</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Theta</b>: Theta threshold
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>WinThresh</b>: Window threshold
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpL4Protocol

<h3>Config Paths</h3>

ns3::TcpL4Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>RecoveryType</b>: Recovery type of TCP objects.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpPrrRecovery</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RttEstimatorType</b>: Type of RttEstimator objects.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::RttMeanDeviation</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SocketList</b>: A container of sockets associated to this protocol. The underlying type is an unordered map, the attribute name is kept for backward compatibility.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::TcpSocketBase></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>SocketType</b>: Socket type of TCP objects.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpCubic</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::IpL4Protocol</h3>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpLedbat

<h3>Config Paths</h3>

ns3::TcpLedbat is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpLedbat"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpLedbat"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BaseHistoryLen</b>: Number of Base delay samples
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Gain</b>: Offset Gain
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinCwnd</b>: Minimum cWnd for Ledbat
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NoiseFilterLen</b>: Number of Current delay samples
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SSParam</b>: Possibility of Slow Start
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p yes|no</li>
    <li>Initial value: yes</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>TargetDelay</b>: Targeted Queue Delay
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpLinuxReno

<h3>Config Paths</h3>

ns3::TcpLinuxReno is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpLinuxReno"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpLp

<h3>Config Paths</h3>

ns3::TcpLp is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpLp"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpLp"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpNewReno

<h3>Config Paths</h3>

ns3::TcpNewReno is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOption

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionEnd

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionMSS

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionNOP

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionSack

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionSackPermitted

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionTS

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionUnknown

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionWinScale

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpPrrRecovery

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ReductionBound</b>: Type of Reduction Bound
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p CRB|SSRB</li>
    <li>Initial value: SSRB</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpRateLinux

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>TcpRateSampleUpdated</b>: Tcp rate sample has been updated<br>%Callback signature: ns3::TcpRateLinux::TcpRateSampleUpdated
</li>
<li><b>TcpRateUpdated</b>: Tcp rate information has been updated<br>%Callback signature: ns3::TcpRateLinux::TcpRateUpdated
</li>
</ul>
<b>Size</b> of this type is 208 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpRateOps

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpRecoveryOps

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpRxBuffer

<h3>Config Paths</h3>

ns3::TcpRxBuffer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/RxBuffer"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>NextRxSequence</b>: Next sequence number expected (RCV.NXT)<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
</ul>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpScalable

<h3>Config Paths</h3>

ns3::TcpScalable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpScalable"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpScalable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AIFactor</b>: Additive Increase Factor
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MDFactor</b>: Multiplicative Decrease Factor
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.125</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpSocket

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ConnCount</b>: Number of connection attempts (SYN retransmissions) before returning failure
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ConnTimeout</b>: TCP retransmission timeout when opening connection (seconds)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DataRetries</b>: Number of data retransmission attempts
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DelAckCount</b>: Number of packets to wait before sending a TCP ack
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DelAckTimeout</b>: Timeout value for TCP delayed acks, in seconds
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialCwnd</b>: TCP initial congestion window size (segments)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialSlowStartThreshold</b>: TCP initial slow start threshold (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4294967295</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PersistTimeout</b>: Persist timeout to probe for rx window
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +6e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RcvBufSize</b>: TcpSocket maximum receive buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SegmentSize</b>: TCP maximum segment size in bytes (may be adjusted based on MTU discovery)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 536</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SndBufSize</b>: TcpSocket maximum transmit buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TcpNoDelay</b>: Set to true to disable Nagle's algorithm
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpSocketBase

<h3>Config Paths</h3>

ns3::TcpSocketBase is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ClockGranularity</b>: Clock Granularity used in RTO calculations
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+06ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CongestionOps</b>: Pointer to TcpCongestionOps object
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::TcpCongestionOps></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IcmpCallback</b>: Callback invoked whenever an icmp error is received on this socket.
  <ul>
    <li>Set with class:  \ref ns3::CallbackValue</li>
    <li>Underlying type: \p Callback</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IcmpCallback6</b>: Callback invoked whenever an icmpv6 error is received on this socket.
  <ul>
    <li>Set with class:  \ref ns3::CallbackValue</li>
    <li>Underlying type: \p Callback</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LimitedTransmit</b>: Enable limited transmit
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSegLifetime</b>: Maximum segment lifetime in seconds, use for TIME_WAIT state transition to CLOSED state
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 120</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxWindowSize</b>: Max size of advertised window
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinRto</b>: Minimum retransmit timeout value
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReTxThreshold</b>: Threshold for fast retransmit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RxBuffer</b>: TCP Rx buffer
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::TcpRxBuffer></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Sack</b>: Enable or disable Sack option
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Timestamp</b>: Enable or disable Timestamp option
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxBuffer</b>: TCP Tx buffer
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::TcpTxBuffer></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>UseEcn</b>: Parameter to set ECN functionality
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Off|On|AcceptOnly</li>
    <li>Initial value: Off</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>WindowScaling</b>: Enable or disable Window Scaling option
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::TcpSocket</h3>
<ul>
<li><b>ConnCount</b>: Number of connection attempts (SYN retransmissions) before returning failure
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ConnTimeout</b>: TCP retransmission timeout when opening connection (seconds)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DataRetries</b>: Number of data retransmission attempts
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DelAckCount</b>: Number of packets to wait before sending a TCP ack
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DelAckTimeout</b>: Timeout value for TCP delayed acks, in seconds
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialCwnd</b>: TCP initial congestion window size (segments)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialSlowStartThreshold</b>: TCP initial slow start threshold (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4294967295</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PersistTimeout</b>: Persist timeout to probe for rx window
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +6e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RcvBufSize</b>: TcpSocket maximum receive buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SegmentSize</b>: TCP maximum segment size in bytes (may be adjusted based on MTU discovery)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 536</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SndBufSize</b>: TcpSocket maximum transmit buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TcpNoDelay</b>: Set to true to disable Nagle's algorithm
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>AdvWND</b>: Advertised Window Size<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInFlight</b>: Socket estimation of bytes in flight<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>CongState</b>: TCP Congestion machine state<br>%Callback signature: ns3::TcpSocketState::TcpCongStatesTracedValueCallback
</li>
<li><b>CongestionWindow</b>: The TCP connection's congestion window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>CongestionWindowInflated</b>: The TCP connection's congestion window inflates as in older RFC<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>EcnCeSeq</b>: Sequence of last received CE<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>EcnCwrSeq</b>: Sequence of last received CWR<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>EcnEchoSeq</b>: Sequence of last received ECN Echo<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>EcnState</b>: Trace ECN state change of socket<br>%Callback signature: ns3::TcpSocketState::EcnStatesTracedValueCallback
</li>
<li><b>HighestRxAck</b>: Highest ack received from peer<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>HighestRxSequence</b>: Highest sequence number received from peer<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>HighestSequence</b>: Highest sequence number ever sent in socket's life time<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>NextTxSequence</b>: Next sequence number to send (SND.NXT)<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>PacingRate</b>: The current TCP pacing rate<br>%Callback signature: ns3::TracedValueCallback::DataRate
</li>
<li><b>RTO</b>: Retransmission timeout<br>%Callback signature: ns3::TracedValueCallback::Time
</li>
<li><b>RTT</b>: Last RTT sample<br>%Callback signature: ns3::TracedValueCallback::Time
</li>
<li><b>RWND</b>: Remote side's flow control window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Rx</b>: Receive tcp packet from IP protocol<br>%Callback signature: ns3::TcpSocketBase::TcpTxRxTracedCallback
</li>
<li><b>SlowStartThreshold</b>: TCP slow start threshold (bytes)<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>State</b>: TCP state<br>%Callback signature: ns3::TcpStatesTracedValueCallback
</li>
<li><b>Tx</b>: Send tcp packet to IP protocol<br>%Callback signature: ns3::TcpSocketBase::TcpTxRxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 1256 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpSocketFactory

<h3>Config Paths</h3>

ns3::TcpSocketFactory is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpSocketFactory"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpSocketState

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>EnablePacing</b>: Enable Pacing
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxPacingRate</b>: Set Max Pacing Rate
  <ul>
    <li>Set with class:  \ref ns3::DataRateValue</li>
    <li>Underlying type: \p DataRate</li>
    <li>Initial value: 4000000000bps</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PaceInitialWindow</b>: Perform pacing for initial window of data
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacingCaRatio</b>: Percent pacing rate increase for congestion avoidance conditions
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 120</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacingSsRatio</b>: Percent pacing rate increase for slow start conditions
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 200</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>BytesInFlight</b>: The TCP connection's congestion window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>CongState</b>: TCP Congestion machine state<br>%Callback signature: ns3::TracedValueCallback::TcpCongState
</li>
<li><b>CongestionWindow</b>: The TCP connection's congestion window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>CongestionWindowInflated</b>: The TCP connection's inflated congestion window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>EcnState</b>: Trace ECN state change of socket<br>%Callback signature: ns3::TracedValueCallback::EcnState
</li>
<li><b>HighestSequence</b>: Highest sequence number received from peer<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>NextTxSequence</b>: Next sequence number to send (SND.NXT)<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>PacingRate</b>: The current TCP pacing rate<br>%Callback signature: ns3::TracedValueCallback::DataRate
</li>
<li><b>RTT</b>: Last RTT sample<br>%Callback signature: ns3::TracedValueCallback::Time
</li>
<li><b>SlowStartThreshold</b>: TCP slow start threshold (bytes)<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 448 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpTxBuffer

<h3>Config Paths</h3>

ns3::TcpTxBuffer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/TxBuffer"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>UnackSequence</b>: First unacknowledged sequence number (SND.UNA)<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
</ul>
<b>Size</b> of this type is 176 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpVegas

<h3>Config Paths</h3>

ns3::TcpVegas is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpVegas"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpVegas"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: Lower bound of packets in network
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Beta</b>: Upper bound of packets in network
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Gamma</b>: Limit on increase
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpVeno

<h3>Config Paths</h3>

ns3::TcpVeno is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpVeno"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpVeno"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Beta</b>: Threshold for congestion detection
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpWestwoodPlus

<h3>Config Paths</h3>

ns3::TcpWestwoodPlus is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpWestwoodPlus"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpWestwoodPlus"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>FilterType</b>: Use this to choose no filter or Tustin's approximation filter
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p None|Tustin</li>
    <li>Initial value: Tustin</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>EstimatedBW</b>: The estimated bandwidth<br>%Callback signature: ns3::TracedValueCallback::DataRate
</li>
</ul>
<b>Size</b> of this type is 128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpYeah

<h3>Config Paths</h3>

ns3::TcpYeah is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpNewReno/$ns3::TcpYeah"</li>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/CongestionOps/$ns3::TcpYeah"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: Maximum backlog allowed at the bottleneck queue
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Delta</b>: Log minimum fraction of cwnd to be removed on loss
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Epsilon</b>: Log maximum fraction to be removed on early decongestion
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Gamma</b>: Fraction of queue to be removed per RTT
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Phy</b>: Maximum delta from base
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Rho</b>: Minimum # of consecutive RTT to consider competition on loss
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StcpAiFactor</b>: STCP additive increase factor
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Zeta</b>: Minimum # of state switches to reset m_renoCount
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TdBetFfMacScheduler

<h3>Config Paths</h3>

ns3::TdBetFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdBetFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdBetFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::TdBetFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::TdBetFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p SRS_UL_CQI|PUSCH_UL_CQI</li>
    <li>Initial value: SRS_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1352 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TdMtFfMacScheduler

<h3>Config Paths</h3>

ns3::TdMtFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdMtFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdMtFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::TdMtFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::TdMtFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p SRS_UL_CQI|PUSCH_UL_CQI</li>
    <li>Initial value: SRS_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1344 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TdTbfqFfMacScheduler

<h3>Config Paths</h3>

ns3::TdTbfqFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdTbfqFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdTbfqFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::TdTbfqFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::TdTbfqFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CreditLimit</b>: Flow credit limit (default 625000 bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 625000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CreditableThreshold</b>: Threshold of flow credit (default 0 bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DebtLimit</b>: Flow debt limit (default -625000 bytes)
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t -2147483648:2147483647</li>
    <li>Initial value: -625000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TokenPoolSize</b>: The maximum value of flow token pool (default 1 bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p SRS_UL_CQI|PUSCH_UL_CQI</li>
    <li>Initial value: SRS_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1368 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThompsonSamplingWifiManager

<h3>Config Paths</h3>

ns3::ThompsonSamplingWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::ThompsonSamplingWifiManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManagers/[i]/$ns3::ThompsonSamplingWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Decay</b>: Exponential decay coefficient, Hz; zero is a valid value for static scenarios
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 432 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppAntennaModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppChannelConditionModel

<h3>Config Paths</h3>

ns3::ThreeGppChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppChannelModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Blockage</b>: Enable blockage model A (sec 7.6.4.1)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BlockerSpeed</b>: The speed of moving blockers, the unit is m/s
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelConditionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The operating Frequency in Hz
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NumNonselfBlocking</b>: number of non-self-blocking regions
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PortraitMode</b>: true for portrait mode, false for landscape mode
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Scenario</b>: The 3GPP scenario (RMa, UMa, UMi-StreetCanyon, InH-OfficeOpen, InH-OfficeMixed)
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: UMa</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specify the channel coherence time
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>vScatt</b>: Maximum speed of the vehicle in the layout (see 3GPP TR 37.885 v15.3.0, Sec. 6.2.3).Used to compute the additional contribution for the Doppler ofdelayed (reflected) paths
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 256 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppChannelModelParam

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ParametrizedCorrelation</b>: Whether the parameter value Ro will be used as the term for the correlation or the 3gpp term: std::sqrt (1 / k). When true Ro will be used, otherwise, 3gpp term.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Ro</b>: Cross polarization correlation parameter.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ThreeGppChannelModel</h3>
<ul>
<li><b>Blockage</b>: Enable blockage model A (sec 7.6.4.1)
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BlockerSpeed</b>: The speed of moving blockers, the unit is m/s
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelConditionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The operating Frequency in Hz
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NumNonselfBlocking</b>: number of non-self-blocking regions
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PortraitMode</b>: true for portrait mode, false for landscape mode
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Scenario</b>: The 3GPP scenario (RMa, UMa, UMi-StreetCanyon, InH-OfficeOpen, InH-OfficeMixed)
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: UMa</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specify the channel coherence time
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>vScatt</b>: Maximum speed of the vehicle in the layout (see 3GPP TR 37.885 v15.3.0, Sec. 6.2.3).Used to compute the additional contribution for the Doppler ofdelayed (reflected) paths
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 272 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppHttpClient

<h3>Config Paths</h3>

ns3::ThreeGppHttpClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::ThreeGppHttpClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>RemoteServerAddress</b>: The address of the destination server.
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RemoteServerPort</b>: The destination port of the outbound packets.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Variables</b>: Variable collection, which is used to control e.g. timing and HTTP request size.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ThreeGppHttpVariables></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>ConnectionClosed</b>: Connection to the destination web server is closed.<br>%Callback signature: ns3::ThreeGppHttpClient::TracedCallback
</li>
<li><b>ConnectionEstablished</b>: Connection to the destination web server has been established.<br>%Callback signature: ns3::ThreeGppHttpClient::TracedCallback
</li>
<li><b>Rx</b>: General trace for receiving a packet of any kind.<br>%Callback signature: ns3::Packet::PacketAddressTracedCallback
</li>
<li><b>RxDelay</b>: General trace of delay for receiving a complete object.<br>%Callback signature: ns3::Application::DelayAddressCallback
</li>
<li><b>RxEmbeddedObject</b>: Received a whole embedded object. Header is included.<br>%Callback signature: ns3::ThreeGppHttpClient::TracedCallback
</li>
<li><b>RxEmbeddedObjectPacket</b>: A packet of embedded object has been received.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxMainObject</b>: Received a whole main object. Header is included.<br>%Callback signature: ns3::ThreeGppHttpClient::TracedCallback
</li>
<li><b>RxMainObjectPacket</b>: A packet of main object has been received.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxPage</b>: A page has been received.<br>%Callback signature: ns3::ThreeGppHttpClient::RxPageTracedCallback
</li>
<li><b>RxRtt</b>: General trace of round trip delay time for receiving a complete object.<br>%Callback signature: ns3::Application::DelayAddressCallback
</li>
<li><b>StateTransition</b>: Trace fired upon every HTTP client state transition.<br>%Callback signature: ns3::Application::StateTransitionCallback
</li>
<li><b>Tx</b>: General trace for sending a packet of any kind.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxEmbeddedObjectRequest</b>: Sent a request for an embedded object.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxMainObjectRequest</b>: Sent a request for a main object.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 616 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppHttpHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppHttpServer

<h3>Config Paths</h3>

ns3::ThreeGppHttpServer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::ThreeGppHttpServer"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>LocalAddress</b>: The local address of the server, i.e., the address on which to bind the Rx socket.
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LocalPort</b>: Port on which the application listen for incoming packets.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mtu</b>: Maximum transmission unit (in bytes) of the TCP sockets used in this application, excluding the compulsory 40 bytes TCP header. Typical values are 1460 and 536 bytes. The attribute is read-only because the value is randomly determined.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Variables</b>: Variable collection, which is used to control e.g. processing and object generation delays.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ThreeGppHttpVariables></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>ConnectionEstablished</b>: Connection to a remote web client has been established.<br>%Callback signature: ns3::HttpServer::ConnectionEstablishedCallback
</li>
<li><b>EmbeddedObject</b>: An embedded object has been generated.<br>%Callback signature: ns3::HttpServer::HttpObjectCallback
</li>
<li><b>MainObject</b>: A main object has been generated.<br>%Callback signature: ns3::HttpServer::HttpObjectCallback
</li>
<li><b>Rx</b>: A packet has been received.<br>%Callback signature: ns3::Packet::PacketAddressTracedCallback
</li>
<li><b>RxDelay</b>: A packet has been received with delay information.<br>%Callback signature: ns3::Application::DelayAddressCallback
</li>
<li><b>StateTransition</b>: Trace fired upon every HTTP client state transition.<br>%Callback signature: ns3::Application::StateTransitionCallback
</li>
<li><b>Tx</b>: A packet has been sent.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 336 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppHttpVariables

<h3>Config Paths</h3>

ns3::ThreeGppHttpVariables is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::ThreeGppHttpClient/Variables"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::ThreeGppHttpServer/Variables"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>EmbeddedObjectGenerationDelay</b>: The constant time needed by HTTP server to generate an embedded object as a response.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>EmbeddedObjectSizeMax</b>: The maximum value of embedded object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2000000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EmbeddedObjectSizeMean</b>: The mean of embedded object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7758</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>EmbeddedObjectSizeMin</b>: The minimum value of embedded object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 22:4294967295</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EmbeddedObjectSizeStdDev</b>: The standard deviation of embedded object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 126168</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>HighMtuProbability</b>: The probability that higher MTU size is used.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.76</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HighMtuSize</b>: The higher MTU size.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1460</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LowMtuSize</b>: The lower MTU size.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 536</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MainObjectGenerationDelay</b>: The constant time needed by HTTP server to generate a main object as a response.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MainObjectSizeMax</b>: The maximum value of main object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2000000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MainObjectSizeMean</b>: The mean of main object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10710</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MainObjectSizeMin</b>: The minimum value of main object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 22:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MainObjectSizeStdDev</b>: The standard deviation of main object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 25032</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NumOfEmbeddedObjectsMax</b>: The upper bound parameter of Pareto distribution for the number of embedded objects per web page. The actual maximum value is this value subtracted by the scale parameter.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 55</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NumOfEmbeddedObjectsScale</b>: The scale parameter of Pareto distribution for the number of embedded objects per web page.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NumOfEmbeddedObjectsShape</b>: The shape parameter of Pareto distribution for the number of embedded objects per web page.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>ParsingTimeMean</b>: The mean of parsing time.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1.3e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>ReadingTimeMean</b>: The mean of reading time.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +3e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>RequestSize</b>: The constant size of HTTP request packet (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 328</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppIndoorMixedOfficeChannelConditionModel

<h3>Config Paths</h3>

ns3::ThreeGppIndoorMixedOfficeChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorMixedOfficeChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppIndoorOfficePropagationLossModel

<h3>Config Paths</h3>

ns3::ThreeGppIndoorOfficePropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppIndoorOfficePropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppPropagationLossModel</h3>
<ul>
<li><b>BuildingPenetrationLossesEnabled</b>: Enable/disable Building Penetration Losses.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelConditionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnforceParameterRanges</b>: Whether to strictly enforce TR38.901 applicability ranges
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The centre frequency in Hz.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowingEnabled</b>: Enable/disable shadowing.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 216 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppIndoorOpenOfficeChannelConditionModel

<h3>Config Paths</h3>

ns3::ThreeGppIndoorOpenOfficeChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppIndoorOpenOfficeChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppPropagationLossModel

<h3>Config Paths</h3>

ns3::ThreeGppPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BuildingPenetrationLossesEnabled</b>: Enable/disable Building Penetration Losses.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelConditionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnforceParameterRanges</b>: Whether to strictly enforce TR38.901 applicability ranges
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The centre frequency in Hz.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowingEnabled</b>: Enable/disable shadowing.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 216 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppRmaChannelConditionModel

<h3>Config Paths</h3>

ns3::ThreeGppRmaChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppRmaChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppRmaPropagationLossModel

<h3>Config Paths</h3>

ns3::ThreeGppRmaPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppRmaPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AvgBuildingHeight</b>: The average building height in meters.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 5:50</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>AvgStreetWidth</b>: The average street width in meters.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 5:50</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ThreeGppPropagationLossModel</h3>
<ul>
<li><b>BuildingPenetrationLossesEnabled</b>: Enable/disable Building Penetration Losses.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelConditionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnforceParameterRanges</b>: Whether to strictly enforce TR38.901 applicability ranges
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The centre frequency in Hz.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowingEnabled</b>: Enable/disable shadowing.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 232 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppSpectrumPropagationLossModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ChannelModel</b>: The channel model. It needs to implement the MatrixBasedChannelModel interface
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Object></li>
    <li>Initial value: ns3::ThreeGppChannelModel</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppUmaChannelConditionModel

<h3>Config Paths</h3>

ns3::ThreeGppUmaChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmaChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppUmaPropagationLossModel

<h3>Config Paths</h3>

ns3::ThreeGppUmaPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppUmaPropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppPropagationLossModel</h3>
<ul>
<li><b>BuildingPenetrationLossesEnabled</b>: Enable/disable Building Penetration Losses.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelConditionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnforceParameterRanges</b>: Whether to strictly enforce TR38.901 applicability ranges
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The centre frequency in Hz.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowingEnabled</b>: Enable/disable shadowing.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 224 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppUmiStreetCanyonChannelConditionModel

<h3>Config Paths</h3>

ns3::ThreeGppUmiStreetCanyonChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppUmiStreetCanyonChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppUmiStreetCanyonPropagationLossModel

<h3>Config Paths</h3>

ns3::ThreeGppUmiStreetCanyonPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppUmiStreetCanyonPropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppPropagationLossModel</h3>
<ul>
<li><b>BuildingPenetrationLossesEnabled</b>: Enable/disable Building Penetration Losses.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelConditionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnforceParameterRanges</b>: Whether to strictly enforce TR38.901 applicability ranges
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The centre frequency in Hz.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowingEnabled</b>: Enable/disable shadowing.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 216 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppV2vHighwayChannelConditionModel

<h3>Config Paths</h3>

ns3::ThreeGppV2vHighwayChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vHighwayChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppV2vHighwayPropagationLossModel

<h3>Config Paths</h3>

ns3::ThreeGppV2vHighwayPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppV2vHighwayPropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppV2vUrbanPropagationLossModel</h3>
<ul>
<li><b>PercType3Vehicles</b>: The percentage of vehicles of type 3 (i.e., trucks) in the scenario
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:100</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ThreeGppPropagationLossModel</h3>
<ul>
<li><b>BuildingPenetrationLossesEnabled</b>: Enable/disable Building Penetration Losses.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelConditionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnforceParameterRanges</b>: Whether to strictly enforce TR38.901 applicability ranges
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The centre frequency in Hz.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowingEnabled</b>: Enable/disable shadowing.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 240 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppV2vUrbanChannelConditionModel

<h3>Config Paths</h3>

ns3::ThreeGppV2vUrbanChannelConditionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/ChannelConditionModel/$ns3::ThreeGppV2vUrbanChannelConditionModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ThreeGppChannelConditionModel</h3>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppV2vUrbanPropagationLossModel

<h3>Config Paths</h3>

ns3::ThreeGppV2vUrbanPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppPropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeGppV2vUrbanPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>PercType3Vehicles</b>: The percentage of vehicles of type 3 (i.e., trucks) in the scenario
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:100</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::ThreeGppPropagationLossModel</h3>
<ul>
<li><b>BuildingPenetrationLossesEnabled</b>: Enable/disable Building Penetration Losses.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelConditionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>EnforceParameterRanges</b>: Whether to strictly enforce TR38.901 applicability ranges
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The centre frequency in Hz.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShadowingEnabled</b>: Enable/disable shadowing.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 240 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeLogDistancePropagationLossModel

<h3>Config Paths</h3>

ns3::ThreeLogDistancePropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Distance0</b>: Beginning of the first (near) distance field
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Distance1</b>: Beginning of the second (middle) distance field.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 200</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Distance2</b>: Beginning of the third (far) distance field.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 500</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Exponent0</b>: The exponent for the first field.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.9</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Exponent1</b>: The exponent for the second field.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Exponent2</b>: The exponent for the third field.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ReferenceLoss</b>: The reference loss at distance d0 (dB). (Default is Friis at 1m with 5.15 GHz)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 46.6777</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThresholdPreambleDetectionModel

<h3>Config Paths</h3>

ns3::ThresholdPreambleDetectionModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PreambleDetectionModel/$ns3::ThresholdPreambleDetectionModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PreambleDetectionModel/$ns3::ThresholdPreambleDetectionModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MinimumRssi</b>: Preamble is dropped if the RSSI is below this value (expressed in dBm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -82</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Threshold</b>: Preamble is successfully detected if the SNR is at or above this value (expressed in dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TimeProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The double valued (units of seconds) probe output<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TimeSeriesAdaptor

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The current simulation time versus the current value converted to a double<br>%Callback signature: ns3::TimeSeriesAdaptor::OutputTracedCallback
</li>
</ul>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TimestampTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TopologyReader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TraceFadingLossModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RbNum</b>: The number of RB the trace is made of (default 100)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RngStreamSetSize</b>: The number of RNG streams reserved for the fading model. The maximum number of streams that are needed for an LTE FDD scenario is 2 * numUEs * numeNBs.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint64_t 0:18446744073709551615</li>
    <li>Initial value: 200000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SamplesNum</b>: The number of samples the trace is made of (default 10000)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TraceFilename</b>: Name of file to load a trace from.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: ""</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>TraceLength</b>: The total length of the fading trace (default value 10 s.)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+10ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>WindowSize</b>: The size of the window for the fading trace (default value 0.5 s.)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 272 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TrafficControlLayer

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RootQueueDiscList</b>: The list of root queue discs associated to this Traffic Control layer.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDisc></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TcDrop</b>: Trace source indicating a packet has been dropped by the Traffic Control layer because no queue disc is installed on the device, the device supports flow control and the device queue is stopped<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TrafficGenerator

<h3>Config Paths</h3>

ns3::TrafficGenerator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::TrafficGenerator"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 240 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TrafficGenerator3gppAudioData

<h3>Config Paths</h3>

ns3::TrafficGenerator3gppAudioData is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::TrafficGenerator/$ns3::TrafficGenerator3gppAudioData"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::TrafficGenerator3gppAudioData"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DataRate</b>: The desired data rate in Mbps. Typical values are 0.756 Mbps and 1.12 Mbps.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.756</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Periodicity</b>: The periodicity in milliseconds.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Protocol</b>: The type of protocol to use.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::TrafficGenerator::TxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 256 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TrafficGenerator3gppGenericVideo

<h3>Config Paths</h3>

ns3::TrafficGenerator3gppGenericVideo is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::TrafficGenerator/$ns3::TrafficGenerator3gppGenericVideo"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::TrafficGenerator3gppGenericVideo"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AlgType</b>: Type of the algorithm for the codec adaptation
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p AIPAT|APS|AFPS|WO|APS_UPAGG</li>
    <li>Initial value: AIPAT</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BoundJitter</b>: The periodicity in milliseconds.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DataRate</b>: The desired data rate in Mbps.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DecreaseDataRateQuicklyMultiplier</b>: The multiplier when decreasing the video traffic volume quickly, e.g. 0.2 to decrease 5 times. Used to decrease fps or data rate.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DecreaseDataRateSlowlyMultiplier</b>: The multiplier when decreasing the video traffic volume slowly, e.g, 0.75, to decrease 25%. Used to decrease fps or data rate.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Fps</b>: Frame generation rate (per second). E.g. typical value cold be 60fps.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 60</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IncreaseDataRateMultiplier</b>: The multiplier when increasing the video traffic volume, e.g., 3 to increase 3 times. Used to decrease fps or data rate.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LowerThresholdForDecreasingQuickly</b>: The lower packet loss bound for decreasing the video traffic quickly.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LowerThresholdForDecreasingSlowly</b>: The lower packet loss bound for decreasing the video traffic slowly.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxDataRate</b>: The maximum desired data rate in Mbps.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxFps</b>: The maximum frame generation rate (per second). 
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 240</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxRatioPacketSize</b>: Max ratio wrt the mean packet size. See Table 5.1.1.1-1 of 3GPP TR 38.838 V17.0.0 (2021-12).Typical values are 150% and 109%.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 1:2</li>
    <li>Initial value: 1.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MeanPacketArrivalJitter</b>: The mean of packet arrival jitter in milliseconds.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinDataRate</b>: The minimum desired data rate in Mbps.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinFps</b>: The minimum frame generation rate (per second). 
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinRatioPacketSize</b>: Min ratio wrt the mean packet size. See Table 5.1.1.1-1 of 3GPP TR 38.838 V17.0.0 (2021-12).Typical values are 50% and 91%.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Protocol</b>: The type of protocol to use.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>StdPacketArrivalJitter</b>: The STD of packet arrival jitter in milliseconds.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StdRatioPacketSize</b>: STD ratio wrt the mean packet size. See Table 5.1.1.1-1 of 3GPP TR 38.838 V17.0.0 (2021-12).Typical values are 10.5% and 3%.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.105</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UpperThresholdForIncreasing</b>: The upper packet loss bound for increasing the video traffic.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.02</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Params</b>: Traffic parameters have been updated accordingly the loopback algorithm, and notified through this trace.<br>%Callback signature: ns3::TrafficGenerator3gppGenericVideo::ParamsTracedCallback
</li>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::TrafficGenerator::TxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 448 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TrafficGenerator3gppPoseControl

<h3>Config Paths</h3>

ns3::TrafficGenerator3gppPoseControl is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::TrafficGenerator/$ns3::TrafficGenerator3gppPoseControl"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::TrafficGenerator3gppPoseControl"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>PacketSize</b>: The packet size in bytes.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Periodicity</b>: The periodicity in milliseconds.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Protocol</b>: The type of protocol to use.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::TrafficGenerator::TxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 248 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TrafficGeneratorFtpSingle

<h3>Config Paths</h3>

ns3::TrafficGeneratorFtpSingle is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::TrafficGenerator/$ns3::TrafficGeneratorFtpSingle"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::TrafficGeneratorFtpSingle"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>FileSize</b>: The total number of bytes to send. The value zero means that there is no limit.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>PacketSize</b>: The number of bytes to write per socket send
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 512</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Protocol</b>: The type of protocol to use.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::TrafficGenerator::TxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 248 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TrafficGeneratorNgmnFtpMulti

<h3>Config Paths</h3>

ns3::TrafficGeneratorNgmnFtpMulti is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::TrafficGenerator/$ns3::TrafficGeneratorNgmnFtpMulti"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::TrafficGeneratorNgmnFtpMulti"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>FileSizeMu</b>: Mu parameter of lognormal distribution for the file size generation
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 14.45</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FileSizeSigma</b>: Sigma parameter of lognormal distribution for the file size generation
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.35</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxFileSize</b>: Max file size in number of bytes
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 5000000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketSize</b>: The number of bytes to write per socket send
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 512</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Protocol</b>: The type of protocol to use.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>ReadingTimeMean</b>: The mean reading time in seconds
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 180</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::TrafficGenerator::TxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 296 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TrafficGeneratorNgmnGaming

<h3>Config Paths</h3>

ns3::TrafficGeneratorNgmnGaming is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::TrafficGenerator/$ns3::TrafficGeneratorNgmnGaming"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::TrafficGeneratorNgmnGaming"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>InitialPacketArrivalMax</b>: The maximum value in milliseconds for the initial packet arrival calculation according to NGMN white paper Annex A. The packet arrival in both, downlink and uplink, is determined using the Uniform Distribution.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 40</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialPacketArrivalMin</b>: The minimum value in milliseconds for the initial packet arrival calculation according to NGMN white paper Annex A. The packet arrival in both, downlink and uplink, is determined using the Uniform Distribution.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IsDownlink</b>: If set to true the traffic will be generated according to parameters and model for gaming downlink, otherwise, if false,it will be generated according to parameters and model for uplink.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketArrivalUl</b>: Packet arrival time in milliseconds for uplink. Packet arrival in uplink is deterministic
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 40</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Protocol</b>: The type of protocol to use.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>aParamPacketArrivalDl</b>: The a parameter for the packet arrival calculation in downlink according to NGMN white paper Annex A. The packet arrival in downlink is determined using Largest Extreme Value Distribution (also known as Fisher-Tippett distribution) random variable.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 55</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>aParamPacketSizeDl</b>: The a parameter in number of bytes for the packet size calculation in downlink according to NGMN white paper Annex A. The packet size is determined using the Largest Extreme Value Distribution (also known as Fisher-Tippett distribution) random variable.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 120</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>aParamPacketSizeUl</b>: The a parameter in number of bytes for the packet size calculation in uplink according to the NGMN white paper Annex A. The packet size is determined using Largest Extreme Value Distribution (also known as Fisher-Tippett distribution) random variable.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 45</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>bParamPacketArrivalDl</b>: The b parameter for the packet arrival calculation in downlink according to NGMN white paper Annex A. The packet arrivalin downlink is determined using Largest Extreme Value Distribution (also known as Fisher-Tippett distribution) random variable.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5.7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>bParamPacketSizeDl</b>: The b parameter in number of bytes for the packet size calculation in downlink according to NGMN white paper Annex A. The packet size is determined using the Largest Extreme Value Distribution (also known as Fisher-Tippett distribution) random variable.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 36</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>bParamPacketSizeUl</b>: The b parameter in number of bytes for the packet size  calculation in uplink according to the NGMN white paper Annex A. The packet size is determined using Largest Extreme Value Distribution (also known as Fisher-Tippett distribution) random variable.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5.7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::TrafficGenerator::TxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 328 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TrafficGeneratorNgmnVideo

<h3>Config Paths</h3>

ns3::TrafficGeneratorNgmnVideo is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::TrafficGenerator/$ns3::TrafficGeneratorNgmnVideo"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::TrafficGeneratorNgmnVideo"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>InterframeIntervalTime</b>: Interframe interval time 
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NumberOfPacketsInFrame</b>: Number of packets in frame
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 8:4294967295</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketSizeBound</b>: The bound parameter for the Pareto distribution for the packet size generation
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 250</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketSizeScale</b>: The scale parameter for the Pareto distribution for the packet size generation
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 40</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketSizeShape</b>: The shape parameter for the Pareto distribution for the packet size generation
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketTimeBound</b>: The bound parameter for the Pareto distribution for the packet time generation
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 12.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketTimeScale</b>: The scale parameter for the Pareto distribution for the packet time generation
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketTimeShape</b>: The shape parameter for the Pareto distribution for the packet timee generation
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Protocol</b>: The type of protocol to use.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::TrafficGenerator::TxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 328 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TrafficGeneratorNgmnVoip

<h3>Config Paths</h3>

ns3::TrafficGeneratorNgmnVoip is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::TrafficGenerator/$ns3::TrafficGeneratorNgmnVoip"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::TrafficGeneratorNgmnVoip"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>EncoderFrameLength</b>: The encoder frame length in milliseconds. It is used for the calculation of transition probabilities based on configured voice activity factor (VAF).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MeanTalkSpurtDuration</b>: Mean talk spurt duration in the number of milliseconds.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Protocol</b>: The type of protocol to use.
  <ul>
    <li>Set with class:  \ref ns3::TypeIdValue</li>
    <li>Underlying type: \p TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>SIDPayload</b>: The payload of SIDs.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SIDPeriodicity</b>: The periodicity of SIDs is 160 ms during silence
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 160</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VoiceActivityFactor</b>: Voice activity factor, determines the ratio of active versus inactive state. Expressed as the ratio.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:0.99</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VoicePayload</b>: The voice packet payload in number of bytes.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 40</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::TrafficGenerator::TxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 328 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Trailer

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TriangularRandomVariable

<h3>Config Paths</h3>

ns3::TriangularRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac/ProbeDelay/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/ForwardingDelay/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice/MeshUnderJitter/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::TriangularRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::TriangularRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Max</b>: The upper bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mean</b>: The mean value for the triangular distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Min</b>: The lower bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TtaFfMacScheduler

<h3>Config Paths</h3>

ns3::TtaFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TtaFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TtaFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::TtaFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/BandwidthPartMap/[i]/FfMacScheduler/$ns3::TtaFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p SRS_UL_CQI|PUSCH_UL_CQI</li>
    <li>Initial value: SRS_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1344 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TvSpectrumTransmitter

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Antenna</b>: The AntennaModel to be used. Allows classes inherited from ns3::AntennaModel. Defaults to ns3::IsotropicAntennaModel.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::AntennaModel></li>
    <li>Initial value: ns3::IsotropicAntennaModel</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BasePsd</b>: The base power spectral density (in dBm/Hz) of the TV transmitter's transmitted spectrum. Base PSD is the maximum PSD of the spectrum excluding pilots. For analog and COFDM transmitters this is the maximum PSD, but for 8-VSB transmitters this is the maximum PSD of the main signal spectrum (flat-top segment) since the pilot actually has the maximum PSD overall.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelBandwidth</b>: The bandwidth (in Hz) of the TV transmitter's signal. Must be greater than or equal to 0.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 6e+06</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartFrequency</b>: The lower end frequency (in Hz) of the TV transmitter's signal. Must be greater than or equal to 0.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StartingTime</b>: The time point after the simulation begins in which the TV transmitter will begin transmitting.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TransmitDuration</b>: The duration of time that the TV transmitter will transmit for.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TvType</b>: The type of TV transmitter/modulation to be used.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p 8vsb|cofdm|analog</li>
    <li>Initial value: 8vsb</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TwoRayGroundPropagationLossModel

<h3>Config Paths</h3>

ns3::TwoRayGroundPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Frequency</b>: The carrier frequency (in Hz) at which propagation occurs  (default is 5.15 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5.15e+09</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HeightAboveZ</b>: The height of the antenna (m) above the node's Z coordinate
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinDistance</b>: The distance under which the propagation model refuses to give results (m)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SystemLoss</b>: The system loss
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TwoRaySpectrumPropagationLossModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelConditionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The operating Frequency in Hz
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>Scenario</b>: The 3GPP scenario (RMa, UMa, UMi-StreetCanyon, InH-OfficeOpen, InH-OfficeMixed).
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: RMa</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Txop

<h3>Config Paths</h3>

ns3::Txop is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/Txop"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Aifsn</b>: The AIFSN: the default value conforms to non-QOS (just for the first link, in case of 11be multi-link devices).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Aifsns</b>: The values of AIFSN for all the links
  <ul>
    <li>Set with class:  \ref ns3::AttributeContainerValue<N3ns313UintegerValueE, NSt7__cxx114listIN3ns33PtrINS1_13UintegerValueEEESaIS4_EEE></li>
    <li>Underlying type: \p ns3::Ptr<N3ns313UintegerValueE></li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxCw</b>: The maximum value of the contention window (just for the first link, in case of 11be multi-link devices).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxCws</b>: The maximum values of the contention window for all the links
  <ul>
    <li>Set with class:  \ref ns3::AttributeContainerValue<N3ns313UintegerValueE, NSt7__cxx114listIN3ns33PtrINS1_13UintegerValueEEESaIS4_EEE></li>
    <li>Underlying type: \p ns3::Ptr<N3ns313UintegerValueE></li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinCw</b>: The minimum value of the contention window (just for the first link, in case of 11be multi-link devices).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinCws</b>: The minimum values of the contention window for all the links
  <ul>
    <li>Set with class:  \ref ns3::AttributeContainerValue<N3ns313UintegerValueE, NSt7__cxx114listIN3ns33PtrINS1_13UintegerValueEEESaIS4_EEE></li>
    <li>Underlying type: \p ns3::Ptr<N3ns313UintegerValueE></li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Queue</b>: The WifiMacQueue object
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiMacQueue></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>TxopLimit</b>: The TXOP limit: the default value conforms to non-QoS (just for the first link, in case of 11be multi-link devices).
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxopLimits</b>: The values of TXOP limit for all the links
  <ul>
    <li>Set with class:  \ref ns3::AttributeContainerValue<N3ns39TimeValueE, NSt7__cxx114listIN3ns33PtrINS1_9TimeValueEEESaIS4_EEE></li>
    <li>Underlying type: \p ns3::Ptr<N3ns39TimeValueE></li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>BackoffTrace</b>: Trace source for backoff values<br>%Callback signature: ns3::Txop::BackoffValueTracedCallback
</li>
<li><b>CwTrace</b>: Trace source for contention window values<br>%Callback signature: ns3::Txop::CwValueTracedCallback
</li>
</ul>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanChannel

<h3>Config Paths</h3>

ns3::UanChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::UanChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::UanChannel"</li>
<li>"/ChannelList/[i]/$ns3::UanChannel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>NoiseModel</b>: A pointer to the model of the channel ambient noise.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanNoiseModel></li>
    <li>Initial value: ns3::UanNoiseModelDefault</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PropagationModel</b>: A pointer to the propagation model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanPropModel></li>
    <li>Initial value: ns3::UanPropModelIdeal</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanHeaderCommon

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanHeaderRcAck

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanHeaderRcCts

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanHeaderRcCtsGlobal

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanHeaderRcData

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanHeaderRcRts

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanMac

<h3>Config Paths</h3>

ns3::UanMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Mac"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanMacAloha

<h3>Config Paths</h3>

ns3::UanMacAloha is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Mac/$ns3::UanMacAloha"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanMacCw

<h3>Config Paths</h3>

ns3::UanMacCw is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Mac/$ns3::UanMacCw"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CW</b>: The MAC parameter CW.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SlotTime</b>: Time slot duration for MAC backoff.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Dequeue</b>: A was passed down to the PHY from the MAC.<br>%Callback signature: ns3::UanMacCw::QueueTracedCallback
</li>
<li><b>Enqueue</b>: A packet arrived at the MAC for transmission.<br>%Callback signature: ns3::UanMacCw::QueueTracedCallback
</li>
<li><b>RX</b>: A packet was destined for this MAC and was received.<br>%Callback signature: ns3::UanMac::PacketModeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 240 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanMacRc

<h3>Config Paths</h3>

ns3::UanMacRc is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Mac/$ns3::UanMacRc"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxFrames</b>: Maximum number of frames to include in a single RTS.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxPropDelay</b>: Maximum possible propagation delay to gateway.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinRetryRate</b>: Smallest allowed RTS retry rate.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.01</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NumberOfRates</b>: Number of rate divisions supported by each PHY.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>QueueLimit</b>: Maximum packets to queue at MAC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RetryRate</b>: Number of retry attempts per second (of RTS/GWPING).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.2</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RetryStep</b>: Retry rate increment.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.01</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SIFS</b>: Spacing to give between frames (this should match gateway).
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Dequeue</b>: A  (data) packet was passed down to PHY from MAC.<br>%Callback signature: ns3::UanMacRc::QueueTracedCallback
</li>
<li><b>Enqueue</b>: A  (data) packet arrived at MAC for transmission.<br>%Callback signature: ns3::UanMacRc::QueueTracedCallback
</li>
<li><b>RX</b>: A packet was destined for and received at this MAC layer.<br>%Callback signature: ns3::UanMac::PacketModeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 344 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanMacRcGw

<h3>Config Paths</h3>

ns3::UanMacRcGw is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Mac/$ns3::UanMacRcGw"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>FrameSize</b>: Size of data frames in bytes.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxPropDelay</b>: Maximum propagation delay between gateway and non-gateway nodes.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxReservations</b>: Maximum number of reservations to accept per cycle.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MinRetryRate</b>: Smallest allowed RTS retry rate.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.01</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NumberOfNodes</b>: Number of non-gateway nodes in this gateway's neighborhood.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NumberOfRates</b>: Number of rates per Phy layer.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1023</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RateStep</b>: Increments available for rate assignment in bps.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RetryStep</b>: Retry rate increment.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.01</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SIFS</b>: Spacing between frames to account for timing error and processing delay.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +2e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TotalRate</b>: Total available channel rate in bps (for a single channel, without splitting reservation channel).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4096</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Cycle</b>: Trace cycle statistics.<br>%Callback signature: ns3::UanMacRcGw::CycleCallback
</li>
<li><b>RX</b>: A packet was destined for and received at this MAC layer.<br>%Callback signature: ns3::UanMac::PacketModeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 400 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanNetDevice

<h3>Config Paths</h3>

ns3::UanNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Channel</b>: The channel attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanChannel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mac</b>: The MAC layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanMac></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Phy</b>: The PHY layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanPhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Transducer</b>: The Transducer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanTransducer></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: Received payload from the MAC layer.<br>%Callback signature: ns3::UanNetDevice::RxTxTracedCallback
</li>
<li><b>Tx</b>: Send payload to the MAC layer.<br>%Callback signature: ns3::UanNetDevice::RxTxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanNoiseModel

<h3>Config Paths</h3>

ns3::UanNoiseModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel/NoiseModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel/NoiseModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::UanChannel/NoiseModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::UanChannel/NoiseModel"</li>
<li>"/ChannelList/[i]/$ns3::UanChannel/NoiseModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanNoiseModelDefault

<h3>Config Paths</h3>

ns3::UanNoiseModelDefault is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel/NoiseModel/$ns3::UanNoiseModelDefault"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel/NoiseModel/$ns3::UanNoiseModelDefault"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::UanChannel/NoiseModel/$ns3::UanNoiseModelDefault"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::UanChannel/NoiseModel/$ns3::UanNoiseModelDefault"</li>
<li>"/ChannelList/[i]/$ns3::UanChannel/NoiseModel/$ns3::UanNoiseModelDefault"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Shipping</b>: Shipping contribution to noise between 0 and 1.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Wind</b>: Wind speed in m/s.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhy

<h3>Config Paths</h3>

ns3::UanPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 176 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyCalcSinr

<h3>Config Paths</h3>

ns3::UanPhyCalcSinr is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy1"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy2"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/SinrModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyCalcSinrDefault

<h3>Config Paths</h3>

ns3::UanPhyCalcSinrDefault is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy1/$ns3::UanPhyCalcSinrDefault"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy2/$ns3::UanPhyCalcSinrDefault"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/SinrModel/$ns3::UanPhyCalcSinrDefault"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyCalcSinrDual

<h3>Config Paths</h3>

ns3::UanPhyCalcSinrDual is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy1/$ns3::UanPhyCalcSinrDual"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy2/$ns3::UanPhyCalcSinrDual"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/SinrModel/$ns3::UanPhyCalcSinrDual"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyCalcSinrFhFsk

<h3>Config Paths</h3>

ns3::UanPhyCalcSinrFhFsk is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy1/$ns3::UanPhyCalcSinrFhFsk"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy2/$ns3::UanPhyCalcSinrFhFsk"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/SinrModel/$ns3::UanPhyCalcSinrFhFsk"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>NumberOfHops</b>: Number of frequencies in hopping pattern.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 13</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyDual

<h3>Config Paths</h3>

ns3::UanPhyDual is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CcaThresholdPhy1</b>: Aggregate energy of incoming signals to move to CCA Busy state dB of Phy1.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CcaThresholdPhy2</b>: Aggregate energy of incoming signals to move to CCA Busy state dB of Phy2.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PerModelPhy1</b>: Functor to calculate PER based on SINR and TxMode for Phy1.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanPhyPer></li>
    <li>Initial value: ns3::UanPhyPerGenDefault</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PerModelPhy2</b>: Functor to calculate PER based on SINR and TxMode for Phy2.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanPhyPer></li>
    <li>Initial value: ns3::UanPhyPerGenDefault</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SinrModelPhy1</b>: Functor to calculate SINR based on pkt arrivals and modes for Phy1.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanPhyCalcSinr></li>
    <li>Initial value: ns3::UanPhyCalcSinrDual</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SinrModelPhy2</b>: Functor to calculate SINR based on pkt arrivals and modes for Phy2.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanPhyCalcSinr></li>
    <li>Initial value: ns3::UanPhyCalcSinrDual</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SupportedModesPhy1</b>: List of modes supported by Phy1.
  <ul>
    <li>Set with class:  \ref ns3::UanModesListValue</li>
    <li>Underlying type: \p UanModesList</li>
    <li>Initial value: 3|0|1|1|</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SupportedModesPhy2</b>: List of modes supported by Phy2.
  <ul>
    <li>Set with class:  \ref ns3::UanModesListValue</li>
    <li>Underlying type: \p UanModesList</li>
    <li>Initial value: 3|0|1|1|</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPowerPhy1</b>: Transmission output power in dB of Phy1.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 190</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPowerPhy2</b>: Transmission output power in dB of Phy2.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 190</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RxError</b>: A packet was received unsuccessfuly.<br>%Callback signature: ns3::UanPhy::TracedCallback
</li>
<li><b>RxOk</b>: A packet was received successfully.<br>%Callback signature: ns3::UanPhy::TracedCallback
</li>
<li><b>Tx</b>: Packet transmission beginning.<br>%Callback signature: ns3::UanPhy::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::UanPhy</h3>
<ul>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 280 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyGen

<h3>Config Paths</h3>

ns3::UanPhyGen is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CcaThreshold</b>: Aggregate energy of incoming signals to move to CCA Busy state dB.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PerModel</b>: Functor to calculate PER based on SINR and TxMode.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanPhyPer></li>
    <li>Initial value: ns3::UanPhyPerGenDefault</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RxThreshold</b>: Required SNR for signal acquisition in dB.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SinrModel</b>: Functor to calculate SINR based on pkt arrivals and modes.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanPhyCalcSinr></li>
    <li>Initial value: ns3::UanPhyCalcSinrDefault</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SupportedModes</b>: List of modes supported by this PHY.
  <ul>
    <li>Set with class:  \ref ns3::UanModesListValue</li>
    <li>Underlying type: \p UanModesList</li>
    <li>Initial value: 3|0|1|1|</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPower</b>: Transmission output power in dB.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 190</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RxError</b>: A packet was received unsuccessfuly.<br>%Callback signature: ns3::UanPhy::TracedCallback
</li>
<li><b>RxOk</b>: A packet was received successfully.<br>%Callback signature: ns3::UanPhy::TracedCallback
</li>
<li><b>Tx</b>: Packet transmission beginning.<br>%Callback signature: ns3::UanPhy::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::UanPhy</h3>
<ul>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 544 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyPer

<h3>Config Paths</h3>

ns3::UanPhyPer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy1"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy2"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/PerModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyPerCommonModes

<h3>Config Paths</h3>

ns3::UanPhyPerCommonModes is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy1/$ns3::UanPhyPerCommonModes"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy2/$ns3::UanPhyPerCommonModes"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/PerModel/$ns3::UanPhyPerCommonModes"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyPerGenDefault

<h3>Config Paths</h3>

ns3::UanPhyPerGenDefault is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy1/$ns3::UanPhyPerGenDefault"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy2/$ns3::UanPhyPerGenDefault"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/PerModel/$ns3::UanPhyPerGenDefault"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Threshold</b>: SINR cutoff for good packet reception.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyPerUmodem

<h3>Config Paths</h3>

ns3::UanPhyPerUmodem is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy1/$ns3::UanPhyPerUmodem"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy2/$ns3::UanPhyPerUmodem"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/PerModel/$ns3::UanPhyPerUmodem"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPropModel

<h3>Config Paths</h3>

ns3::UanPropModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel/PropagationModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel/PropagationModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::UanChannel/PropagationModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::UanChannel/PropagationModel"</li>
<li>"/ChannelList/[i]/$ns3::UanChannel/PropagationModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPropModelIdeal

<h3>Config Paths</h3>

ns3::UanPropModelIdeal is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel/PropagationModel/$ns3::UanPropModelIdeal"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelIdeal"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelIdeal"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelIdeal"</li>
<li>"/ChannelList/[i]/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelIdeal"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPropModelThorp

<h3>Config Paths</h3>

ns3::UanPropModelThorp is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel/PropagationModel/$ns3::UanPropModelThorp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelThorp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelThorp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelThorp"</li>
<li>"/ChannelList/[i]/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelThorp"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>SpreadCoef</b>: Spreading coefficient used in calculation of Thorp's approximation.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanTransducer

<h3>Config Paths</h3>

ns3::UanTransducer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Transducer"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanTransducerHd

<h3>Config Paths</h3>

ns3::UanTransducerHd is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Transducer/$ns3::UanTransducerHd"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>RxGainDb</b>: Gain in Db added to incoming signal at receiver.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ucd

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpClient

<h3>Config Paths</h3>

ns3::UdpClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::UdpClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Interval</b>: The time to wait between packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send (zero means infinite)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketSize</b>: Size of packets generated. The minimum packet size is 12 bytes which is the size of the header carrying the sequence number and the time stamp.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 12:65507</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RemotePort</b>: The destination port of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is created and sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxWithAddresses</b>: A new packet is created and sent<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 272 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpEchoClient

<h3>Config Paths</h3>

ns3::UdpEchoClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::UdpEchoClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Interval</b>: The time to wait between packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send (zero means infinite)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PacketSize</b>: Size of echo data in outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RemotePort</b>: The destination port of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxWithAddresses</b>: A packet has been received<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxWithAddresses</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 296 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpEchoServer

<h3>Config Paths</h3>

ns3::UdpEchoServer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::UdpEchoServer"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Port</b>: Port on which we listen for incoming packets.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 9</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxWithAddresses</b>: A packet has been received<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpL4Protocol

<h3>Config Paths</h3>

ns3::UdpL4Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::UdpL4Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>SocketList</b>: A container of sockets associated to this protocol. The underlying type is an unordered map, the attribute name is kept for backward compatibility.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UdpSocketImpl></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::IpL4Protocol</h3>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:255</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpServer

<h3>Config Paths</h3>

ns3::UdpServer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::UdpServer"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>PacketWindowSize</b>: The size of the window used to compute the packet loss. This value should be a multiple of 8.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 8:256</li>
    <li>Initial value: 32</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Port</b>: Port on which we listen for incoming packets.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxWithAddresses</b>: A packet has been received<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 208 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpSocket

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>IpMulticastIf</b>: interface index for outgoing multicast on this socket; -1 indicates to use default interface
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t -2147483648:2147483647</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IpMulticastLoop</b>: whether outgoing multicast sent also to loopback interface
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IpMulticastTtl</b>: socket-specific TTL for multicast IP packets (if non-zero)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IpTtl</b>: socket-specific TTL for unicast IP packets (if non-zero)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MtuDiscover</b>: If enabled, every outgoing ip packet will have the DF flag set.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RcvBufSize</b>: UdpSocket maximum receive buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpSocketFactory

<h3>Config Paths</h3>

ns3::UdpSocketFactory is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::UdpSocketFactory"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpSocketImpl

<h3>Config Paths</h3>

ns3::UdpSocketImpl is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::UdpL4Protocol/SocketList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>IcmpCallback</b>: Callback invoked whenever an icmp error is received on this socket.
  <ul>
    <li>Set with class:  \ref ns3::CallbackValue</li>
    <li>Underlying type: \p Callback</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IcmpCallback6</b>: Callback invoked whenever an icmpv6 error is received on this socket.
  <ul>
    <li>Set with class:  \ref ns3::CallbackValue</li>
    <li>Underlying type: \p Callback</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::UdpSocket</h3>
<ul>
<li><b>IpMulticastIf</b>: interface index for outgoing multicast on this socket; -1 indicates to use default interface
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t -2147483648:2147483647</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IpMulticastLoop</b>: whether outgoing multicast sent also to loopback interface
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IpMulticastTtl</b>: socket-specific TTL for multicast IP packets (if non-zero)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IpTtl</b>: socket-specific TTL for unicast IP packets (if non-zero)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MtuDiscover</b>: If enabled, every outgoing ip packet will have the DF flag set.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RcvBufSize</b>: UdpSocket maximum receive buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Drop UDP packet due to receive buffer overflow<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 360 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpTraceClient

<h3>Config Paths</h3>

ns3::UdpTraceClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::UdpTraceClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxPacketSize</b>: The maximum size of a packet (including the SeqTsHeader, 12 bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::AddressValue</li>
    <li>Underlying type: \p Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RemotePort</b>: The destination port of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TraceFilename</b>: Name of file to load a trace from. By default, uses a hardcoded trace.
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: ""</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>TraceLoop</b>: Loops through the trace file, starting again once it is over.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UeManager

<h3>Config Paths</h3>

ns3::UeManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrNetDevice/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NrGnbNetDevice/LteEnbRrc/UeMap/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>C-RNTI</b>: Cell Radio Network Temporary Identifier
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>DataRadioBearerMap</b>: List of UE DataRadioBearerInfo by DRBID.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteDataRadioBearerInfo></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Srb0</b>: SignalingRadioBearerInfo for SRB0
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteSignalingRadioBearerInfo></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Srb1</b>: SignalingRadioBearerInfo for SRB1
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteSignalingRadioBearerInfo></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>DrbCreated</b>: trace fired after DRB is created<br>%Callback signature: ns3::UeManager::ImsiCidRntiLcIdTracedCallback
</li>
<li><b>StateTransition</b>: fired upon every UE state transition seen by the UeManager at the eNB RRC<br>%Callback signature: ns3::UeManager::StateTracedCallback
</li>
</ul>
<b>Size</b> of this type is 408 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Uinteger16Probe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The uint16_t that serves as output for this probe<br>%Callback signature: ns3::TracedValueCallback::Uint16
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Uinteger32Probe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The uint32_t that serves as output for this probe<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Uinteger8Probe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref ns3::StringValue</li>
    <li>Underlying type: \p std::string</li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The uint8_t that serves as output for this probe<br>%Callback signature: ns3::TracedValueCallback::Uint8
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UlMap

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UniformDiscPositionAllocator

<h3>Config Paths</h3>

ns3::UniformDiscPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::UniformDiscPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>X</b>: The x coordinate of the center of the  disc.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Y</b>: The y coordinate of the center of the  disc.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Z</b>: The z coordinate of all the positions in the disc.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>rho</b>: The radius of the disc
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UniformPlanarArray

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>AntennaHorizontalSpacing</b>: Horizontal spacing between antenna elements, in multiples of wave length
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>AntennaVerticalSpacing</b>: Vertical spacing between antenna elements, in multiples of wave length
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BearingAngle</b>: The bearing angle in radians
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -3.14159:3.14159</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>DowntiltAngle</b>: The downtilt angle in radians
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -3.14159:3.14159</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NumColumns</b>: Horizontal size of the array
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NumRows</b>: Vertical size of the array
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PolSlantAngle</b>: The polarization slant angle in radians
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -3.14159:3.14159</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::PhasedArrayModel</h3>
<ul>
<li><b>AntennaElement</b>: A pointer to the antenna element used by the phased array
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::AntennaModel></li>
    <li>Initial value: 0x60a9e4d197c0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UniformRandomVariable

<h3>Config Paths</h3>

ns3::UniformRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::ApWifiMac/BeaconJitter"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac/ProbeDelay/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/ForwardingDelay/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice/MeshUnderJitter/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::Radvd/AdvertisementJitter"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::aodv::RoutingProtocol/UniformRv"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::UniformRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Max</b>: The upper bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Min</b>: The lower bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UplinkScheduler

<h3>Config Paths</h3>

ns3::UplinkScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/UplinkScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/UplinkScheduler"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UplinkSchedulerMBQoS

<h3>Config Paths</h3>

ns3::UplinkSchedulerMBQoS is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerMBQoS"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerMBQoS"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>WindowInterval</b>: The time to wait to reset window
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UplinkSchedulerRtps

<h3>Config Paths</h3>

ns3::UplinkSchedulerRtps is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerRtps"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerRtps"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UplinkSchedulerSimple

<h3>Config Paths</h3>

ns3::UplinkSchedulerSimple is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerSimple"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerSimple"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::V4Ping

<h3>Config Paths</h3>

ns3::V4Ping is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::V4Ping"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Interval</b>: Wait  interval  seconds between sending each packet.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Remote</b>: The address of the machine we want to ping.
  <ul>
    <li>Set with class:  \ref ns3::Ipv4AddressValue</li>
    <li>Underlying type: \p Ipv4Address</li>
    <li>Initial value: 102.102.102.102</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Size</b>: The number of data bytes to be sent, real packet will be 8 (ICMP) + 20 (IP) bytes longer.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 16:4294967295</li>
    <li>Initial value: 56</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Verbose</b>: Produce usual output.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rtt</b>: The rtt calculated by the ping.<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 512 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::V4TraceRoute

<h3>Config Paths</h3>

ns3::V4TraceRoute is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::V4TraceRoute"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Interval</b>: Wait interval between sent packets.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxHop</b>: The maximum number of hops to trace.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 30</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ProbeNum</b>: The number of packets send to each hop.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Remote</b>: The address of the machine we want to trace.
  <ul>
    <li>Set with class:  \ref ns3::Ipv4AddressValue</li>
    <li>Underlying type: \p Ipv4Address</li>
    <li>Initial value: 102.102.102.102</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Size</b>: The number of data bytes to be sent, real packet will be 8 (ICMP) + 20 (IP) bytes longer.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 56</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Timeout</b>: The waiting time for a route response before a timeout.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Verbose</b>: Produce usual output.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1032 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::VhtConfiguration

<h3>Config Paths</h3>

ns3::VhtConfiguration is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/VhtConfiguration"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>SecondaryCcaSensitivityThresholds</b>: Tuple {threshold for 20MHz PPDUs, threshold for 40MHz PPDUs, threshold for 80MHz PPDUs} describing the CCA sensitivity thresholds for PPDUs that do not occupy the primary channel. The power of a received PPDU that does not occupy the primary channel should be higher than the threshold (dBm) associated to the PPDU bandwidth to allow the PHY layer to declare CCA BUSY state.
  <ul>
    <li>Set with class:  \ref ns3::TupleValue</li>
    <li>Initial value: {-72.0, -72.0, -69.0}</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Support160MHzOperation</b>: Whether or not 160 MHz operation is to be supported.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::VhtFrameExchangeManager

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QosFrameExchangeManager</h3>
<ul>
<li><b>PifsRecovery</b>: Perform a PIFS recovery as a response to transmission failure within a TXOP
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SetQueueSize</b>: Whether to set the Queue Size subfield of the QoS Control field of QoS data frames sent by non-AP stations
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1008 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::VirtualNetDevice

<h3>Config Paths</h3>

ns3::VirtualNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::VirtualNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1500</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 256 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WallClockSynchronizer

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WaveformGenerator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DutyCycle</b>: the duty cycle of the generator, i.e., the fraction of the period that is occupied by a signal
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Period</b>: the period (=1/frequency)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+09ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TxEnd</b>: Trace fired when a previously started transmission is finished<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxStart</b>: Trace fired when a new transmission is started<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WaypointMobilityModel

<h3>Config Paths</h3>

ns3::WaypointMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::WaypointMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>InitialPositionIsWaypoint</b>: Calling SetPosition with no waypoints creates a waypoint.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>LazyNotify</b>: Only call NotifyCourseChange when position is calculated.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>NextWaypoint</b>: The next waypoint used to determine position.
  <ul>
    <li>Set with class:  \ref ns3::WaypointValue</li>
    <li>Underlying type: \p Waypoint</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>WaypointsLeft</b>: The number of waypoints remaining.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref ns3::Vector3DValue</li>
    <li>Underlying type: \p Vector3D</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 232 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WeibullRandomVariable

<h3>Config Paths</h3>

ns3::WeibullRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac/ProbeDelay/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/ForwardingDelay/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice/MeshUnderJitter/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::WeibullRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::WeibullRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Scale</b>: The scale parameter for the Weibull distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Shape</b>: The shape parameter for the Weibull distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiAckManager

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiAssocManager

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>AllowedLinks</b>: Only Beacon and Probe Response frames received on a link belonging to the given set are processed. An empty set is equivalent to the set of all links.
  <ul>
    <li>Set with class:  \ref ns3::AttributeContainerValue<N3ns313UintegerValueE, NSt7__cxx114listIN3ns33PtrINS1_13UintegerValueEEESaIS4_EEE></li>
    <li>Underlying type: \p ns3::Ptr<N3ns313UintegerValueE></li>
    <li>Initial value: </li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 296 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiBandwidthFilter

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiDefaultAckManager

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>BaThreshold</b>: Immediate acknowledgment is requested upon transmission of a frame whose sequence number is distant at least BaThreshold multiplied by the transmit window size from the starting sequence number of the transmit window. Set to zero to request a response for every transmitted frame.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>DlMuAckSequenceType</b>: Type of the acknowledgment sequence for DL MU PPDUs.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p DL_MU_BAR_BA_SEQUENCE|DL_MU_TF_MU_BAR|DL_MU_AGGREGATE_TF</li>
    <li>Initial value: DL_MU_BAR_BA_SEQUENCE</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxBlockAckMcs</b>: The MCS used to send a BlockAck in a TB PPDU is the minimum between the MCS used for the PSDU sent in the preceding DL MU PPDU and the value of this attribute.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:11</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>UseExplicitBar</b>: Specify whether to send Block Ack Requests (if true) or use Implicit Block Ack Request ack policy (if false).
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiDefaultAssocManager

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ChannelSwitchTimeout</b>: After requesting a channel switch on a link to setup that link, wait at most this amount of time. If a channel switch is not notified within this amount of time, we give up setting up that link.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +0ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+06ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::WifiAssocManager</h3>
<ul>
<li><b>AllowedLinks</b>: Only Beacon and Probe Response frames received on a link belonging to the given set are processed. An empty set is equivalent to the set of all links.
  <ul>
    <li>Set with class:  \ref ns3::AttributeContainerValue<N3ns313UintegerValueE, NSt7__cxx114listIN3ns33PtrINS1_13UintegerValueEEESaIS4_EEE></li>
    <li>Underlying type: \p ns3::Ptr<N3ns313UintegerValueE></li>
    <li>Initial value: </li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 376 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiDefaultProtectionManager

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>EnableMuRts</b>: If enabled, always protect a DL/UL MU frame exchange with MU-RTS/CTS.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiMac

<h3>Config Paths</h3>

ns3::WifiMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BE_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BE_BlockAckThreshold</b>: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BE_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BE access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BE_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BE access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BE_Txop</b>: Queue that manages packets belonging to AC_BE access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>BK_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BK_BlockAckThreshold</b>: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>BK_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BK access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BK_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BK access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BK_Txop</b>: Queue that manages packets belonging to AC_BK access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>CtsToSelfSupported</b>: Use CTS to Self when using a rate that is not in the basic rate set.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>QosSupported</b>: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShortSlotTimeSupported</b>: Whether or not short slot time is supported (only used by ERP APs or STAs).
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Ssid</b>: The ssid we want to belong to.
  <ul>
    <li>Set with class:  \ref ns3::SsidValue</li>
    <li>Underlying type: \p Ssid</li>
    <li>Initial value: ssid=default</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Txop</b>: The Txop object.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Txop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>VI_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VI_BlockAckThreshold</b>: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VI_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VI access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VI_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VI access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VI_Txop</b>: Queue that manages packets belonging to AC_VI access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>VO_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VO_BlockAckThreshold</b>: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>VO_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VO access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:15523200</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VO_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VO access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11398</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>VO_Txop</b>: Queue that manages packets belonging to AC_VO access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>AckedMpdu</b>: An MPDU that was successfully acknowledged, via either a Normal Ack or a Block Ack.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>DroppedMpdu</b>: An MPDU that was dropped for the given reason (see WifiMacDropReason).<br>%Callback signature: ns3::WifiMac::DroppedMpduCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: A packet has been dropped in the MAC layer before being queued for transmission. This trace source is fired, e.g., when an AP's MAC receives from the upper layer a packet destined to a station that is not associated with the AP or a STA's MAC receives a packet from the upper layer while it is not associated with any AP.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MpduResponseTimeout</b>: An MPDU whose response was not received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason) and the TXVECTOR used to transmit the MPDU. This trace source is fired when a CTS is missing after an RTS, when all CTS frames are missing after an MU-RTS, or when a Normal Ack is missing after an MPDU or after a DL MU PPDU acknowledged in SU format.<br>%Callback signature: ns3::WifiMac::MpduResponseTimeoutCallback
</li>
<li><b>NAckedMpdu</b>: An MPDU that was negatively acknowledged via a Block Ack.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>PsduMapResponseTimeout</b>: A PSDU map for which not all the responses were received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason), the set of MAC addresses of the stations that did not respond and the total number of stations that had to respond. This trace source is fired when not all the addressed stations responded to an MU-BAR Trigger frame (either sent as a SU frame or aggregated to PSDUs in the DL MU PPDU), a Basic Trigger Frame or a BSRP Trigger Frame.<br>%Callback signature: ns3::WifiMac::PsduMapResponseTimeoutCallback
</li>
<li><b>PsduResponseTimeout</b>: A PSDU whose response was not received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason) and the TXVECTOR used to transmit the PSDU. This trace source is fired when a BlockAck is missing after an A-MPDU, a BlockAckReq (possibly in the context of the acknowledgment of a DL MU PPDU in SU format) or a TB PPDU (in the latter case the missing BlockAck is a Multi-STA BlockAck).<br>%Callback signature: ns3::WifiMac::PsduResponseTimeoutCallback
</li>
<li><b>TxErrHeader</b>: The header of unsuccessfuly transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
<li><b>TxOkHeader</b>: The header of successfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 752 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiMacHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiMacQueue

<h3>Config Paths</h3>

ns3::WifiMacQueue is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/Txop/Queue"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxDelay</b>: If a packet stays longer than this delay in the queue, it is dropped.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +5e+08ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref ns3::QueueSizeValue</li>
    <li>Underlying type: \p QueueSize</li>
    <li>Initial value: 500p</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Expired</b>: MPDU dropped because its lifetime expired.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::Queue<WifiMpdu,WifiMacQueueContainer></h3>
<ul>
<li><b>Dequeue</b>: Dequeue a packet from the queue.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue.<br>%Callback signature: ns3::WifiMpdu::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 464 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiMacQueueScheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiMacQueueSchedulerImpl

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 18446744073709551615 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiMacTrailer

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiNetDevice

<h3>Config Paths</h3>

ns3::WifiNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Channel</b>: The channel attached to this device
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Channel></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>EhtConfiguration</b>: The EhtConfiguration object.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::EhtConfiguration></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>HeConfiguration</b>: The HeConfiguration object.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::HeConfiguration></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>HtConfiguration</b>: The HtConfiguration object.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::HtConfiguration></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Mac</b>: The MAC layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiMac></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:2296</li>
    <li>Initial value: 2296</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Phy</b>: The PHY layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiPhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Phys</b>: The PHY layers attached to this device (11be multi-link devices only).
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiPhy></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>RemoteStationManager</b>: The station manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiRemoteStationManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RemoteStationManagers</b>: The remote station managers attached to this device (11be multi-link devices only).
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiRemoteStationManager></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>VhtConfiguration</b>: The VhtConfiguration object.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::VhtConfiguration></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 240 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiPhy

<h3>Config Paths</h3>

ns3::WifiPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Antennas</b>: The number of antennas on the device.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CcaEdThreshold</b>: The energy of all received signals should be higher than this threshold (dBm) in the primary channel to allow the PHY layer to declare CCA BUSY state.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -62</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CcaSensitivity</b>: The energy of a received wifi signal should be higher than this threshold (dBm) in the primary channel to allow the PHY layer to declare CCA BUSY state.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -82</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Channel</b>: The channel attached to this PHY
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Channel></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelNumber</b>: The channel number of the current operating channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:233</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelSettings</b>: Tuple {channel number, channel width (MHz), PHY band, primary20 index} describing the settings of the operating channel. The primary20 index is the index of the primary 20 MHz channel within the operating channel (0 indicates the 20 MHz subchannel with the lowest center frequency) and is only valid if the width of the operating channel is a multiple of 20 MHz. If the standard for this object has not been set yet, the value of this attribute is saved and will be used to set the operating channel when the standard is configured. If the PHY band is left unspecified, the default band for the configured standard is used. If the channel width and the channel number are both 0, the default channel width for the configured standard and band are used. If the channel number is 0, the default channel number for the configured standard, band and channel width is used.Note that the channel width can be left unspecified (0) if the channel number uniquely identify a frequency channel for the given standard and band.
  <ul>
    <li>Set with class:  \ref ns3::TupleValue</li>
    <li>Initial value: {0, 0, BAND_UNSPECIFIED, 0}</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>ChannelSwitchDelay</b>: Delay between two short frames transmitted on different frequencies.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +0ns:+9.22337e+18ns</li>
    <li>Initial value: +250000ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelWidth</b>: The width in MHz of the current operating channel (5, 10, 20, 22, 40, 80 or 160).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 5:160</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>FixedPhyBand</b>: If set to true, changing PHY band is prohibited after initialization.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FrameCaptureModel</b>: Ptr to an object that implements the frame capture model
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::FrameCaptureModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The center frequency (MHz) of the current operating channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>InterferenceHelper</b>: Ptr to an object that implements the interference helper
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::InterferenceHelper></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSupportedRxSpatialStreams</b>: The maximum number of supported RX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSupportedTxSpatialStreams</b>: The maximum number of supported TX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Pifs</b>: The duration of the PCF Interframe Space. NOTE that the default value is overwritten by the value defined by the standard; if you want to set this attribute, you have to do it after that the PHY object is initialized.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PostReceptionErrorModel</b>: An optional packet error model can be added to the receive packet process after any propagation-based (SNR-based) error models have been applied. Typically this is used to force specific packet drops, for testing purposes.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ErrorModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PowerDensityLimit</b>: The mean equivalent isotropically radiated power densitylimit (in dBm/MHz) set by regulators.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PreambleDetectionModel</b>: Ptr to an object that implements the preamble detection model
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PreambleDetectionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Primary20MHzIndex</b>: The index of the primary 20 MHz channel within the current operating channel (0 indicates the 20 MHz subchannel with the lowest center frequency).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:7</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>RxGain</b>: Reception gain (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RxNoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0 (usually 290 K)".
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>RxSensitivity</b>: The energy of a received signal should be higher than this threshold (dBm) for the PHY to detect the signal. This threshold refers to a width of 20 MHz and will be scaled to match the width of the received signal.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -101</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShortPlcpPreambleSupported</b>: Whether or not short PHY preamble is supported.This parameter is only valuable for 802.11b STAs and APs.Note: 802.11g APs and STAs always support short PHY preamble.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Sifs</b>: The duration of the Short Interframe Space. NOTE that the default value is overwritten by the value defined by the standard; if you want to set this attribute, you have to do it after that the PHY object is initialized.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Slot</b>: The duration of a slot. NOTE that the default value is overwritten by the value defined by the standard; if you want to set this attribute, you have to do it after that the PHY object is initialized.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>State</b>: The state of the PHY layer.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiPhyStateHelper></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxGain</b>: Transmission gain (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPowerEnd</b>: Maximum available transmission level (dBm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 16.0206</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPowerLevels</b>: Number of transmission power levels available between TxPowerStart and TxPowerEnd included.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPowerStart</b>: Minimum available transmission level (dBm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 16.0206</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>MonitorSnifferRx</b>: Trace source simulating a wifi device in monitor mode sniffing all received frames<br>%Callback signature: ns3::WifiPhy::MonitorSnifferRxTracedCallback
</li>
<li><b>MonitorSnifferTx</b>: Trace source simulating the capability of a wifi device in monitor mode to sniff all frames being transmitted<br>%Callback signature: ns3::WifiPhy::MonitorSnifferTxTracedCallback
</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device<br>%Callback signature: ns3::WifiPhy::PhyRxBeginTracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxPayloadBegin</b>: Trace source indicating the reception of the payload of a PPDU has begun<br>%Callback signature: ns3::WifiPhy::PhyRxPayloadBeginTracedCallback
</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium<br>%Callback signature: ns3::WifiPhy::PhyTxBeginTracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxPsduBegin</b>: Trace source indicating a PSDU has begun transmitting over the channel medium<br>%Callback signature: ns3::WifiPhy::PsduTxBeginCallback
</li>
</ul>
<b>Size</b> of this type is 744 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiPhyStateHelper

<h3>Config Paths</h3>

ns3::WifiPhyStateHelper is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/State"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/State"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>RxError</b>: A packet has been received unsuccessfuly.<br>%Callback signature: ns3::WifiPhyStateHelper::RxEndErrorTracedCallback
</li>
<li><b>RxOk</b>: A packet has been received successfully.<br>%Callback signature: ns3::WifiPhyStateHelper::RxOkTracedCallback
</li>
<li><b>State</b>: The state of the PHY layer<br>%Callback signature: ns3::WifiPhyStateHelper::StateTracedCallback
</li>
<li><b>Tx</b>: Packet transmission is starting.<br>%Callback signature: ns3::WifiPhyStateHelper::TxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 256 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiProtectionManager

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiRadioEnergyModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>CcaBusyCurrentA</b>: The default radio CCA Busy State current in Ampere.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.273</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>IdleCurrentA</b>: The default radio Idle current in Ampere.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.273</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RxCurrentA</b>: The radio RX current in Ampere.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.313</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SleepCurrentA</b>: The radio Sleep current in Ampere.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.033</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>SwitchingCurrentA</b>: The default radio Channel Switch current in Ampere.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.273</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxCurrentA</b>: The radio TX current in Ampere.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.38</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxCurrentModel</b>: A pointer to the attached TX current model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiTxCurrentModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TotalEnergyConsumption</b>: Total energy consumption of the radio device.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiRemoteStationManager

<h3>Config Paths</h3>

ns3::WifiRemoteStationManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManagers/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Rts-Cts|Cts-To-Self</li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref ns3::WifiModeValue</li>
    <li>Underlying type: \p WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 384 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiSpectrumPhyInterface

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiTxCurrentModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WimaxChannel

<h3>Config Paths</h3>

ns3::WimaxChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::WimaxChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::WimaxChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::WimaxChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/Phy/Channel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/Channel"</li>
<li>"/ChannelList/[i]/$ns3::WimaxChannel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WimaxConnection

<h3>Config Paths</h3>

ns3::WimaxConnection is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/InitialRangingConnection"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/BroadcastConnection"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/BasicConnection"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/PrimaryConnection"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/BasicConnection"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/PrimaryConnection"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>TxQueue</b>: Transmit queue
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxMacQueue></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>Type</b>: Connection type
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: \p Broadcast|InitialRanging|Basic|Primary|Transport|Multicast|Padding</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WimaxMacQueue

<h3>Config Paths</h3>

ns3::WimaxMacQueue is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/InitialRangingConnection/TxQueue"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/BroadcastConnection/TxQueue"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/BasicConnection/TxQueue"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/PrimaryConnection/TxQueue"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/BasicConnection/TxQueue"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/PrimaryConnection/TxQueue"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxSize</b>: Maximum size
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Dequeue</b>: Dequeue trace<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Drop</b>: Drop trace<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Enqueue</b>: Enqueue trace<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WimaxMacToMacHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WimaxNetDevice

<h3>Config Paths</h3>

ns3::WimaxNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BandwidthManager</b>: The bandwidth manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BandwidthManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BroadcastConnection</b>: Broadcast connection
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxConnection></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>BurstProfileManager</b>: The burst profile manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BurstProfileManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Channel</b>: The channel attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxChannel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ConnectionManager</b>: The connection manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ConnectionManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>InitialRangingConnection</b>: Initial ranging connection
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxConnection></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:1500</li>
    <li>Initial value: 1400</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Phy</b>: The PHY layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxPhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RTG</b>: receive/transmit transition gap.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:120</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TTG</b>: transmit/receive transition gap.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:120</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: Receive trace<br>%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback
</li>
<li><b>Tx</b>: Transmit trace<br>%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 408 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WimaxPhy

<h3>Config Paths</h3>

ns3::WimaxPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/Phy"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bandwidth</b>: The channel bandwidth in Hz.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 5000000:30000000</li>
    <li>Initial value: 10000000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Channel</b>: Wimax channel
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxChannel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FrameDuration</b>: The frame duration in seconds.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +1e+07ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The central frequency in KHz.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1000000:11000000</li>
    <li>Initial value: 5000000</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::XrTrafficMixerHelper

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::YansErrorRateModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::YansWifiChannel

<h3>Config Paths</h3>

ns3::YansWifiChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>PropagationDelayModel</b>: A pointer to the propagation delay model attached to this channel.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PropagationDelayModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PropagationLossModel</b>: A pointer to the propagation loss model attached to this channel.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PropagationLossModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::YansWifiPhy

<h3>Config Paths</h3>

ns3::YansWifiPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/$ns3::YansWifiPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/$ns3::YansWifiPhy"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::WifiPhy</h3>
<ul>
<li><b>Antennas</b>: The number of antennas on the device.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CcaEdThreshold</b>: The energy of all received signals should be higher than this threshold (dBm) in the primary channel to allow the PHY layer to declare CCA BUSY state.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -62</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>CcaSensitivity</b>: The energy of a received wifi signal should be higher than this threshold (dBm) in the primary channel to allow the PHY layer to declare CCA BUSY state.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -82</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Channel</b>: The channel attached to this PHY
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Channel></li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelNumber</b>: The channel number of the current operating channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:233</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelSettings</b>: Tuple {channel number, channel width (MHz), PHY band, primary20 index} describing the settings of the operating channel. The primary20 index is the index of the primary 20 MHz channel within the operating channel (0 indicates the 20 MHz subchannel with the lowest center frequency) and is only valid if the width of the operating channel is a multiple of 20 MHz. If the standard for this object has not been set yet, the value of this attribute is saved and will be used to set the operating channel when the standard is configured. If the PHY band is left unspecified, the default band for the configured standard is used. If the channel width and the channel number are both 0, the default channel width for the configured standard and band are used. If the channel number is 0, the default channel number for the configured standard, band and channel width is used.Note that the channel width can be left unspecified (0) if the channel number uniquely identify a frequency channel for the given standard and band.
  <ul>
    <li>Set with class:  \ref ns3::TupleValue</li>
    <li>Initial value: {0, 0, BAND_UNSPECIFIED, 0}</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>ChannelSwitchDelay</b>: Delay between two short frames transmitted on different frequencies.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +0ns:+9.22337e+18ns</li>
    <li>Initial value: +250000ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ChannelWidth</b>: The width in MHz of the current operating channel (5, 10, 20, 22, 40, 80 or 160).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 5:160</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>FixedPhyBand</b>: If set to true, changing PHY band is prohibited after initialization.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>FrameCaptureModel</b>: Ptr to an object that implements the frame capture model
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::FrameCaptureModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Frequency</b>: The center frequency (MHz) of the current operating channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>InterferenceHelper</b>: Ptr to an object that implements the interference helper
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::InterferenceHelper></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSupportedRxSpatialStreams</b>: The maximum number of supported RX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>MaxSupportedTxSpatialStreams</b>: The maximum number of supported TX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Pifs</b>: The duration of the PCF Interframe Space. NOTE that the default value is overwritten by the value defined by the standard; if you want to set this attribute, you have to do it after that the PHY object is initialized.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PostReceptionErrorModel</b>: An optional packet error model can be added to the receive packet process after any propagation-based (SNR-based) error models have been applied. Typically this is used to force specific packet drops, for testing purposes.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ErrorModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PowerDensityLimit</b>: The mean equivalent isotropically radiated power densitylimit (in dBm/MHz) set by regulators.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>PreambleDetectionModel</b>: Ptr to an object that implements the preamble detection model
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PreambleDetectionModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Primary20MHzIndex</b>: The index of the primary 20 MHz channel within the current operating channel (0 indicates the 20 MHz subchannel with the lowest center frequency).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:7</li>
    <li>Flags: <span class="mlabel">read</span></li>
  </ul>
<li><b>RxGain</b>: Reception gain (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>RxNoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0 (usually 290 K)".
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span></li>
  </ul>
<li><b>RxSensitivity</b>: The energy of a received signal should be higher than this threshold (dBm) for the PHY to detect the signal. This threshold refers to a width of 20 MHz and will be scaled to match the width of the received signal.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -101</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>ShortPlcpPreambleSupported</b>: Whether or not short PHY preamble is supported.This parameter is only valuable for 802.11b STAs and APs.Note: 802.11g APs and STAs always support short PHY preamble.
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Sifs</b>: The duration of the Short Interframe Space. NOTE that the default value is overwritten by the value defined by the standard; if you want to set this attribute, you have to do it after that the PHY object is initialized.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Slot</b>: The duration of a slot. NOTE that the default value is overwritten by the value defined by the standard; if you want to set this attribute, you have to do it after that the PHY object is initialized.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type: \p Time +9.22337e+18ns:+9.22337e+18ns</li>
    <li>Initial value: +0ns</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>State</b>: The state of the PHY layer.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiPhyStateHelper></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxGain</b>: Transmission gain (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPowerEnd</b>: Maximum available transmission level (dBm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 16.0206</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPowerLevels</b>: Number of transmission power levels available between TxPowerStart and TxPowerEnd included.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>TxPowerStart</b>: Minimum available transmission level (dBm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 16.0206</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::WifiPhy</h3>
<ul>
<li><b>MonitorSnifferRx</b>: Trace source simulating a wifi device in monitor mode sniffing all received frames<br>%Callback signature: ns3::WifiPhy::MonitorSnifferRxTracedCallback
</li>
<li><b>MonitorSnifferTx</b>: Trace source simulating the capability of a wifi device in monitor mode to sniff all frames being transmitted<br>%Callback signature: ns3::WifiPhy::MonitorSnifferTxTracedCallback
</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device<br>%Callback signature: ns3::WifiPhy::PhyRxBeginTracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxPayloadBegin</b>: Trace source indicating the reception of the payload of a PPDU has begun<br>%Callback signature: ns3::WifiPhy::PhyRxPayloadBeginTracedCallback
</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium<br>%Callback signature: ns3::WifiPhy::PhyTxBeginTracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxPsduBegin</b>: Trace source indicating a PSDU has begun transmitting over the channel medium<br>%Callback signature: ns3::WifiPhy::PsduTxBeginCallback
</li>
</ul>
<b>Size</b> of this type is 752 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ZetaRandomVariable

<h3>Config Paths</h3>

ns3::ZetaRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac/ProbeDelay/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/ForwardingDelay/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice/MeshUnderJitter/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::ZetaRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZetaRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: The alpha value for the zeta distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.14</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ZipfRandomVariable

<h3>Config Paths</h3>

ns3::ZipfRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phys/[i]/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac/ProbeDelay/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy/PostReceptionErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/ForwardingDelay/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice/MeshUnderJitter/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Direction/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dOutdoorMobilityModel/Speed/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/RsRetransmissionJitter/$ns3::ZipfRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZipfRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: The alpha value for the Zipf distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>N</b>: The n value for the Zipf distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref ns3::BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct</span><span class="mlabel">write</span><span class="mlabel">read</span></li>
  </ul>
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!
\page TypeIdList All ns3::TypeId's

This is a list of all \ref ns3::TypeId's.
For more information see the \ref ns3::TypeId section of this API documentation and the %TypeId section in the Configuration and  %Attributes chapter of the Manual.

<ul>
  <li><b>ns3::A2A4RsrqHandoverAlgorithm</b></li>
  <li><b>ns3::A3RsrpHandoverAlgorithm</b></li>
  <li><b>ns3::AaashClient</b></li>
  <li><b>ns3::AarfcdWifiManager</b></li>
  <li><b>ns3::AarfWifiManager</b></li>
  <li><b>ns3::AcousticModemEnergyModel</b></li>
  <li><b>ns3::AdhocWifiMac</b></li>
  <li><b>ns3::AlohaNoackMacHeader</b></li>
  <li><b>ns3::AlohaNoackNetDevice</b></li>
  <li><b>ns3::AlwaysLosChannelConditionModel</b></li>
  <li><b>ns3::AmpduSubframeHeader</b></li>
  <li><b>ns3::AmpduTag</b></li>
  <li><b>ns3::AmrrWifiManager</b></li>
  <li><b>ns3::AmsduSubframeHeader</b></li>
  <li><b>ns3::AntennaModel</b></li>
  <li><b>ns3::aodv::DeferredRouteOutputTag</b></li>
  <li><b>ns3::aodv::RerrHeader</b></li>
  <li><b>ns3::aodv::RoutingProtocol</b></li>
  <li><b>ns3::aodv::RrepAckHeader</b></li>
  <li><b>ns3::aodv::RrepHeader</b></li>
  <li><b>ns3::aodv::RreqHeader</b></li>
  <li><b>ns3::aodv::TypeHeader</b></li>
  <li><b>ns3::AparfWifiManager</b></li>
  <li><b>ns3::Application</b></li>
  <li><b>ns3::ApplicationPacketProbe</b></li>
  <li><b>ns3::ApWifiMac</b></li>
  <li><b>ns3::ArfWifiManager</b></li>
  <li><b>ns3::ArpCache</b></li>
  <li><b>ns3::ArpHeader</b></li>
  <li><b>ns3::ArpL3Protocol</b></li>
  <li><b>ns3::Asn1Header</b></li>
  <li><b>ns3::AthstatsWifiTraceSink</b></li>
  <li><b>ns3::BandwidthManager</b></li>
  <li><b>ns3::BandwidthPartGnb</b></li>
  <li><b>ns3::BandwidthPartUe</b></li>
  <li><b>ns3::BandwidthRequestHeader</b></li>
  <li><b>ns3::BaseStationNetDevice</b></li>
  <li><b>ns3::BasicEnergyHarvester</b></li>
  <li><b>ns3::BasicEnergySource</b></li>
  <li><b>ns3::BeaconPayloadHeader</b></li>
  <li><b>ns3::BeamformingHelperBase</b></li>
  <li><b>ns3::BeamManager</b></li>
  <li><b>ns3::BinaryErrorModel</b></li>
  <li><b>ns3::BlockAckManager</b></li>
  <li><b>ns3::BooleanProbe</b></li>
  <li><b>ns3::BridgeChannel</b></li>
  <li><b>ns3::BridgeNetDevice</b></li>
  <li><b>ns3::BSLinkManager</b></li>
  <li><b>ns3::BSScheduler</b></li>
  <li><b>ns3::BSSchedulerRtps</b></li>
  <li><b>ns3::BSSchedulerSimple</b></li>
  <li><b>ns3::Building</b></li>
  <li><b>ns3::BuildingListPriv</b></li>
  <li><b>ns3::BuildingsChannelConditionModel</b></li>
  <li><b>ns3::BuildingsPropagationLossModel</b></li>
  <li><b>ns3::BulkSendApplication</b></li>
  <li><b>ns3::BurstErrorModel</b></li>
  <li><b>ns3::BurstProfileManager</b></li>
  <li><b>ns3::BwpManagerAlgorithm</b></li>
  <li><b>ns3::BwpManagerAlgorithmStatic</b></li>
  <li><b>ns3::BwpManagerGnb</b></li>
  <li><b>ns3::BwpManagerUe</b></li>
  <li><b>ns3::CalendarScheduler</b></li>
  <li><b>ns3::CaraWifiManager</b></li>
  <li><b>ns3::CcHelper</b></li>
  <li><b>ns3::CellScanBeamforming</b></li>
  <li><b>ns3::CellScanBeamformingAzimuthZenith</b></li>
  <li><b>ns3::Channel</b></li>
  <li><b>ns3::ChannelCondition</b></li>
  <li><b>ns3::ChannelConditionModel</b></li>
  <li><b>ns3::ChannelListPriv</b></li>
  <li><b>ns3::Chunk</b></li>
  <li><b>ns3::CobaltQueueDisc</b></li>
  <li><b>ns3::CoDelQueueDisc</b></li>
  <li><b>ns3::CommandPayloadHeader</b></li>
  <li><b>ns3::ComponentCarrier</b></li>
  <li><b>ns3::ComponentCarrierBaseStation</b></li>
  <li><b>ns3::ComponentCarrierEnb</b></li>
  <li><b>ns3::ComponentCarrierUe</b></li>
  <li><b>ns3::ConfigStore</b></li>
  <li><b>ns3::ConnectionManager</b></li>
  <li><b>ns3::ConstantAccelerationMobilityModel</b></li>
  <li><b>ns3::ConstantObssPdAlgorithm</b></li>
  <li><b>ns3::ConstantPositionMobilityModel</b></li>
  <li><b>ns3::ConstantRandomVariable</b></li>
  <li><b>ns3::ConstantRateWifiManager</b></li>
  <li><b>ns3::ConstantSpectrumPropagationLossModel</b></li>
  <li><b>ns3::ConstantSpeedPropagationDelayModel</b></li>
  <li><b>ns3::ConstantVelocityMobilityModel</b></li>
  <li><b>ns3::CosineAntennaModel</b></li>
  <li><b>ns3::Cost231PropagationLossModel</b></li>
  <li><b>ns3::CounterCalculator<uint32_t></b></li>
  <li><b>ns3::CqaFfMacScheduler</b></li>
  <li><b>ns3::CsmaChannel</b></li>
  <li><b>ns3::CsmaNetDevice</b></li>
  <li><b>ns3::CtrlBAckRequestHeader</b></li>
  <li><b>ns3::CtrlBAckResponseHeader</b></li>
  <li><b>ns3::CtrlTriggerHeader</b></li>
  <li><b>ns3::DashClient</b></li>
  <li><b>ns3::DashServer</b></li>
  <li><b>ns3::DataCollectionObject</b></li>
  <li><b>ns3::Dcd</b></li>
  <li><b>ns3::DefaultEmlsrManager</b></li>
  <li><b>ns3::DefaultSimulatorImpl</b></li>
  <li><b>ns3::DeterministicRandomVariable</b></li>
  <li><b>ns3::DeviceEnergyModel</b></li>
  <li><b>ns3::DeviceNameTag</b></li>
  <li><b>ns3::DhcpClient</b></li>
  <li><b>ns3::DhcpHeader</b></li>
  <li><b>ns3::DhcpServer</b></li>
  <li><b>ns3::DirectPathBeamforming</b></li>
  <li><b>ns3::DistanceBasedThreeGppSpectrumPropagationLossModel</b></li>
  <li><b>ns3::DlMap</b></li>
  <li><b>ns3::dot11s::AirtimeLinkMetricCalculator</b></li>
  <li><b>ns3::dot11s::HwmpProtocol</b></li>
  <li><b>ns3::dot11s::HwmpRtable</b></li>
  <li><b>ns3::dot11s::HwmpTag</b></li>
  <li><b>ns3::dot11s::PeerLink</b></li>
  <li><b>ns3::dot11s::PeerLinkCloseStart</b></li>
  <li><b>ns3::dot11s::PeerLinkConfirmStart</b></li>
  <li><b>ns3::dot11s::PeerLinkOpenStart</b></li>
  <li><b>ns3::dot11s::PeerManagementProtocol</b></li>
  <li><b>ns3::Dot11sStack</b></li>
  <li><b>ns3::DoubleProbe</b></li>
  <li><b>ns3::DropTailQueue<Packet></b></li>
  <li><b>ns3::DropTailQueue<QueueDiscItem></b></li>
  <li><b>ns3::DsaAck</b></li>
  <li><b>ns3::DsaReq</b></li>
  <li><b>ns3::DsaRsp</b></li>
  <li><b>ns3::dsdv::DsdvHeader</b></li>
  <li><b>ns3::dsdv::RoutingProtocol</b></li>
  <li><b>ns3::dsr::DsrFsHeader</b></li>
  <li><b>ns3::dsr::DsrGraReply</b></li>
  <li><b>ns3::dsr::DsrNetworkQueue</b></li>
  <li><b>ns3::dsr::DsrOptionAck</b></li>
  <li><b>ns3::dsr::DsrOptionAckHeader</b></li>
  <li><b>ns3::dsr::DsrOptionAckReq</b></li>
  <li><b>ns3::dsr::DsrOptionAckReqHeader</b></li>
  <li><b>ns3::dsr::DsrOptionHeader</b></li>
  <li><b>ns3::dsr::DsrOptionPad1</b></li>
  <li><b>ns3::dsr::DsrOptionPad1Header</b></li>
  <li><b>ns3::dsr::DsrOptionPadn</b></li>
  <li><b>ns3::dsr::DsrOptionPadnHeader</b></li>
  <li><b>ns3::dsr::DsrOptionRerr</b></li>
  <li><b>ns3::dsr::DsrOptionRerrHeader</b></li>
  <li><b>ns3::dsr::DsrOptionRerrUnreachHeader</b></li>
  <li><b>ns3::dsr::DsrOptionRerrUnsupportedHeader</b></li>
  <li><b>ns3::dsr::DsrOptionRrep</b></li>
  <li><b>ns3::dsr::DsrOptionRrepHeader</b></li>
  <li><b>ns3::dsr::DsrOptionRreq</b></li>
  <li><b>ns3::dsr::DsrOptionRreqHeader</b></li>
  <li><b>ns3::dsr::DsrOptions</b></li>
  <li><b>ns3::dsr::DsrOptionSR</b></li>
  <li><b>ns3::dsr::DsrOptionSRHeader</b></li>
  <li><b>ns3::dsr::DsrPassiveBuffer</b></li>
  <li><b>ns3::dsr::DsrRouteCache</b></li>
  <li><b>ns3::dsr::DsrRouting</b></li>
  <li><b>ns3::dsr::DsrRreqTable</b></li>
  <li><b>ns3::DsrRoutingHeader</b></li>
  <li><b>ns3::DynamicQueueLimits</b></li>
  <li><b>ns3::EhtConfiguration</b></li>
  <li><b>ns3::EhtFrameExchangeManager</b></li>
  <li><b>ns3::EmlsrManager</b></li>
  <li><b>ns3::EmpiricalRandomVariable</b></li>
  <li><b>ns3::EmuEpcHelper</b></li>
  <li><b>ns3::EnergyHarvester</b></li>
  <li><b>ns3::EnergyHarvesterContainer</b></li>
  <li><b>ns3::EnergySource</b></li>
  <li><b>ns3::EnergySourceContainer</b></li>
  <li><b>ns3::EpcHelper</b></li>
  <li><b>ns3::EpcMmeApplication</b></li>
  <li><b>ns3::EpcSgwApplication</b></li>
  <li><b>ns3::EpcUeNas</b></li>
  <li><b>ns3::EpcX2</b></li>
  <li><b>ns3::EpcX2HandoverCancelHeader</b></li>
  <li><b>ns3::EpcX2HandoverPreparationFailureHeader</b></li>
  <li><b>ns3::EpcX2HandoverRequestAckHeader</b></li>
  <li><b>ns3::EpcX2HandoverRequestHeader</b></li>
  <li><b>ns3::EpcX2Header</b></li>
  <li><b>ns3::EpcX2LoadInformationHeader</b></li>
  <li><b>ns3::EpcX2ResourceStatusUpdateHeader</b></li>
  <li><b>ns3::EpcX2SnStatusTransferHeader</b></li>
  <li><b>ns3::EpcX2UeContextReleaseHeader</b></li>
  <li><b>ns3::EpsBearer</b></li>
  <li><b>ns3::EpsBearerTag</b></li>
  <li><b>ns3::ErlangRandomVariable</b></li>
  <li><b>ns3::ErrorChannel</b></li>
  <li><b>ns3::ErrorModel</b></li>
  <li><b>ns3::ErrorRateModel</b></li>
  <li><b>ns3::EthernetHeader</b></li>
  <li><b>ns3::EthernetTrailer</b></li>
  <li><b>ns3::ExponentialRandomVariable</b></li>
  <li><b>ns3::FcfsWifiQueueScheduler</b></li>
  <li><b>ns3::FdashClient</b></li>
  <li><b>ns3::FdBetFfMacScheduler</b></li>
  <li><b>ns3::FdMtFfMacScheduler</b></li>
  <li><b>ns3::FdNetDevice</b></li>
  <li><b>ns3::FdTbfqFfMacScheduler</b></li>
  <li><b>ns3::FfMacScheduler</b></li>
  <li><b>ns3::FifoQueueDisc</b></li>
  <li><b>ns3::FileAggregator</b></li>
  <li><b>ns3::FixedRoomPositionAllocator</b></li>
  <li><b>ns3::FixedRssLossModel</b></li>
  <li><b>ns3::flame::FlameHeader</b></li>
  <li><b>ns3::flame::FlameProtocol</b></li>
  <li><b>ns3::flame::FlameRtable</b></li>
  <li><b>ns3::flame::FlameTag</b></li>
  <li><b>ns3::FlameStack</b></li>
  <li><b>ns3::FlowIdTag</b></li>
  <li><b>ns3::FlowMonitor</b></li>
  <li><b>ns3::FqCobaltFlow</b></li>
  <li><b>ns3::FqCobaltQueueDisc</b></li>
  <li><b>ns3::FqCoDelFlow</b></li>
  <li><b>ns3::FqCoDelQueueDisc</b></li>
  <li><b>ns3::FqPieFlow</b></li>
  <li><b>ns3::FqPieQueueDisc</b></li>
  <li><b>ns3::FragmentationSubheader</b></li>
  <li><b>ns3::FrameCaptureModel</b></li>
  <li><b>ns3::FrameExchangeManager</b></li>
  <li><b>ns3::FriisPropagationLossModel</b></li>
  <li><b>ns3::FriisSpectrumPropagationLossModel</b></li>
  <li><b>ns3::GammaRandomVariable</b></li>
  <li><b>ns3::GaussMarkovMobilityModel</b></li>
  <li><b>ns3::GenericBatteryModel</b></li>
  <li><b>ns3::GenericMacHeader</b></li>
  <li><b>ns3::GlobalRouter</b></li>
  <li><b>ns3::GnuplotAggregator</b></li>
  <li><b>ns3::GrantManagementSubheader</b></li>
  <li><b>ns3::GridBuildingAllocator</b></li>
  <li><b>ns3::GridPositionAllocator</b></li>
  <li><b>ns3::GtpcHeader</b></li>
  <li><b>ns3::GtpuHeader</b></li>
  <li><b>ns3::HalfDuplexIdealPhy</b></li>
  <li><b>ns3::Header</b></li>
  <li><b>ns3::HeapScheduler</b></li>
  <li><b>ns3::HeConfiguration</b></li>
  <li><b>ns3::HeFrameExchangeManager</b></li>
  <li><b>ns3::HierarchicalMobilityModel</b></li>
  <li><b>ns3::HtConfiguration</b></li>
  <li><b>ns3::HtFrameExchangeManager</b></li>
  <li><b>ns3::HTTPHeader</b></li>
  <li><b>ns3::HybridBuildingsPropagationLossModel</b></li>
  <li><b>ns3::Icmpv4DestinationUnreachable</b></li>
  <li><b>ns3::Icmpv4Echo</b></li>
  <li><b>ns3::Icmpv4Header</b></li>
  <li><b>ns3::Icmpv4L4Protocol</b></li>
  <li><b>ns3::Icmpv4TimeExceeded</b></li>
  <li><b>ns3::Icmpv6DestinationUnreachable</b></li>
  <li><b>ns3::Icmpv6Echo</b></li>
  <li><b>ns3::Icmpv6Header</b></li>
  <li><b>ns3::Icmpv6L4Protocol</b></li>
  <li><b>ns3::Icmpv6NA</b></li>
  <li><b>ns3::Icmpv6NS</b></li>
  <li><b>ns3::Icmpv6OptionHeader</b></li>
  <li><b>ns3::Icmpv6OptionLinkLayerAddress</b></li>
  <li><b>ns3::Icmpv6OptionMtu</b></li>
  <li><b>ns3::Icmpv6OptionPrefixInformation</b></li>
  <li><b>ns3::Icmpv6OptionRedirected</b></li>
  <li><b>ns3::Icmpv6ParameterError</b></li>
  <li><b>ns3::Icmpv6RA</b></li>
  <li><b>ns3::Icmpv6Redirection</b></li>
  <li><b>ns3::Icmpv6RS</b></li>
  <li><b>ns3::Icmpv6TimeExceeded</b></li>
  <li><b>ns3::Icmpv6TooBig</b></li>
  <li><b>ns3::IdealBeamformingAlgorithm</b></li>
  <li><b>ns3::IdealBeamformingHelper</b></li>
  <li><b>ns3::IdealWifiManager</b></li>
  <li><b>ns3::InetTopologyReader</b></li>
  <li><b>ns3::InterferenceHelper</b></li>
  <li><b>ns3::IpcsClassifier</b></li>
  <li><b>ns3::IpL4Protocol</b></li>
  <li><b>ns3::Ipv4</b></li>
  <li><b>ns3::Ipv4GlobalRouting</b></li>
  <li><b>ns3::Ipv4Header</b></li>
  <li><b>ns3::Ipv4Interface</b></li>
  <li><b>ns3::Ipv4L3Protocol</b></li>
  <li><b>ns3::Ipv4ListRouting</b></li>
  <li><b>ns3::Ipv4NixVectorRouting</b></li>
  <li><b>ns3::Ipv4PacketFilter</b></li>
  <li><b>ns3::Ipv4PacketProbe</b></li>
  <li><b>ns3::Ipv4RawSocketFactory</b></li>
  <li><b>ns3::Ipv4RawSocketImpl</b></li>
  <li><b>ns3::Ipv4RoutingProtocol</b></li>
  <li><b>ns3::Ipv4StaticRouting</b></li>
  <li><b>ns3::Ipv6</b></li>
  <li><b>ns3::Ipv6Extension</b></li>
  <li><b>ns3::Ipv6ExtensionAH</b></li>
  <li><b>ns3::Ipv6ExtensionAHHeader</b></li>
  <li><b>ns3::Ipv6ExtensionDemux</b></li>
  <li><b>ns3::Ipv6ExtensionDestination</b></li>
  <li><b>ns3::Ipv6ExtensionDestinationHeader</b></li>
  <li><b>ns3::Ipv6ExtensionESP</b></li>
  <li><b>ns3::Ipv6ExtensionESPHeader</b></li>
  <li><b>ns3::Ipv6ExtensionFragment</b></li>
  <li><b>ns3::Ipv6ExtensionFragmentHeader</b></li>
  <li><b>ns3::Ipv6ExtensionHeader</b></li>
  <li><b>ns3::Ipv6ExtensionHopByHop</b></li>
  <li><b>ns3::Ipv6ExtensionHopByHopHeader</b></li>
  <li><b>ns3::Ipv6ExtensionLooseRouting</b></li>
  <li><b>ns3::Ipv6ExtensionLooseRoutingHeader</b></li>
  <li><b>ns3::Ipv6ExtensionRouting</b></li>
  <li><b>ns3::Ipv6ExtensionRoutingDemux</b></li>
  <li><b>ns3::Ipv6ExtensionRoutingHeader</b></li>
  <li><b>ns3::Ipv6Header</b></li>
  <li><b>ns3::Ipv6Interface</b></li>
  <li><b>ns3::Ipv6L3Protocol</b></li>
  <li><b>ns3::Ipv6ListRouting</b></li>
  <li><b>ns3::Ipv6NixVectorRouting</b></li>
  <li><b>ns3::Ipv6Option</b></li>
  <li><b>ns3::Ipv6OptionDemux</b></li>
  <li><b>ns3::Ipv6OptionHeader</b></li>
  <li><b>ns3::Ipv6OptionJumbogram</b></li>
  <li><b>ns3::Ipv6OptionJumbogramHeader</b></li>
  <li><b>ns3::Ipv6OptionPad1</b></li>
  <li><b>ns3::Ipv6OptionPad1Header</b></li>
  <li><b>ns3::Ipv6OptionPadn</b></li>
  <li><b>ns3::Ipv6OptionPadnHeader</b></li>
  <li><b>ns3::Ipv6OptionRouterAlert</b></li>
  <li><b>ns3::Ipv6OptionRouterAlertHeader</b></li>
  <li><b>ns3::Ipv6PacketFilter</b></li>
  <li><b>ns3::Ipv6PacketProbe</b></li>
  <li><b>ns3::Ipv6PmtuCache</b></li>
  <li><b>ns3::Ipv6RawSocketFactory</b></li>
  <li><b>ns3::Ipv6RawSocketImpl</b></li>
  <li><b>ns3::Ipv6RoutingProtocol</b></li>
  <li><b>ns3::Ipv6StaticRouting</b></li>
  <li><b>ns3::IsotropicAntennaModel</b></li>
  <li><b>ns3::ItuR1238PropagationLossModel</b></li>
  <li><b>ns3::ItuR1411LosPropagationLossModel</b></li>
  <li><b>ns3::ItuR1411NlosOverRooftopPropagationLossModel</b></li>
  <li><b>ns3::JakesProcess</b></li>
  <li><b>ns3::JakesPropagationLossModel</b></li>
  <li><b>ns3::Kun2600MhzPropagationLossModel</b></li>
  <li><b>ns3::LenaErrorModel</b></li>
  <li><b>ns3::LiIonEnergySource</b></li>
  <li><b>ns3::LinearWifiTxCurrentModel</b></li>
  <li><b>ns3::ListErrorModel</b></li>
  <li><b>ns3::ListPositionAllocator</b></li>
  <li><b>ns3::ListScheduler</b></li>
  <li><b>ns3::LlcSnapHeader</b></li>
  <li><b>ns3::LogDistancePropagationLossModel</b></li>
  <li><b>ns3::LogNormalRandomVariable</b></li>
  <li><b>ns3::LoopbackNetDevice</b></li>
  <li><b>ns3::LrWpanCsmaCa</b></li>
  <li><b>ns3::LrWpanErrorModel</b></li>
  <li><b>ns3::LrWpanLqiTag</b></li>
  <li><b>ns3::LrWpanMac</b></li>
  <li><b>ns3::LrWpanMacHeader</b></li>
  <li><b>ns3::LrWpanMacTrailer</b></li>
  <li><b>ns3::LrWpanNetDevice</b></li>
  <li><b>ns3::LrWpanPhy</b></li>
  <li><b>ns3::LteAmc</b></li>
  <li><b>ns3::LteAnr</b></li>
  <li><b>ns3::LteDataRadioBearerInfo</b></li>
  <li><b>ns3::LteEnbComponentCarrierManager</b></li>
  <li><b>ns3::LteEnbMac</b></li>
  <li><b>ns3::LteEnbNetDevice</b></li>
  <li><b>ns3::LteEnbPhy</b></li>
  <li><b>ns3::LteEnbRrc</b></li>
  <li><b>ns3::LteEnbRrcProtocolIdeal</b></li>
  <li><b>ns3::LteEnbRrcProtocolReal</b></li>
  <li><b>ns3::LteFfrAlgorithm</b></li>
  <li><b>ns3::LteFfrDistributedAlgorithm</b></li>
  <li><b>ns3::LteFfrEnhancedAlgorithm</b></li>
  <li><b>ns3::LteFfrSoftAlgorithm</b></li>
  <li><b>ns3::LteFrHardAlgorithm</b></li>
  <li><b>ns3::LteFrNoOpAlgorithm</b></li>
  <li><b>ns3::LteFrSoftAlgorithm</b></li>
  <li><b>ns3::LteFrStrictAlgorithm</b></li>
  <li><b>ns3::LteHandoverAlgorithm</b></li>
  <li><b>ns3::LteHelper</b></li>
  <li><b>ns3::LteHexGridEnbTopologyHelper</b></li>
  <li><b>ns3::LteNetDevice</b></li>
  <li><b>ns3::LtePdcp</b></li>
  <li><b>ns3::LtePdcpHeader</b></li>
  <li><b>ns3::LtePhy</b></li>
  <li><b>ns3::LtePhyTag</b></li>
  <li><b>ns3::LteRadioBearerInfo</b></li>
  <li><b>ns3::LteRadioBearerTag</b></li>
  <li><b>ns3::LteRlc</b></li>
  <li><b>ns3::LteRlcAm</b></li>
  <li><b>ns3::LteRlcAmHeader</b></li>
  <li><b>ns3::LteRlcHeader</b></li>
  <li><b>ns3::LteRlcSduStatusTag</b></li>
  <li><b>ns3::LteRlcSm</b></li>
  <li><b>ns3::LteRlcTm</b></li>
  <li><b>ns3::LteRlcUm</b></li>
  <li><b>ns3::LteSignalingRadioBearerInfo</b></li>
  <li><b>ns3::LteSpectrumPhy</b></li>
  <li><b>ns3::LteStatsCalculator</b></li>
  <li><b>ns3::LteUeComponentCarrierManager</b></li>
  <li><b>ns3::LteUeMac</b></li>
  <li><b>ns3::LteUeNetDevice</b></li>
  <li><b>ns3::LteUePhy</b></li>
  <li><b>ns3::LteUePowerControl</b></li>
  <li><b>ns3::LteUeRrc</b></li>
  <li><b>ns3::LteUeRrcProtocolIdeal</b></li>
  <li><b>ns3::LteUeRrcProtocolReal</b></li>
  <li><b>ns3::MacHeaderType</b></li>
  <li><b>ns3::MacStatsCalculator</b></li>
  <li><b>ns3::ManagementMessageType</b></li>
  <li><b>ns3::MapScheduler</b></li>
  <li><b>ns3::MatrixPropagationLossModel</b></li>
  <li><b>ns3::MeshInformationElementVector</b></li>
  <li><b>ns3::MeshL2RoutingProtocol</b></li>
  <li><b>ns3::MeshPointDevice</b></li>
  <li><b>ns3::MeshStack</b></li>
  <li><b>ns3::MeshWifiInterfaceMac</b></li>
  <li><b>ns3::MgtAddBaRequestHeader</b></li>
  <li><b>ns3::MgtAddBaResponseHeader</b></li>
  <li><b>ns3::MgtAssocRequestHeader</b></li>
  <li><b>ns3::MgtAssocResponseHeader</b></li>
  <li><b>ns3::MgtBeaconHeader</b></li>
  <li><b>ns3::MgtDelBaHeader</b></li>
  <li><b>ns3::MgtEmlOperatingModeNotification</b></li>
  <li><b>ns3::MgtProbeRequestHeader</b></li>
  <li><b>ns3::MgtProbeResponseHeader</b></li>
  <li><b>ns3::MgtReassocRequestHeader</b></li>
  <li><b>ns3::MinstrelHtWifiManager</b></li>
  <li><b>ns3::MinstrelWifiManager</b></li>
  <li><b>ns3::MobilityBuildingInfo</b></li>
  <li><b>ns3::MobilityModel</b></li>
  <li><b>ns3::MpduAggregator</b></li>
  <li><b>ns3::MPEGHeader</b></li>
  <li><b>ns3::MqQueueDisc</b></li>
  <li><b>ns3::MsduAggregator</b></li>
  <li><b>ns3::MultiModelSpectrumChannel</b></li>
  <li><b>ns3::MultiUserScheduler</b></li>
  <li><b>ns3::MuSnrTag</b></li>
  <li><b>ns3::NakagamiPropagationLossModel</b></li>
  <li><b>ns3::NdiscCache</b></li>
  <li><b>ns3::NetDevice</b></li>
  <li><b>ns3::NetDeviceQueue</b></li>
  <li><b>ns3::NetDeviceQueueInterface</b></li>
  <li><b>ns3::NeverLosChannelConditionModel</b></li>
  <li><b>ns3::NeverLosVehicleChannelConditionModel</b></li>
  <li><b>ns3::NistErrorRateModel</b></li>
  <li><b>ns3::NoBackhaulEpcHelper</b></li>
  <li><b>ns3::Node</b></li>
  <li><b>ns3::NodeListPriv</b></li>
  <li><b>ns3::NonCommunicatingNetDevice</b></li>
  <li><b>ns3::NoOpComponentCarrierManager</b></li>
  <li><b>ns3::NoOpHandoverAlgorithm</b></li>
  <li><b>ns3::NormalRandomVariable</b></li>
  <li><b>ns3::NrAlwaysOnAccessManager</b></li>
  <li><b>ns3::NrAmc</b></li>
  <li><b>ns3::NrBearerStatsBase</b></li>
  <li><b>ns3::NrBearerStatsCalculator</b></li>
  <li><b>ns3::NrBearerStatsSimple</b></li>
  <li><b>ns3::NrChAccessManager</b></li>
  <li><b>ns3::NrEesmCc</b></li>
  <li><b>ns3::NrEesmCcT1</b></li>
  <li><b>ns3::NrEesmCcT2</b></li>
  <li><b>ns3::NrEesmErrorModel</b></li>
  <li><b>ns3::NrEesmIr</b></li>
  <li><b>ns3::NrEesmIrT1</b></li>
  <li><b>ns3::NrEesmIrT2</b></li>
  <li><b>ns3::NrErrorModel</b></li>
  <li><b>ns3::NrGnbMac</b></li>
  <li><b>ns3::NrGnbNetDevice</b></li>
  <li><b>ns3::NrGnbPhy</b></li>
  <li><b>ns3::NrGnbRrcProtocolIdeal</b></li>
  <li><b>ns3::NrHelper</b></li>
  <li><b>ns3::NrLteMiErrorModel</b></li>
  <li><b>ns3::NrMacHeaderFs</b></li>
  <li><b>ns3::NrMacHeaderFsDl</b></li>
  <li><b>ns3::NrMacHeaderFsUl</b></li>
  <li><b>ns3::NrMacHeaderVs</b></li>
  <li><b>ns3::NrMacHeaderVsDl</b></li>
  <li><b>ns3::NrMacHeaderVsUl</b></li>
  <li><b>ns3::NrMacRxTrace</b></li>
  <li><b>ns3::NrMacScheduler</b></li>
  <li><b>ns3::NrMacSchedulerLcAlgorithm</b></li>
  <li><b>ns3::NrMacSchedulerLcQos</b></li>
  <li><b>ns3::NrMacSchedulerLcRR</b></li>
  <li><b>ns3::NrMacSchedulerNs3</b></li>
  <li><b>ns3::NrMacSchedulerOfdma</b></li>
  <li><b>ns3::NrMacSchedulerOfdmaMR</b></li>
  <li><b>ns3::NrMacSchedulerOfdmaPF</b></li>
  <li><b>ns3::NrMacSchedulerOfdmaQos</b></li>
  <li><b>ns3::NrMacSchedulerOfdmaRR</b></li>
  <li><b>ns3::NrMacSchedulerSrsDefault</b></li>
  <li><b>ns3::NrMacSchedulerTdma</b></li>
  <li><b>ns3::NrMacSchedulerTdmaMR</b></li>
  <li><b>ns3::NrMacSchedulerTdmaPF</b></li>
  <li><b>ns3::NrMacSchedulerTdmaQos</b></li>
  <li><b>ns3::NrMacSchedulerTdmaRR</b></li>
  <li><b>ns3::NrMacSchedulingStats</b></li>
  <li><b>ns3::NrMacShortBsrCe</b></li>
  <li><b>ns3::NrNetDevice</b></li>
  <li><b>ns3::NrPhy</b></li>
  <li><b>ns3::NrPhyRxTrace</b></li>
  <li><b>ns3::NrPointToPointEpcHelper</b></li>
  <li><b>ns3::NrRadioBearerTag</b></li>
  <li><b>ns3::NrRadioEnvironmentMapHelper</b></li>
  <li><b>ns3::NrSpectrumPhy</b></li>
  <li><b>ns3::NrStatsCalculator</b></li>
  <li><b>ns3::NrUeMac</b></li>
  <li><b>ns3::NrUeNetDevice</b></li>
  <li><b>ns3::NrUePhy</b></li>
  <li><b>ns3::NrUePowerControl</b></li>
  <li><b>ns3::nrUeRrcProtocolIdeal</b></li>
  <li><b>ns3::Object</b></li>
  <li><b>ns3::ObjectBase</b></li>
  <li><b>ns3::ObssPdAlgorithm</b></li>
  <li><b>ns3::OhBuildingsPropagationLossModel</b></li>
  <li><b>ns3::OkumuraHataPropagationLossModel</b></li>
  <li><b>ns3::olsr::MessageHeader</b></li>
  <li><b>ns3::olsr::PacketHeader</b></li>
  <li><b>ns3::olsr::RoutingProtocol</b></li>
  <li><b>ns3::OnoeWifiManager</b></li>
  <li><b>ns3::OnOffApplication</b></li>
  <li><b>ns3::OptimalCovMatrixBeamforming</b></li>
  <li><b>ns3::OrbisTopologyReader</b></li>
  <li><b>ns3::OsmpClient</b></li>
  <li><b>ns3::OutdoorPositionAllocator</b></li>
  <li><b>ns3::PacketBurst</b></li>
  <li><b>ns3::PacketFilter</b></li>
  <li><b>ns3::PacketProbe</b></li>
  <li><b>ns3::PacketSink</b></li>
  <li><b>ns3::PacketSocket</b></li>
  <li><b>ns3::PacketSocketClient</b></li>
  <li><b>ns3::PacketSocketFactory</b></li>
  <li><b>ns3::PacketSocketServer</b></li>
  <li><b>ns3::PacketSocketTag</b></li>
  <li><b>ns3::ParabolicAntennaModel</b></li>
  <li><b>ns3::ParetoRandomVariable</b></li>
  <li><b>ns3::ParfWifiManager</b></li>
  <li><b>ns3::PbbPacket</b></li>
  <li><b>ns3::PcapFileWrapper</b></li>
  <li><b>ns3::PdcpTag</b></li>
  <li><b>ns3::PfFfMacScheduler</b></li>
  <li><b>ns3::PfifoFastQueueDisc</b></li>
  <li><b>ns3::PhasedArrayModel</b></li>
  <li><b>ns3::PhasedArraySpectrumPropagationLossModel</b></li>
  <li><b>ns3::PhyRxStatsCalculator</b></li>
  <li><b>ns3::PhyStatsCalculator</b></li>
  <li><b>ns3::PhyTxStatsCalculator</b></li>
  <li><b>ns3::PieQueueDisc</b></li>
  <li><b>ns3::Ping</b></li>
  <li><b>ns3::Ping6</b></li>
  <li><b>ns3::PointToPointChannel</b></li>
  <li><b>ns3::PointToPointEpcHelper</b></li>
  <li><b>ns3::PointToPointNetDevice</b></li>
  <li><b>ns3::PositionAllocator</b></li>
  <li><b>ns3::PppHeader</b></li>
  <li><b>ns3::PreambleDetectionModel</b></li>
  <li><b>ns3::PrioQueueDisc</b></li>
  <li><b>ns3::PriorityQueueScheduler</b></li>
  <li><b>ns3::ProbabilisticV2vHighwayChannelConditionModel</b></li>
  <li><b>ns3::ProbabilisticV2vUrbanChannelConditionModel</b></li>
  <li><b>ns3::Probe</b></li>
  <li><b>ns3::PropagationDelayModel</b></li>
  <li><b>ns3::PropagationLossModel</b></li>
  <li><b>ns3::PssFfMacScheduler</b></li>
  <li><b>ns3::QosFrameExchangeManager</b></li>
  <li><b>ns3::QosTxop</b></li>
  <li><b>ns3::QuasiOmniDirectPathBeamforming</b></li>
  <li><b>ns3::Queue<Packet></b></li>
  <li><b>ns3::Queue<QueueDiscItem></b></li>
  <li><b>ns3::Queue<WifiMpdu,WifiMacQueueContainer></b></li>
  <li><b>ns3::QueueBase</b></li>
  <li><b>ns3::QueueDisc</b></li>
  <li><b>ns3::QueueDiscClass</b></li>
  <li><b>ns3::QueueLimits</b></li>
  <li><b>ns3::RaahsClient</b></li>
  <li><b>ns3::RadioBearerStatsCalculator</b></li>
  <li><b>ns3::RadioEnvironmentMapHelper</b></li>
  <li><b>ns3::RadiotapHeader</b></li>
  <li><b>ns3::Radvd</b></li>
  <li><b>ns3::RandomBoxPositionAllocator</b></li>
  <li><b>ns3::RandomBuildingPositionAllocator</b></li>
  <li><b>ns3::RandomDirection2dMobilityModel</b></li>
  <li><b>ns3::RandomDiscPositionAllocator</b></li>
  <li><b>ns3::RandomPropagationDelayModel</b></li>
  <li><b>ns3::RandomPropagationLossModel</b></li>
  <li><b>ns3::RandomRectanglePositionAllocator</b></li>
  <li><b>ns3::RandomRoomPositionAllocator</b></li>
  <li><b>ns3::RandomVariableStream</b></li>
  <li><b>ns3::RandomWalk2dMobilityModel</b></li>
  <li><b>ns3::RandomWalk2dOutdoorMobilityModel</b></li>
  <li><b>ns3::RandomWaypointMobilityModel</b></li>
  <li><b>ns3::RangePropagationLossModel</b></li>
  <li><b>ns3::RateErrorModel</b></li>
  <li><b>ns3::RealisticBeamformingAlgorithm</b></li>
  <li><b>ns3::RealisticBeamformingHelper</b></li>
  <li><b>ns3::RealisticBfManager</b></li>
  <li><b>ns3::RealtimeSimulatorImpl</b></li>
  <li><b>ns3::ReceiveListErrorModel</b></li>
  <li><b>ns3::RedQueueDisc</b></li>
  <li><b>ns3::RemSpectrumPhy</b></li>
  <li><b>ns3::Rip</b></li>
  <li><b>ns3::RipHeader</b></li>
  <li><b>ns3::RipNg</b></li>
  <li><b>ns3::RipNgHeader</b></li>
  <li><b>ns3::RipNgRte</b></li>
  <li><b>ns3::RipRte</b></li>
  <li><b>ns3::RlcTag</b></li>
  <li><b>ns3::RngReq</b></li>
  <li><b>ns3::RngRsp</b></li>
  <li><b>ns3::RocketfuelTopologyReader</b></li>
  <li><b>ns3::RraaWifiManager</b></li>
  <li><b>ns3::RrComponentCarrierManager</b></li>
  <li><b>ns3::RrFfMacScheduler</b></li>
  <li><b>ns3::RrMultiUserScheduler</b></li>
  <li><b>ns3::RrpaaWifiManager</b></li>
  <li><b>ns3::RttEstimator</b></li>
  <li><b>ns3::RttMeanDeviation</b></li>
  <li><b>ns3::RvBatteryModel</b></li>
  <li><b>ns3::SameRoomPositionAllocator</b></li>
  <li><b>ns3::Scheduler</b></li>
  <li><b>ns3::SeqTsEchoHeader</b></li>
  <li><b>ns3::SeqTsHeader</b></li>
  <li><b>ns3::SeqTsSizeHeader</b></li>
  <li><b>ns3::SequentialRandomVariable</b></li>
  <li><b>ns3::ServiceFlowManager</b></li>
  <li><b>ns3::SftmClient</b></li>
  <li><b>ns3::ShannonSpectrumErrorModel</b></li>
  <li><b>ns3::SimpleChannel</b></li>
  <li><b>ns3::SimpleDeviceEnergyModel</b></li>
  <li><b>ns3::SimpleFrameCaptureModel</b></li>
  <li><b>ns3::SimpleNetDevice</b></li>
  <li><b>ns3::SimpleOfdmWimaxPhy</b></li>
  <li><b>ns3::SimpleTag</b></li>
  <li><b>ns3::SimpleUeComponentCarrierManager</b></li>
  <li><b>ns3::SimulatorImpl</b></li>
  <li><b>ns3::SingleModelSpectrumChannel</b></li>
  <li><b>ns3::SixLowPanBc0</b></li>
  <li><b>ns3::SixLowPanFrag1</b></li>
  <li><b>ns3::SixLowPanFragN</b></li>
  <li><b>ns3::SixLowPanHc1</b></li>
  <li><b>ns3::SixLowPanIphc</b></li>
  <li><b>ns3::SixLowPanIpv6</b></li>
  <li><b>ns3::SixLowPanMesh</b></li>
  <li><b>ns3::SixLowPanNetDevice</b></li>
  <li><b>ns3::SixLowPanNhcExtension</b></li>
  <li><b>ns3::SixLowPanUdpNhcExtension</b></li>
  <li><b>ns3::SllHeader</b></li>
  <li><b>ns3::SnrTag</b></li>
  <li><b>ns3::Socket</b></li>
  <li><b>ns3::SocketFactory</b></li>
  <li><b>ns3::SocketIpTtlTag</b></li>
  <li><b>ns3::SocketIpv6HopLimitTag</b></li>
  <li><b>ns3::SocketSetDontFragmentTag</b></li>
  <li><b>ns3::SpectrumAnalyzer</b></li>
  <li><b>ns3::SpectrumChannel</b></li>
  <li><b>ns3::SpectrumErrorModel</b></li>
  <li><b>ns3::SpectrumPhy</b></li>
  <li><b>ns3::SpectrumPropagationLossModel</b></li>
  <li><b>ns3::SpectrumTransmitFilter</b></li>
  <li><b>ns3::SpectrumWifiPhy</b></li>
  <li><b>ns3::SSLinkManager</b></li>
  <li><b>ns3::SSManager</b></li>
  <li><b>ns3::SSScheduler</b></li>
  <li><b>ns3::StaWifiMac</b></li>
  <li><b>ns3::SteadyStateRandomWaypointMobilityModel</b></li>
  <li><b>ns3::SubscriberStationNetDevice</b></li>
  <li><b>ns3::SvaaClient</b></li>
  <li><b>ns3::Synchronizer</b></li>
  <li><b>ns3::TableBasedErrorRateModel</b></li>
  <li><b>ns3::Tag</b></li>
  <li><b>ns3::TapBridge</b></li>
  <li><b>ns3::TbfQueueDisc</b></li>
  <li><b>ns3::TcpBbr</b></li>
  <li><b>ns3::TcpBic</b></li>
  <li><b>ns3::TcpClassicRecovery</b></li>
  <li><b>ns3::TcpCongestionOps</b></li>
  <li><b>ns3::TcpCubic</b></li>
  <li><b>ns3::TcpDctcp</b></li>
  <li><b>ns3::TcpHeader</b></li>
  <li><b>ns3::TcpHighSpeed</b></li>
  <li><b>ns3::TcpHtcp</b></li>
  <li><b>ns3::TcpHybla</b></li>
  <li><b>ns3::TcpIllinois</b></li>
  <li><b>ns3::TcpL4Protocol</b></li>
  <li><b>ns3::TcpLedbat</b></li>
  <li><b>ns3::TcpLinuxReno</b></li>
  <li><b>ns3::TcpLp</b></li>
  <li><b>ns3::TcpNewReno</b></li>
  <li><b>ns3::TcpOption</b></li>
  <li><b>ns3::TcpOptionEnd</b></li>
  <li><b>ns3::TcpOptionMSS</b></li>
  <li><b>ns3::TcpOptionNOP</b></li>
  <li><b>ns3::TcpOptionSack</b></li>
  <li><b>ns3::TcpOptionSackPermitted</b></li>
  <li><b>ns3::TcpOptionTS</b></li>
  <li><b>ns3::TcpOptionUnknown</b></li>
  <li><b>ns3::TcpOptionWinScale</b></li>
  <li><b>ns3::TcpPrrRecovery</b></li>
  <li><b>ns3::TcpRateLinux</b></li>
  <li><b>ns3::TcpRateOps</b></li>
  <li><b>ns3::TcpRecoveryOps</b></li>
  <li><b>ns3::TcpRxBuffer</b></li>
  <li><b>ns3::TcpScalable</b></li>
  <li><b>ns3::TcpSocket</b></li>
  <li><b>ns3::TcpSocketBase</b></li>
  <li><b>ns3::TcpSocketFactory</b></li>
  <li><b>ns3::TcpSocketState</b></li>
  <li><b>ns3::TcpTxBuffer</b></li>
  <li><b>ns3::TcpVegas</b></li>
  <li><b>ns3::TcpVeno</b></li>
  <li><b>ns3::TcpWestwoodPlus</b></li>
  <li><b>ns3::TcpYeah</b></li>
  <li><b>ns3::TdBetFfMacScheduler</b></li>
  <li><b>ns3::TdMtFfMacScheduler</b></li>
  <li><b>ns3::TdTbfqFfMacScheduler</b></li>
  <li><b>ns3::ThompsonSamplingWifiManager</b></li>
  <li><b>ns3::ThreeGppAntennaModel</b></li>
  <li><b>ns3::ThreeGppChannelConditionModel</b></li>
  <li><b>ns3::ThreeGppChannelModel</b></li>
  <li><b>ns3::ThreeGppChannelModelParam</b></li>
  <li><b>ns3::ThreeGppHttpClient</b></li>
  <li><b>ns3::ThreeGppHttpHeader</b></li>
  <li><b>ns3::ThreeGppHttpServer</b></li>
  <li><b>ns3::ThreeGppHttpVariables</b></li>
  <li><b>ns3::ThreeGppIndoorMixedOfficeChannelConditionModel</b></li>
  <li><b>ns3::ThreeGppIndoorOfficePropagationLossModel</b></li>
  <li><b>ns3::ThreeGppIndoorOpenOfficeChannelConditionModel</b></li>
  <li><b>ns3::ThreeGppPropagationLossModel</b></li>
  <li><b>ns3::ThreeGppRmaChannelConditionModel</b></li>
  <li><b>ns3::ThreeGppRmaPropagationLossModel</b></li>
  <li><b>ns3::ThreeGppSpectrumPropagationLossModel</b></li>
  <li><b>ns3::ThreeGppUmaChannelConditionModel</b></li>
  <li><b>ns3::ThreeGppUmaPropagationLossModel</b></li>
  <li><b>ns3::ThreeGppUmiStreetCanyonChannelConditionModel</b></li>
  <li><b>ns3::ThreeGppUmiStreetCanyonPropagationLossModel</b></li>
  <li><b>ns3::ThreeGppV2vHighwayChannelConditionModel</b></li>
  <li><b>ns3::ThreeGppV2vHighwayPropagationLossModel</b></li>
  <li><b>ns3::ThreeGppV2vUrbanChannelConditionModel</b></li>
  <li><b>ns3::ThreeGppV2vUrbanPropagationLossModel</b></li>
  <li><b>ns3::ThreeLogDistancePropagationLossModel</b></li>
  <li><b>ns3::ThresholdPreambleDetectionModel</b></li>
  <li><b>ns3::TimeProbe</b></li>
  <li><b>ns3::TimeSeriesAdaptor</b></li>
  <li><b>ns3::TimestampTag</b></li>
  <li><b>ns3::TopologyReader</b></li>
  <li><b>ns3::TraceFadingLossModel</b></li>
  <li><b>ns3::TrafficControlLayer</b></li>
  <li><b>ns3::TrafficGenerator</b></li>
  <li><b>ns3::TrafficGenerator3gppAudioData</b></li>
  <li><b>ns3::TrafficGenerator3gppGenericVideo</b></li>
  <li><b>ns3::TrafficGenerator3gppPoseControl</b></li>
  <li><b>ns3::TrafficGeneratorFtpSingle</b></li>
  <li><b>ns3::TrafficGeneratorNgmnFtpMulti</b></li>
  <li><b>ns3::TrafficGeneratorNgmnGaming</b></li>
  <li><b>ns3::TrafficGeneratorNgmnVideo</b></li>
  <li><b>ns3::TrafficGeneratorNgmnVoip</b></li>
  <li><b>ns3::Trailer</b></li>
  <li><b>ns3::TriangularRandomVariable</b></li>
  <li><b>ns3::TtaFfMacScheduler</b></li>
  <li><b>ns3::TvSpectrumTransmitter</b></li>
  <li><b>ns3::TwoRayGroundPropagationLossModel</b></li>
  <li><b>ns3::TwoRaySpectrumPropagationLossModel</b></li>
  <li><b>ns3::Txop</b></li>
  <li><b>ns3::UanChannel</b></li>
  <li><b>ns3::UanHeaderCommon</b></li>
  <li><b>ns3::UanHeaderRcAck</b></li>
  <li><b>ns3::UanHeaderRcCts</b></li>
  <li><b>ns3::UanHeaderRcCtsGlobal</b></li>
  <li><b>ns3::UanHeaderRcData</b></li>
  <li><b>ns3::UanHeaderRcRts</b></li>
  <li><b>ns3::UanMac</b></li>
  <li><b>ns3::UanMacAloha</b></li>
  <li><b>ns3::UanMacCw</b></li>
  <li><b>ns3::UanMacRc</b></li>
  <li><b>ns3::UanMacRcGw</b></li>
  <li><b>ns3::UanNetDevice</b></li>
  <li><b>ns3::UanNoiseModel</b></li>
  <li><b>ns3::UanNoiseModelDefault</b></li>
  <li><b>ns3::UanPhy</b></li>
  <li><b>ns3::UanPhyCalcSinr</b></li>
  <li><b>ns3::UanPhyCalcSinrDefault</b></li>
  <li><b>ns3::UanPhyCalcSinrDual</b></li>
  <li><b>ns3::UanPhyCalcSinrFhFsk</b></li>
  <li><b>ns3::UanPhyDual</b></li>
  <li><b>ns3::UanPhyGen</b></li>
  <li><b>ns3::UanPhyPer</b></li>
  <li><b>ns3::UanPhyPerCommonModes</b></li>
  <li><b>ns3::UanPhyPerGenDefault</b></li>
  <li><b>ns3::UanPhyPerUmodem</b></li>
  <li><b>ns3::UanPropModel</b></li>
  <li><b>ns3::UanPropModelIdeal</b></li>
  <li><b>ns3::UanPropModelThorp</b></li>
  <li><b>ns3::UanTransducer</b></li>
  <li><b>ns3::UanTransducerHd</b></li>
  <li><b>ns3::Ucd</b></li>
  <li><b>ns3::UdpClient</b></li>
  <li><b>ns3::UdpEchoClient</b></li>
  <li><b>ns3::UdpEchoServer</b></li>
  <li><b>ns3::UdpHeader</b></li>
  <li><b>ns3::UdpL4Protocol</b></li>
  <li><b>ns3::UdpServer</b></li>
  <li><b>ns3::UdpSocket</b></li>
  <li><b>ns3::UdpSocketFactory</b></li>
  <li><b>ns3::UdpSocketImpl</b></li>
  <li><b>ns3::UdpTraceClient</b></li>
  <li><b>ns3::UeManager</b></li>
  <li><b>ns3::Uinteger16Probe</b></li>
  <li><b>ns3::Uinteger32Probe</b></li>
  <li><b>ns3::Uinteger8Probe</b></li>
  <li><b>ns3::UlMap</b></li>
  <li><b>ns3::UniformDiscPositionAllocator</b></li>
  <li><b>ns3::UniformPlanarArray</b></li>
  <li><b>ns3::UniformRandomVariable</b></li>
  <li><b>ns3::UplinkScheduler</b></li>
  <li><b>ns3::UplinkSchedulerMBQoS</b></li>
  <li><b>ns3::UplinkSchedulerRtps</b></li>
  <li><b>ns3::UplinkSchedulerSimple</b></li>
  <li><b>ns3::V4Ping</b></li>
  <li><b>ns3::V4TraceRoute</b></li>
  <li><b>ns3::VhtConfiguration</b></li>
  <li><b>ns3::VhtFrameExchangeManager</b></li>
  <li><b>ns3::VirtualNetDevice</b></li>
  <li><b>ns3::WallClockSynchronizer</b></li>
  <li><b>ns3::WaveformGenerator</b></li>
  <li><b>ns3::WaypointMobilityModel</b></li>
  <li><b>ns3::WeibullRandomVariable</b></li>
  <li><b>ns3::WifiAckManager</b></li>
  <li><b>ns3::WifiAssocManager</b></li>
  <li><b>ns3::WifiBandwidthFilter</b></li>
  <li><b>ns3::WifiDefaultAckManager</b></li>
  <li><b>ns3::WifiDefaultAssocManager</b></li>
  <li><b>ns3::WifiDefaultProtectionManager</b></li>
  <li><b>ns3::WifiMac</b></li>
  <li><b>ns3::WifiMacHeader</b></li>
  <li><b>ns3::WifiMacQueue</b></li>
  <li><b>ns3::WifiMacQueueScheduler</b></li>
  <li><b>ns3::WifiMacQueueSchedulerImpl</b></li>
  <li><b>ns3::WifiMacTrailer</b></li>
  <li><b>ns3::WifiNetDevice</b></li>
  <li><b>ns3::WifiPhy</b></li>
  <li><b>ns3::WifiPhyStateHelper</b></li>
  <li><b>ns3::WifiProtectionManager</b></li>
  <li><b>ns3::WifiRadioEnergyModel</b></li>
  <li><b>ns3::WifiRemoteStationManager</b></li>
  <li><b>ns3::WifiSpectrumPhyInterface</b></li>
  <li><b>ns3::WifiTxCurrentModel</b></li>
  <li><b>ns3::WimaxChannel</b></li>
  <li><b>ns3::WimaxConnection</b></li>
  <li><b>ns3::WimaxMacQueue</b></li>
  <li><b>ns3::WimaxMacToMacHeader</b></li>
  <li><b>ns3::WimaxNetDevice</b></li>
  <li><b>ns3::WimaxPhy</b></li>
  <li><b>ns3::XrTrafficMixerHelper</b></li>
  <li><b>ns3::YansErrorRateModel</b></li>
  <li><b>ns3::YansWifiChannel</b></li>
  <li><b>ns3::YansWifiPhy</b></li>
  <li><b>ns3::ZetaRandomVariable</b></li>
  <li><b>ns3::ZipfRandomVariable</b></li>
</ul>
*/

/*!
\page AttributeList All Attributes

This is a list of all \ref attributes classes.  For more information see the \ref attributes section of this API documentation and the Attributes sections in the Tutorial and Manual.

<b>ns3::A2A4RsrqHandoverAlgorithm</b><br>
<ul>
<li><b>NeighbourCellOffset</b>: Minimum offset between the serving and the best neighbour cell to trigger the handover. Expressed in quantized range of [0..34] as per Section 9.1.7 of 3GPP TS 36.133.</li>
<li><b>ServingCellThreshold</b>: If the RSRQ of the serving cell is worse than this threshold, neighbour cells are consider for handover. Expressed in quantized range of [0..34] as per Section 9.1.7 of 3GPP TS 36.133.</li>
</ul>
<b>ns3::A3RsrpHandoverAlgorithm</b><br>
<ul>
<li><b>Hysteresis</b>: Handover margin (hysteresis) in dB (rounded to the nearest multiple of 0.5 dB)</li>
<li><b>TimeToTrigger</b>: Time during which neighbour cell's RSRP must continuously higher than serving cell's RSRP in order to trigger a handover</li>
</ul>
<b>ns3::AarfcdWifiManager</b><br>
<ul>
<li><b>MaxRtsWnd</b>: Maximum value for RTS window of AARF-CD</li>
<li><b>MaxSuccessThreshold</b>: Maximum value of the success threshold in the AARF algorithm.</li>
<li><b>MinRtsWnd</b>: Minimum value for RTS window of AARF-CD</li>
<li><b>MinSuccessThreshold</b>: The minimum value for the success threshold in the AARF algorithm.</li>
<li><b>MinTimerThreshold</b>: The minimum value for the 'timer' threshold in the AARF algorithm.</li>
<li><b>SuccessK</b>: Multiplication factor for the success threshold in the AARF algorithm.</li>
<li><b>TimerK</b>: Multiplication factor for the timer threshold in the AARF algorithm.</li>
<li><b>TurnOffRtsAfterRateDecrease</b>: If true the RTS mechanism will be turned off when the rate will be decreased</li>
<li><b>TurnOnRtsAfterRateIncrease</b>: If true the RTS mechanism will be turned on when the rate will be increased</li>
</ul>
<b>ns3::AarfWifiManager</b><br>
<ul>
<li><b>MaxSuccessThreshold</b>: Maximum value of the success threshold in the AARF algorithm.</li>
<li><b>MinSuccessThreshold</b>: The minimum value for the success threshold in the AARF algorithm.</li>
<li><b>MinTimerThreshold</b>: The minimum value for the 'timer' threshold in the AARF algorithm.</li>
<li><b>SuccessK</b>: Multiplication factor for the success threshold in the AARF algorithm.</li>
<li><b>TimerK</b>: Multiplication factor for the timer threshold in the AARF algorithm.</li>
</ul>
<b>ns3::AcousticModemEnergyModel</b><br>
<ul>
<li><b>IdlePowerW</b>: The modem Idle power in Watts</li>
<li><b>RxPowerW</b>: The modem Rx power in Watts</li>
<li><b>SleepPowerW</b>: The modem Sleep power in Watts</li>
<li><b>TxPowerW</b>: The modem Tx power in Watts</li>
</ul>
<b>ns3::AlohaNoackNetDevice</b><br>
<ul>
<li><b>Address</b>: The MAC address of this device.</li>
<li><b>Mtu</b>: The Maximum Transmission Unit</li>
<li><b>Phy</b>: The PHY layer attached to this device.</li>
<li><b>Queue</b>: packets being transmitted get queued here</li>
</ul>
<b>ns3::AmrrWifiManager</b><br>
<ul>
<li><b>FailureRatio</b>: Ratio of minimum erroneous transmissions needed to switch to a lower rate</li>
<li><b>MaxSuccessThreshold</b>: Maximum number of consecutive success periods needed to switch to a higher rate</li>
<li><b>MinSuccessThreshold</b>: Minimum number of consecutive success periods needed to switch to a higher rate</li>
<li><b>SuccessRatio</b>: Ratio of maximum erroneous transmissions needed to switch to a higher rate</li>
<li><b>UpdatePeriod</b>: The interval between decisions about rate control changes</li>
</ul>
<b>ns3::aodv::RoutingProtocol</b><br>
<ul>
<li><b>ActiveRouteTimeout</b>: Period of time during which the route is considered to be valid</li>
<li><b>AllowedHelloLoss</b>: Number of hello messages which may be loss for valid link.</li>
<li><b>BlackListTimeout</b>: Time for which the node is put into the blacklist = RreqRetries * NetTraversalTime</li>
<li><b>DeletePeriod</b>: DeletePeriod is intended to provide an upper bound on the time for which an upstream node A can have a neighbor B as an active next hop for destination D, while B has invalidated the route to D. = 5 * max (HelloInterval, ActiveRouteTimeout)</li>
<li><b>DestinationOnly</b>: Indicates only the destination may respond to this RREQ.</li>
<li><b>EnableBroadcast</b>: Indicates whether a broadcast data packets forwarding enable.</li>
<li><b>EnableHello</b>: Indicates whether a hello messages enable.</li>
<li><b>GratuitousReply</b>: Indicates whether a gratuitous RREP should be unicast to the node originated route discovery.</li>
<li><b>HelloInterval</b>: HELLO messages emission interval.</li>
<li><b>MaxQueueLen</b>: Maximum number of packets that we allow a routing protocol to buffer.</li>
<li><b>MaxQueueTime</b>: Maximum time packets can be queued (in seconds)</li>
<li><b>MyRouteTimeout</b>: Value of lifetime field in RREP generating by this node = 2 * max(ActiveRouteTimeout, PathDiscoveryTime)</li>
<li><b>NetDiameter</b>: Net diameter measures the maximum possible number of hops between two nodes in the network</li>
<li><b>NetTraversalTime</b>: Estimate of the average net traversal time = 2 * NodeTraversalTime * NetDiameter</li>
<li><b>NextHopWait</b>: Period of our waiting for the neighbour's RREP_ACK = 10 ms + NodeTraversalTime</li>
<li><b>NodeTraversalTime</b>: Conservative estimate of the average one hop traversal time for packets and should include queuing delays, interrupt processing times and transfer times.</li>
<li><b>PathDiscoveryTime</b>: Estimate of maximum time needed to find route in network = 2 * NetTraversalTime</li>
<li><b>RerrRateLimit</b>: Maximum number of RERR per second.</li>
<li><b>RreqRateLimit</b>: Maximum number of RREQ per second.</li>
<li><b>RreqRetries</b>: Maximum number of retransmissions of RREQ to discover a route</li>
<li><b>TimeoutBuffer</b>: Provide a buffer for the timeout.</li>
<li><b>TtlIncrement</b>: TTL increment for each attempt using the expanding ring search for RREQ dissemination.</li>
<li><b>TtlStart</b>: Initial TTL value for RREQ.</li>
<li><b>TtlThreshold</b>: Maximum TTL value for expanding ring search, TTL = NetDiameter is used beyond this value.</li>
<li><b>UniformRv</b>: Access to the underlying UniformRandomVariable</li>
</ul>
<b>ns3::AparfWifiManager</b><br>
<ul>
<li><b>FailThreshold</b>: The minimum number of failed transmissions to try a new power or rate.</li>
<li><b>PowerDecrementStep</b>: Step size for decrement the power.</li>
<li><b>PowerIncrementStep</b>: Step size for increment the power.</li>
<li><b>PowerThreshold</b>: The maximum number of power changes.</li>
<li><b>RateDecrementStep</b>: Step size for decrement the rate.</li>
<li><b>RateIncrementStep</b>: Step size for increment the rate.</li>
<li><b>SuccessThreshold1</b>: The minimum number of successful transmissions in "High" state to try a new power or rate.</li>
<li><b>SuccessThreshold2</b>: The minimum number of successful transmissions in "Low" state to try a new power or rate.</li>
</ul>
<b>ns3::Application</b><br>
<ul>
<li><b>StartTime</b>: Time at which the application will start</li>
<li><b>StopTime</b>: Time at which the application will stop</li>
</ul>
<b>ns3::ApWifiMac</b><br>
<ul>
<li><b>BeaconGeneration</b>: Whether or not beacons are generated.</li>
<li><b>BeaconInterval</b>: Delay between two beacons</li>
<li><b>BeaconJitter</b>: A uniform random variable to cause the initial beacon starting time (after simulation time 0) to be distributed between 0 and the BeaconInterval.</li>
<li><b>BsrLifetime</b>: Lifetime of Buffer Status Reports received from stations.</li>
<li><b>EnableBeaconJitter</b>: If beacons are enabled, whether to jitter the initial send event.</li>
<li><b>EnableNonErpProtection</b>: Whether or not protection mechanism should be used when non-ERP STAs are present within the BSS.This parameter is only used when ERP is supported by the AP.</li>
</ul>
<b>ns3::ArfWifiManager</b><br>
<ul>
<li><b>SuccessThreshold</b>: The minimum number of successful transmissions to try a new rate.</li>
<li><b>TimerThreshold</b>: The 'timer' threshold in the ARF algorithm.</li>
</ul>
<b>ns3::ArpCache</b><br>
<ul>
<li><b>AliveTimeout</b>: When this timeout expires, the matching cache entry needs refreshing</li>
<li><b>DeadTimeout</b>: When this timeout expires, a new attempt to resolve the matching entry is made</li>
<li><b>MaxRetries</b>: Number of retransmissions of ArpRequest before marking dead</li>
<li><b>PendingQueueSize</b>: The size of the queue for packets pending an arp reply.</li>
<li><b>WaitReplyTimeout</b>: When this timeout expires, the cache entries will be scanned and entries in WaitReply state will resend ArpRequest unless MaxRetries has been exceeded, in which case the entry is marked dead</li>
</ul>
<b>ns3::ArpL3Protocol</b><br>
<ul>
<li><b>CacheList</b>: The list of ARP caches</li>
<li><b>RequestJitter</b>: The jitter in ms a node is allowed to wait before sending an ARP request.  Some jitter aims to prevent collisions. By default, the model will wait for a duration in ms defined by a uniform random-variable between 0 and RequestJitter</li>
</ul>
<b>ns3::AthstatsWifiTraceSink</b><br>
<ul>
<li><b>Interval</b>: Time interval between reports</li>
</ul>
<b>ns3::BandwidthPartGnb</b><br>
<ul>
<li><b>FfMacScheduler</b>: The scheduler associated to this EnbNetDevice</li>
<li><b>NrGnbMac</b>: The MAC associated to this EnbNetDevice</li>
<li><b>NrGnbPhy</b>: The PHY associated to this EnbNetDevice</li>
</ul>
<b>ns3::BandwidthPartUe</b><br>
<ul>
<li><b>NrUeMac</b>: The MAC associated to this BandwidthPartUe</li>
<li><b>NrUePhy</b>: The PHY associated to this BandwidthPartUe</li>
</ul>
<b>ns3::BaseStationNetDevice</b><br>
<ul>
<li><b>BSScheduler</b>: Downlink Scheduler for BS</li>
<li><b>BsIpcsPacketClassifier</b>: The uplink IP packet classifier attached to this device.</li>
<li><b>BwReqOppSize</b>: The bandwidth request opportunity size in symbols</li>
<li><b>DcdInterval</b>: Time between transmission of DCD messages. Maximum value is 10s.</li>
<li><b>InitialRangInterval</b>: Time between Initial Ranging regions assigned by the BS. Maximum is 2s</li>
<li><b>IntervalT8</b>: Wait for DSA/DSC Acknowledge timeout. Maximum 300ms.</li>
<li><b>LinkManager</b>: The link manager attached to this device.</li>
<li><b>MaxRangCorrectionRetries</b>: Number of retries on contention Ranging Requests</li>
<li><b>RangReqOppSize</b>: The ranging opportunity size in symbols</li>
<li><b>SSManager</b>: The ss manager attached to this device.</li>
<li><b>Scheduler</b>: The BS scheduler attached to this device.</li>
<li><b>ServiceFlowManager</b>: The service flow manager attached to this device.</li>
<li><b>UcdInterval</b>: Time between transmission of UCD messages. Maximum value is 10s.</li>
<li><b>UplinkScheduler</b>: The uplink scheduler attached to this device.</li>
</ul>
<b>ns3::BasicEnergyHarvester</b><br>
<ul>
<li><b>HarvestablePower</b>: The harvestable power [Watts] that the energy harvester is allowed to harvest. By default, the model will allow to harvest an amount of power defined by a uniformly distributed random variable in 0 and 2.0 Watts</li>
<li><b>PeriodicHarvestedPowerUpdateInterval</b>: Time between two consecutive periodic updates of the harvested power. By default, the value is updated every 1 s</li>
</ul>
<b>ns3::BasicEnergySource</b><br>
<ul>
<li><b>BasicEnergyHighBatteryThreshold</b>: High battery threshold for basic energy source.</li>
<li><b>BasicEnergyLowBatteryThreshold</b>: Low battery threshold for basic energy source.</li>
<li><b>BasicEnergySourceInitialEnergyJ</b>: Initial energy stored in basic energy source.</li>
<li><b>BasicEnergySupplyVoltageV</b>: Initial supply voltage for basic energy source.</li>
<li><b>PeriodicEnergyUpdateInterval</b>: Time between two consecutive periodic energy updates.</li>
</ul>
<b>ns3::BridgeNetDevice</b><br>
<ul>
<li><b>EnableLearning</b>: Enable the learning mode of the Learning Bridge</li>
<li><b>ExpirationTime</b>: Time it takes for learned MAC state entry to expire.</li>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
</ul>
<b>ns3::Building</b><br>
<ul>
<li><b>Boundaries</b>: The boundaries of this Building as a value of type ns3::Box</li>
<li><b>ExternalWallsType</b>: The type of material of which the external walls are made</li>
<li><b>Id</b>: The id (unique integer) of this Building.</li>
<li><b>NFloors</b>: The number of floors of this building.</li>
<li><b>NRoomsX</b>: The number of rooms in the X axis.</li>
<li><b>NRoomsY</b>: The number of rooms in the Y axis.</li>
<li><b>Type</b>: The type of building</li>
</ul>
<b>ns3::BuildingListPriv</b><br>
<ul>
<li><b>BuildingList</b>: The list of all buildings created during the simulation.</li>
</ul>
<b>ns3::BuildingsPropagationLossModel</b><br>
<ul>
<li><b>InternalWallLoss</b>: Additional loss for each internal wall [dB]</li>
<li><b>ShadowSigmaExtWalls</b>: Standard deviation of the normal distribution used to calculate the shadowing due to ext walls</li>
<li><b>ShadowSigmaIndoor</b>: Standard deviation of the normal distribution used to calculate the shadowing for indoor nodes</li>
<li><b>ShadowSigmaOutdoor</b>: Standard deviation of the normal distribution used to calculate the shadowing for outdoor nodes</li>
</ul>
<b>ns3::BulkSendApplication</b><br>
<ul>
<li><b>EnableSeqTsSizeHeader</b>: Add SeqTsSizeHeader to each packet</li>
<li><b>Local</b>: The Address on which to bind the socket. If not set, it is generated automatically.</li>
<li><b>MaxBytes</b>: The total number of bytes to send. Once these bytes are sent, no data  is sent again. The value zero means that there is no limit.</li>
<li><b>Protocol</b>: The type of protocol to use.</li>
<li><b>Remote</b>: The address of the destination</li>
<li><b>SendSize</b>: The amount of data to send each time.</li>
</ul>
<b>ns3::BurstErrorModel</b><br>
<ul>
<li><b>BurstSize</b>: The number of packets being corrupted at one drop.</li>
<li><b>BurstStart</b>: The decision variable attached to this error model.</li>
<li><b>ErrorRate</b>: The burst error event.</li>
</ul>
<b>ns3::BwpManagerAlgorithmStatic</b><br>
<ul>
<li><b>DGBR_DISCRETE_AUT_LARGE</b>: BWP index to which flows of DGBR_DISCRETE_AUT_LARGE Qci type should be forwarded.</li>
<li><b>DGBR_DISCRETE_AUT_SMALL</b>: BWP index to which flows of DGBR_DISCRETE_AUT_SMALL Qci type should be forwarded.</li>
<li><b>DGBR_ELECTRICITY</b>: BWP index to which flows of DGBR_ELECTRICITY Qci type should be forwarded.</li>
<li><b>DGBR_INTER_SERV_87</b>: BWP index to which flows of DGBR_INTER_SERV_87 Qci type should be forwarded.</li>
<li><b>DGBR_INTER_SERV_88</b>: BWP index to which flows of DGBR_INTER_SERV_88 Qci type should be forwarded.</li>
<li><b>DGBR_ITS</b>: BWP index to which flows of DGBR_ITS Qci type should be forwarded.</li>
<li><b>DGBR_VISUAL_CONTENT_89</b>: BWP index to which flows of DGBR_VISUAL_CONTENT_89 Qci type should be forwarded.</li>
<li><b>DGBR_VISUAL_CONTENT_90</b>: BWP index to which flows of DGBR_VISUAL_CONTENT_90 Qci type should be forwarded.</li>
<li><b>GBR_CONV_VIDEO</b>: BWP index to which flows of GBR_CONV_VIDEO Qci type should be forwarded.</li>
<li><b>GBR_CONV_VOICE</b>: BWP index to which flows of this Qci type should be forwarded.</li>
<li><b>GBR_GAMING</b>: BWP index to which flows of GBR_GAMING Qci type should be forwarded.</li>
<li><b>GBR_LIVE_UL_71</b>: BWP index to which flows of GBR_LIVE_UL_71 Qci type should be forwarded.</li>
<li><b>GBR_LIVE_UL_72</b>: BWP index to which flows of GBR_LIVE_UL_72 Qci type should be forwarded.</li>
<li><b>GBR_LIVE_UL_73</b>: BWP index to which flows of GBR_LIVE_UL_73 Qci type should be forwarded.</li>
<li><b>GBR_LIVE_UL_74</b>: BWP index to which flows of GBR_LIVE_UL_74 Qci type should be forwarded.</li>
<li><b>GBR_LIVE_UL_76</b>: BWP index to which flows of GBR_LIVE_UL_76 Qci type should be forwarded.</li>
<li><b>GBR_MC_PUSH_TO_TALK</b>: BWP index to which flows of GBR_MC_PUSH_TO_TALK Qci type should be forwarded.</li>
<li><b>GBR_MC_VIDEO</b>: BWP index to which flows of GBR_MC_VIDEO Qci type should be forwarded.</li>
<li><b>GBR_NMC_PUSH_TO_TALK</b>: BWP index to which flows of GBR_NMC_PUSH_TO_TALK Qci type should be forwarded.</li>
<li><b>GBR_NON_CONV_VIDEO</b>: BWP index to which flows of GBR_NON_CONV_VIDEO Qci type should be forwarded.</li>
<li><b>GBR_V2X</b>: BWP index to which flows of GBR_V2X Qci type should be forwarded.</li>
<li><b>NGBR_IMS</b>: BWP index to which flows of NGBR_IMS Qci type should be forwarded.</li>
<li><b>NGBR_LOW_LAT_EMBB</b>: BWP index to which flows of NGBR_LOW_LAT_EMBB Qci type should be forwarded.</li>
<li><b>NGBR_MC_DATA</b>: BWP index to which flows of NGBR_MC_DATA Qci type should be forwarded.</li>
<li><b>NGBR_MC_DELAY_SIGNAL</b>: BWP index to which flows of NGBR_MC_DELAY_SIGNAL Qci type should be forwarded.</li>
<li><b>NGBR_V2X</b>: BWP index to which flows of NGBR_V2X Qci type should be forwarded.</li>
<li><b>NGBR_VIDEO_TCP_DEFAULT</b>: BWP index to which flows of NGBR_VIDEO_TCP_DEFAULT Qci type should be forwarded.</li>
<li><b>NGBR_VIDEO_TCP_OPERATOR</b>: BWP index to which flows of NGBR_VIDEO_TCP_OPERATOR Qci type should be forwarded.</li>
<li><b>NGBR_VIDEO_TCP_PREMIUM</b>: BWP index to which flows of NGBR_VIDEO_TCP_PREMIUM Qci type should be forwarded.</li>
<li><b>NGBR_VOICE_VIDEO_GAMING</b>: BWP index to which flows of NGBR_VOICE_VIDEO_GAMING Qci type should be forwarded.</li>
</ul>
<b>ns3::BwpManagerGnb</b><br>
<ul>
<li><b>BwpManagerAlgorithm</b>: The algorithm pointer</li>
</ul>
<b>ns3::BwpManagerUe</b><br>
<ul>
<li><b>BwpManagerAlgorithm</b>: The algorithm pointer</li>
</ul>
<b>ns3::CalendarScheduler</b><br>
<ul>
<li><b>Reverse</b>: Store events in reverse chronological order</li>
</ul>
<b>ns3::CaraWifiManager</b><br>
<ul>
<li><b>FailureThreshold</b>: The number of consecutive transmissions failure to decrease the rate.</li>
<li><b>ProbeThreshold</b>: The number of consecutive transmissions failure to activate the RTS probe.</li>
<li><b>SuccessThreshold</b>: The minimum number of successful transmissions to try a new rate.</li>
<li><b>Timeout</b>: The 'timer' in the CARA algorithm</li>
</ul>
<b>ns3::CcHelper</b><br>
<ul>
<li><b>DlBandwidth</b>: Set Dl Bandwidth for the first carrier component</li>
<li><b>DlEarfcn</b>: Set Dl Channel [EARFCN] for the first carrier component</li>
<li><b>NumberOfComponentCarriers</b>: Set the number of Component Carriers to setup per eNodeBCurrently the maximum Number of Component Carriers allowed is 2</li>
<li><b>UlBandwidth</b>: Set Dl Bandwidth for the first carrier component</li>
<li><b>UlEarfcn</b>: Set Ul Channel [EARFCN] for the first carrier component</li>
</ul>
<b>ns3::CellScanBeamforming</b><br>
<ul>
<li><b>BeamSearchAngleStep</b>: Angle step when searching for the best beam</li>
</ul>
<b>ns3::Channel</b><br>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.</li>
</ul>
<b>ns3::ChannelListPriv</b><br>
<ul>
<li><b>ChannelList</b>: The list of all channels created during the simulation.</li>
</ul>
<b>ns3::CobaltQueueDisc</b><br>
<ul>
<li><b>BlueThreshold</b>: The Threshold after which Blue is enabled</li>
<li><b>CeThreshold</b>: The CoDel CE threshold for marking packets</li>
<li><b>Decrement</b>: Pdrop decrement Value</li>
<li><b>Increment</b>: Pdrop increment value</li>
<li><b>Interval</b>: The Cobalt algorithm interval</li>
<li><b>MaxSize</b>: The maximum number of packets/bytes accepted by this queue disc.</li>
<li><b>Pdrop</b>: Marking Probability</li>
<li><b>Target</b>: The Cobalt algorithm target queue delay</li>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)</li>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)</li>
</ul>
<b>ns3::CoDelQueueDisc</b><br>
<ul>
<li><b>CeThreshold</b>: The CoDel CE threshold for marking packets</li>
<li><b>Interval</b>: The CoDel algorithm interval</li>
<li><b>MaxSize</b>: The maximum number of packets/bytes accepted by this queue disc.</li>
<li><b>MinBytes</b>: The CoDel algorithm minbytes parameter.</li>
<li><b>Target</b>: The CoDel algorithm target queue delay</li>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)</li>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)</li>
</ul>
<b>ns3::ComponentCarrier</b><br>
<ul>
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to</li>
<li><b>CsgIndication</b>: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.</li>
<li><b>DlBandwidth</b>: Downlink Transmission Bandwidth Configuration in number of Resource Blocks</li>
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.</li>
<li><b>PrimaryCarrier</b>: If true, this Carrier Component will be the Primary Carrier Component (PCC) Only one PCC per eNodeB is (currently) allowed</li>
<li><b>UlBandwidth</b>: Uplink Transmission Bandwidth Configuration in number of Resource Blocks</li>
<li><b>UlEarfcn</b>: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.</li>
</ul>
<b>ns3::ComponentCarrierEnb</b><br>
<ul>
<li><b>FfMacScheduler</b>: The scheduler associated to this EnbNetDevice</li>
<li><b>LteEnbMac</b>: The MAC associated to this EnbNetDevice</li>
<li><b>LteEnbPhy</b>: The PHY associated to this EnbNetDevice</li>
<li><b>LteFfrAlgorithm</b>: The FFR algorithm associated to this EnbNetDevice</li>
</ul>
<b>ns3::ComponentCarrierUe</b><br>
<ul>
<li><b>LteUeMac</b>: The MAC associated to this UeNetDevice</li>
<li><b>LteUePhy</b>: The PHY associated to this EnbNetDevice</li>
</ul>
<b>ns3::ConfigStore</b><br>
<ul>
<li><b>FileFormat</b>: Type of file format</li>
<li><b>Filename</b>: The file where the configuration should be saved to or loaded from.</li>
<li><b>Mode</b>: Configuration mode</li>
<li><b>SaveDeprecated</b>: Save DEPRECATED attributes</li>
</ul>
<b>ns3::ConstantRandomVariable</b><br>
<ul>
<li><b>Constant</b>: The constant value returned by this RNG stream.</li>
</ul>
<b>ns3::ConstantRateWifiManager</b><br>
<ul>
<li><b>ControlMode</b>: The transmission mode to use for every RTS packet transmission.</li>
<li><b>DataMode</b>: The transmission mode to use for every data packet transmission</li>
</ul>
<b>ns3::ConstantSpectrumPropagationLossModel</b><br>
<ul>
<li><b>Loss</b>: Path loss (dB) between transmitter and receiver</li>
</ul>
<b>ns3::ConstantSpeedPropagationDelayModel</b><br>
<ul>
<li><b>Speed</b>: The propagation speed (m/s) in the propagation medium being considered. The default value is the propagation speed of light in the vacuum.</li>
</ul>
<b>ns3::CosineAntennaModel</b><br>
<ul>
<li><b>HorizontalBeamwidth</b>: The 3 dB horizontal beamwidth (degrees). A beamwidth of 360 deg corresponds to constant gain</li>
<li><b>MaxGain</b>: The gain (dB) at the antenna boresight (the direction of maximum gain)</li>
<li><b>Orientation</b>: The angle (degrees) that expresses the orientation of the antenna on the x-y plane relative to the x axis</li>
<li><b>VerticalBeamwidth</b>: The 3 dB vertical beamwidth (degrees). A beamwidth of 360 deg corresponds to constant gain</li>
</ul>
<b>ns3::Cost231PropagationLossModel</b><br>
<ul>
<li><b>BSAntennaHeight</b>: BS Antenna Height (default is 50m).</li>
<li><b>Frequency</b>: The Frequency  (default is 2.3 GHz).</li>
<li><b>Lambda</b>: The wavelength  (default is 2.3 GHz at 300 000 km/s).</li>
<li><b>MinDistance</b>: The distance under which the propagation model refuses to give results (m).</li>
<li><b>SSAntennaHeight</b>: SS Antenna Height (default is 3m).</li>
</ul>
<b>ns3::CqaFfMacScheduler</b><br>
<ul>
<li><b>CqaMetric</b>: CqaFfMacScheduler metric type that can be: CqaFf, CqaPf</li>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::CsmaChannel</b><br>
<ul>
<li><b>DataRate</b>: The transmission data rate to be provided to devices connected to the channel</li>
<li><b>Delay</b>: Transmission delay through the channel</li>
</ul>
<b>ns3::CsmaNetDevice</b><br>
<ul>
<li><b>Address</b>: The MAC address of this device.</li>
<li><b>EncapsulationMode</b>: The link-layer encapsulation type to use.</li>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
<li><b>ReceiveEnable</b>: Enable or disable the receiver section of the device.</li>
<li><b>ReceiveErrorModel</b>: The receiver error model used to simulate packet loss</li>
<li><b>SendEnable</b>: Enable or disable the transmitter section of the device.</li>
<li><b>TxQueue</b>: A queue to use as the transmit queue in the device.</li>
</ul>
<b>ns3::DashClient</b><br>
<ul>
<li><b>Protocol</b>: The type of TCP protocol to use.</li>
<li><b>Remote</b>: The address of the destination</li>
<li><b>TargetDt</b>: The target buffering time</li>
<li><b>VideoId</b>: The Id of the video that is played.</li>
<li><b>bufferSpace</b>: The buffer space in bytes</li>
<li><b>window</b>: The window for measuring the average throughput (Time)</li>
</ul>
<b>ns3::DashServer</b><br>
<ul>
<li><b>Local</b>: The Address on which to Bind the rx socket.</li>
<li><b>Protocol</b>: The type id of the protocol to use for the rx socket.</li>
</ul>
<b>ns3::DataCollectionObject</b><br>
<ul>
<li><b>Enabled</b>: Object's enabled status</li>
<li><b>Name</b>: Object's name</li>
</ul>
<b>ns3::DefaultEmlsrManager</b><br>
<ul>
<li><b>SwitchAuxPhy</b>: Whether Aux PHY should switch channel to operate on the link on which the Main PHY was operating before moving to the link of the Aux PHY.</li>
</ul>
<b>ns3::DhcpClient</b><br>
<ul>
<li><b>Collect</b>: Time for which offer collection starts</li>
<li><b>RTRS</b>: Time for retransmission of Discover message</li>
<li><b>ReRequest</b>: Time after which request will be resent to next server</li>
<li><b>Transactions</b>: The possible value of transaction numbers</li>
</ul>
<b>ns3::DhcpServer</b><br>
<ul>
<li><b>FirstAddress</b>: The First valid address that can be given.</li>
<li><b>Gateway</b>: Address of default gateway</li>
<li><b>LastAddress</b>: The Last valid address that can be given.</li>
<li><b>LeaseTime</b>: Lease for which address will be leased.</li>
<li><b>PoolAddresses</b>: Pool of addresses to provide on request.</li>
<li><b>PoolMask</b>: Mask of the pool of addresses.</li>
<li><b>RebindTime</b>: Time after which client should rebind.</li>
<li><b>RenewTime</b>: Time after which client should renew.</li>
</ul>
<b>ns3::DistanceBasedThreeGppSpectrumPropagationLossModel</b><br>
<ul>
<li><b>MaxDistance</b>: The maximum distance in meters between nodes in order to calculate fast fading and beamforming.For all signals for which nodes are at higher distance will be returned 0 PSD.</li>
</ul>
<b>ns3::dot11s::AirtimeLinkMetricCalculator</b><br>
<ul>
<li><b>Dot11MetricTid</b>: TID used to calculate metric (data rate)</li>
<li><b>TestLength</b>: Number of bytes in test frame (a constant 1024 in the standard)</li>
</ul>
<b>ns3::dot11s::HwmpProtocol</b><br>
<ul>
<li><b>DoFlag</b>: Destination only HWMP flag</li>
<li><b>Dot11MeshHWMPactivePathTimeout</b>: Lifetime of reactive routing information</li>
<li><b>Dot11MeshHWMPactiveRootTimeout</b>: Lifetime of proactive routing information</li>
<li><b>Dot11MeshHWMPmaxPREQretries</b>: Maximum number of retries before we suppose the destination to be unreachable</li>
<li><b>Dot11MeshHWMPnetDiameterTraversalTime</b>: Time we suppose the packet to go from one edge of the network to another</li>
<li><b>Dot11MeshHWMPpathToRootInterval</b>: Interval between two successive proactive PREQs</li>
<li><b>Dot11MeshHWMPperrMinInterval</b>: Minimal interval between to successive PREQs</li>
<li><b>Dot11MeshHWMPpreqMinInterval</b>: Minimal interval between to successive PREQs</li>
<li><b>Dot11MeshHWMPrannInterval</b>: Lifetime of proactive routing information</li>
<li><b>MaxQueueSize</b>: Maximum number of packets we can store when resolving route</li>
<li><b>MaxTtl</b>: Initial value of Time To Live field</li>
<li><b>RandomStart</b>: Random delay at first proactive PREQ</li>
<li><b>RfFlag</b>: Reply and forward flag</li>
<li><b>UnicastDataThreshold</b>: Maximum number of broadcast receivers, when we send a broadcast as a chain of unicasts</li>
<li><b>UnicastPerrThreshold</b>: Maximum number of PERR receivers, when we send a PERR as a chain of unicasts</li>
<li><b>UnicastPreqThreshold</b>: Maximum number of PREQ receivers, when we send a PREQ as a chain of unicasts</li>
</ul>
<b>ns3::dot11s::PeerLink</b><br>
<ul>
<li><b>ConfirmTimeout</b>: Confirm timeout</li>
<li><b>HoldingTimeout</b>: Holding timeout</li>
<li><b>MaxBeaconLoss</b>: Maximum number of lost beacons before link will be closed</li>
<li><b>MaxPacketFailure</b>: Maximum number of failed packets before link will be closed</li>
<li><b>MaxRetries</b>: Maximum number of retries</li>
<li><b>RetryTimeout</b>: Retry timeout</li>
</ul>
<b>ns3::dot11s::PeerManagementProtocol</b><br>
<ul>
<li><b>EnableBeaconCollisionAvoidance</b>: Enable/Disable Beacon collision avoidance.</li>
<li><b>MaxBeaconShiftValue</b>: Maximum number of TUs for beacon shifting</li>
<li><b>MaxNumberOfPeerLinks</b>: Maximum number of peer links</li>
</ul>
<b>ns3::Dot11sStack</b><br>
<ul>
<li><b>Root</b>: The MAC address of root mesh point.</li>
</ul>
<b>ns3::DropTailQueue<Packet></b><br>
<ul>
<li><b>MaxSize</b>: The max queue size</li>
</ul>
<b>ns3::DropTailQueue<QueueDiscItem></b><br>
<ul>
<li><b>MaxSize</b>: The max queue size</li>
</ul>
<b>ns3::dsdv::RoutingProtocol</b><br>
<ul>
<li><b>EnableBuffering</b>: Enables buffering of data packets if no route to destination is available</li>
<li><b>EnableRouteAggregation</b>: Enables Weighted Settling Time for the updates before advertising</li>
<li><b>EnableWST</b>: Enables Weighted Settling Time for the updates before advertising</li>
<li><b>Holdtimes</b>: Times the forwarding Interval to purge the route.</li>
<li><b>MaxQueueLen</b>: Maximum number of packets that we allow a routing protocol to buffer.</li>
<li><b>MaxQueueTime</b>: Maximum time packets can be queued (in seconds)</li>
<li><b>MaxQueuedPacketsPerDst</b>: Maximum number of packets that we allow per destination to buffer.</li>
<li><b>PeriodicUpdateInterval</b>: Periodic interval between exchange of full routing tables among nodes.</li>
<li><b>RouteAggregationTime</b>: Time to aggregate updates before sending them out (in seconds)</li>
<li><b>SettlingTime</b>: Minimum time an update is to be stored in adv table before sending out in case of change in metric (in seconds)</li>
<li><b>WeightedFactor</b>: WeightedFactor for the settling time if Weighted Settling Time is enabled</li>
</ul>
<b>ns3::dsr::DsrOptions</b><br>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.</li>
</ul>
<b>ns3::dsr::DsrRouting</b><br>
<ul>
<li><b>BlacklistTimeout</b>: The time for a neighbor to stay in blacklist.</li>
<li><b>BroadcastJitter</b>: The jitter time to avoid collision for broadcast packets.</li>
<li><b>CacheType</b>: Use Link Cache or use Path Cache</li>
<li><b>DiscoveryHopLimit</b>: The max discovery hop limit for route requests.</li>
<li><b>EnableSubRoute</b>: Enables saving of sub route when receiving route error messages, only available when using path route cache</li>
<li><b>GraReplyTableSize</b>: The gratuitous reply table size.</li>
<li><b>GratReplyHoldoff</b>: The time for gratuitous reply entry to expire.</li>
<li><b>InitStability</b>: The initial stability factor for link cache</li>
<li><b>LinkAckTimeout</b>: The time a packet in maintenance buffer wait for link acknowledgment.</li>
<li><b>LinkAcknowledgment</b>: Enable Link layer acknowledgment mechanism</li>
<li><b>MaintenanceRetries</b>: Maximum number of retransmissions for data packets from maintenance buffer.</li>
<li><b>MaxCacheLen</b>: Maximum number of route entries that can be stored in route cache.</li>
<li><b>MaxEntriesEachDst</b>: Maximum number of route entries for a single destination to respond.</li>
<li><b>MaxMaintLen</b>: Maximum number of packets that can be stored in maintenance buffer.</li>
<li><b>MaxMaintTime</b>: Maximum time packets can be queued in maintenance buffer.</li>
<li><b>MaxNetworkQueueDelay</b>: The max time for a packet to stay in the network queue.</li>
<li><b>MaxNetworkQueueSize</b>: The max number of packet to save in the network queue.</li>
<li><b>MaxRequestPeriod</b>: The max time interval between route requests.</li>
<li><b>MaxSalvageCount</b>: The max salvage count for a single data packet.</li>
<li><b>MaxSendBuffLen</b>: Maximum number of packets that can be stored in send buffer.</li>
<li><b>MaxSendBuffTime</b>: Maximum time packets can be queued in the send buffer .</li>
<li><b>MinLifeTime</b>: The minimal life time for link cache</li>
<li><b>NodeTraversalTime</b>: The time it takes to traverse two neighboring nodes.</li>
<li><b>NonPropRequestTimeout</b>: The timeout value for non-propagation request.</li>
<li><b>NumPriorityQueues</b>: The max number of packet to save in the network queue.</li>
<li><b>PassiveAckTimeout</b>: The time a packet in maintenance buffer wait for passive acknowledgment.</li>
<li><b>PassiveBuffer</b>: The passive buffer to manage promisucously received passive ack.</li>
<li><b>RequestIdSize</b>: Maximum number of request source Ids in the request table.</li>
<li><b>RequestPeriod</b>: The base time interval between route requests.</li>
<li><b>RequestTableSize</b>: Maximum number of request entries in the request table, set this as the number of nodes in the simulation.</li>
<li><b>RetransIncr</b>: The increase time for retransmission timer when facing network congestion</li>
<li><b>RouteCache</b>: The route cache for saving routes from route discovery process.</li>
<li><b>RouteCacheTimeout</b>: Maximum time the route cache can be queued in route cache.</li>
<li><b>RreqRetries</b>: Maximum number of retransmissions for request discovery of a route.</li>
<li><b>RreqTable</b>: The request table to manage route requests.</li>
<li><b>SendBuffInterval</b>: How often to check send buffer for packet with route.</li>
<li><b>StabilityDecrFactor</b>: The stability decrease factor for link cache</li>
<li><b>StabilityIncrFactor</b>: The stability increase factor for link cache</li>
<li><b>TryLinkAcks</b>: The number of link acknowledgment to use.</li>
<li><b>TryPassiveAcks</b>: The number of passive acknowledgment to use.</li>
<li><b>UniqueRequestIdSize</b>: Maximum number of request Ids in the request table for a single destination.</li>
<li><b>UseExtends</b>: The extension time for link cache</li>
</ul>
<b>ns3::DynamicQueueLimits</b><br>
<ul>
<li><b>HoldTime</b>: The DQL algorithm hold time</li>
<li><b>MaxLimit</b>: Maximum limit</li>
<li><b>MinLimit</b>: Minimum limit</li>
</ul>
<b>ns3::EhtConfiguration</b><br>
<ul>
<li><b>EmlsrActivated</b>: Whether EMLSR option is activated. If activated, EMLSR mode can be enabled on the EMLSR links by an installed EMLSR Manager.</li>
<li><b>TidToLinkMappingDl</b>: A list-of-TIDs-indexed map of the list of links where the TIDs are mapped to for the downlink direction. In case a string is used to set this attribute, the string shall contain the (TID list, link list) pairs separated by a semicolon (;); in every pair, the TID list and the link list are separated by a blank space, and the elements of each list are separated by a comma (,) without spaces. E.g., "0,4 1,2,3; 1 0;2 0,1" means that TIDs 0 and 4 are mapped on links 1, 2 and 3; TID 1 is mapped on link 0 and TID 2 is mapped on links 0 and 1. An empty map indicates the default mapping, i.e., all TIDs are mapped to all setup links. If the map contains the mapping for some TID(s), the mapping corresponding to the missing TID(s) remains unchanged. A non-AP MLD includes this mapping in the Association Request frame sent to an AP MLD, unless the AP MLD advertises a negotiation support of 1 and this mapping is such that TIDs are mapped to distinct link sets, in which case the default mapping is included.</li>
<li><b>TidToLinkMappingNegSupport</b>: TID-to-Link Mapping Negotiation Support.</li>
<li><b>TidToLinkMappingUl</b>: A list-of-TIDs-indexed map of the list of links where the TIDs are mapped to for the uplink direction. In case a string is used to set this attribute, the string shall contain the (TID list, link list) pairs separated by a semicolon (;); in every pair, the TID list and the link list are separated by a blank space, and the elements of each list are separated by a comma (,) without spaces. E.g., "0,4 1,2,3; 1 0;2 0,1" means that TIDs 0 and 4 are mapped on links 1, 2 and 3; TID 1 is mapped on link 0 and TID 2 is mapped on links 0 and 1. An empty map indicates the default mapping, i.e., all TIDs are mapped to all setup links. If the map contains the mapping for some TID(s), the mapping corresponding to the missing TID(s) remains unchanged. A non-AP MLD includes this mapping in the Association Request frame sent to an AP MLD, unless the AP MLD advertises a negotiation support of 1 and this mapping is such that TIDs are mapped to distinct link sets, in which case the default mapping is included.</li>
<li><b>TransitionTimeout</b>: The Transition Timeout (not used by non-AP MLDs). Possible values are 0us or 2^n us, with n=7..16.</li>
</ul>
<b>ns3::EmlsrManager</b><br>
<ul>
<li><b>AuxPhyChannelWidth</b>: The maximum channel width (MHz) supported by Aux PHYs</li>
<li><b>EmlsrLinkSet</b>: IDs of the links on which EMLSR mode will be enabled. An empty set indicates to disable EMLSR.</li>
<li><b>EmlsrPaddingDelay</b>: The EMLSR Paddind Delay (not used by AP MLDs). Possible values are 0 us, 32 us, 64 us, 128 us or 256 us.</li>
<li><b>EmlsrTransitionDelay</b>: The EMLSR Transition Delay (not used by AP MLDs). Possible values are 0 us, 16 us, 32 us, 64 us, 128 us or 256 us.</li>
<li><b>MainPhyId</b>: The ID of the main PHY (position in the vector of PHYs held by WifiNetDevice). This attribute cannot be set after initialization.</li>
<li><b>ResetCamState</b>: Whether to reset the state of the ChannelAccessManager associated with the link on which the main PHY has just switched to.</li>
</ul>
<b>ns3::EmpiricalRandomVariable</b><br>
<ul>
<li><b>Interpolate</b>: Treat the CDF as a smooth distribution and interpolate, default is to treat the CDF as a histogram and sample.</li>
</ul>
<b>ns3::EmuEpcHelper</b><br>
<ul>
<li><b>EnbDeviceName</b>: The name of the device used for the S1-U interface of the eNB</li>
<li><b>EnbMacAddressBase</b>: First 5 bytes of the eNB MAC address base</li>
<li><b>SgwDeviceName</b>: The name of the device used for the S1-U interface of the SGW</li>
<li><b>SgwMacAddress</b>: MAC address used for the SGW</li>
</ul>
<b>ns3::EpsBearer</b><br>
<ul>
<li><b>Release</b>: Change from 11 to 18 if you need bearer definition as per newer Releases. Reference document: TS 23.203. The change does not impact other LTE code than  bearers definition.</li>
</ul>
<b>ns3::EpsBearerTag</b><br>
<ul>
<li><b>bid</b>: The EPS bearer id within the UE to which the packet belongs</li>
<li><b>rnti</b>: The rnti that indicates the UE which packet belongs</li>
</ul>
<b>ns3::ErlangRandomVariable</b><br>
<ul>
<li><b>K</b>: The k value for the Erlang distribution returned by this RNG stream.</li>
<li><b>Lambda</b>: The lambda value for the Erlang distribution returned by this RNG stream.</li>
</ul>
<b>ns3::ErrorModel</b><br>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.</li>
</ul>
<b>ns3::ExponentialRandomVariable</b><br>
<ul>
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream.</li>
<li><b>Mean</b>: The mean of the values returned by this RNG stream.</li>
</ul>
<b>ns3::FcfsWifiQueueScheduler</b><br>
<ul>
<li><b>DropPolicy</b>: Upon enqueue with full queue, drop oldest (DropOldest) or newest (DropNewest) packet</li>
</ul>
<b>ns3::FdBetFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::FdMtFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::FdNetDevice</b><br>
<ul>
<li><b>Address</b>: The MAC address of this device.</li>
<li><b>EncapsulationMode</b>: The link-layer encapsulation type to use.</li>
<li><b>RxQueueSize</b>: Maximum size of the read queue.  This value limits number of packets that have been read from the network into a memory buffer but have not yet been processed by the simulator.</li>
<li><b>Start</b>: The simulation time at which to spin up the device thread.</li>
<li><b>Stop</b>: The simulation time at which to tear down the device thread.</li>
</ul>
<b>ns3::FdTbfqFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>CreditLimit</b>: Flow credit limit (default 625000 bytes)</li>
<li><b>CreditableThreshold</b>: Threshold of flow credit (default 0 bytes)</li>
<li><b>DebtLimit</b>: Flow debt limit (default -625000 bytes)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>TokenPoolSize</b>: The maximum value of flow token pool (default 1 bytes)</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::FfMacScheduler</b><br>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received</li>
</ul>
<b>ns3::FifoQueueDisc</b><br>
<ul>
<li><b>MaxSize</b>: The max queue size</li>
</ul>
<b>ns3::FixedRssLossModel</b><br>
<ul>
<li><b>Rss</b>: The fixed receiver Rss.</li>
</ul>
<b>ns3::flame::FlameProtocol</b><br>
<ul>
<li><b>BroadcastInterval</b>: How often we must send broadcast packets</li>
<li><b>MaxCost</b>: Cost threshold after which packet will be dropped</li>
</ul>
<b>ns3::flame::FlameRtable</b><br>
<ul>
<li><b>Lifetime</b>: The lifetime of the routing entry</li>
</ul>
<b>ns3::FlowMonitor</b><br>
<ul>
<li><b>DelayBinWidth</b>: The width used in the delay histogram.</li>
<li><b>FlowInterruptionsBinWidth</b>: The width used in the flowInterruptions histogram.</li>
<li><b>FlowInterruptionsMinTime</b>: The minimum inter-arrival time that is considered a flow interruption.</li>
<li><b>JitterBinWidth</b>: The width used in the jitter histogram.</li>
<li><b>MaxPerHopDelay</b>: The maximum per-hop delay that should be considered.  Packets still not received after this delay are to be considered lost.</li>
<li><b>PacketSizeBinWidth</b>: The width used in the packetSize histogram.</li>
<li><b>StartTime</b>: The time when the monitoring starts.</li>
</ul>
<b>ns3::FqCobaltQueueDisc</b><br>
<ul>
<li><b>BlueThreshold</b>: The Threshold after which Blue is enabled</li>
<li><b>CeThreshold</b>: The FqCobalt CE threshold for marking packets</li>
<li><b>Decrement</b>: Pdrop decrement Value</li>
<li><b>DropBatchSize</b>: The maximum number of packets dropped from the fat flow</li>
<li><b>EnableSetAssociativeHash</b>: Enable/Disable Set Associative Hash</li>
<li><b>Flows</b>: The number of queues into which the incoming packets are classified</li>
<li><b>Increment</b>: Pdrop increment value</li>
<li><b>Interval</b>: The CoDel algorithm interval for each FqCobalt queue</li>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc</li>
<li><b>Pdrop</b>: Marking Probability</li>
<li><b>Perturbation</b>: The salt used as an additional input to the hash function used to classify packets</li>
<li><b>SetWays</b>: The size of a set of queues (used by set associative hash)</li>
<li><b>Target</b>: The CoDel algorithm target queue delay for each FqCobalt queue</li>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)</li>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)</li>
</ul>
<b>ns3::FqCoDelQueueDisc</b><br>
<ul>
<li><b>CeThreshold</b>: The FqCoDel CE threshold for marking packets</li>
<li><b>DropBatchSize</b>: The maximum number of packets dropped from the fat flow</li>
<li><b>EnableSetAssociativeHash</b>: Enable/Disable Set Associative Hash</li>
<li><b>Flows</b>: The number of queues into which the incoming packets are classified</li>
<li><b>Interval</b>: The CoDel algorithm interval for each FQCoDel queue</li>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc</li>
<li><b>Perturbation</b>: The salt used as an additional input to the hash function used to classify packets</li>
<li><b>SetWays</b>: The size of a set of queues (used by set associative hash)</li>
<li><b>Target</b>: The CoDel algorithm target queue delay for each FQCoDel queue</li>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)</li>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)</li>
</ul>
<b>ns3::FqPieQueueDisc</b><br>
<ul>
<li><b>A</b>: Value of alpha</li>
<li><b>B</b>: Value of beta</li>
<li><b>CeThreshold</b>: The FqPie CE threshold for marking packets</li>
<li><b>DequeueThreshold</b>: Minimum queue size in bytes before dequeue rate is measured</li>
<li><b>DropBatchSize</b>: The maximum number of packets dropped from the fat flow</li>
<li><b>EnableSetAssociativeHash</b>: Enable/Disable Set Associative Hash</li>
<li><b>Flows</b>: The number of queues into which the incoming packets are classified</li>
<li><b>MarkEcnThreshold</b>: ECN marking threshold (RFC 8033 suggests 0.1 (i.e., 10%) default)</li>
<li><b>MaxBurstAllowance</b>: Current max burst allowance before random drop</li>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc</li>
<li><b>MeanPktSize</b>: Average of packet size</li>
<li><b>Perturbation</b>: The salt used as an additional input to the hash function used to classify packets</li>
<li><b>QueueDelayReference</b>: Desired queue delay</li>
<li><b>SetWays</b>: The size of a set of queues (used by set associative hash)</li>
<li><b>Supdate</b>: Start time of the update timer</li>
<li><b>Tupdate</b>: Time period to calculate drop probability</li>
<li><b>UseCapDropAdjustment</b>: Enable/Disable Cap Drop Adjustment feature mentioned in RFC 8033</li>
<li><b>UseDequeueRateEstimator</b>: Enable/Disable usage of Dequeue Rate Estimator</li>
<li><b>UseDerandomization</b>: Enable/Disable Derandomization feature mentioned in RFC 8033</li>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)</li>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)</li>
</ul>
<b>ns3::FrameCaptureModel</b><br>
<ul>
<li><b>CaptureWindow</b>: The duration of the capture window.</li>
</ul>
<b>ns3::FriisPropagationLossModel</b><br>
<ul>
<li><b>Frequency</b>: The carrier frequency (in Hz) at which propagation occurs (default is 5.15 GHz).</li>
<li><b>MinLoss</b>: The minimum value (dB) of the total loss, used at short ranges.</li>
<li><b>SystemLoss</b>: The system loss</li>
</ul>
<b>ns3::GammaRandomVariable</b><br>
<ul>
<li><b>Alpha</b>: The alpha value for the gamma distribution returned by this RNG stream.</li>
<li><b>Beta</b>: The beta value for the gamma distribution returned by this RNG stream.</li>
</ul>
<b>ns3::GaussMarkovMobilityModel</b><br>
<ul>
<li><b>Alpha</b>: A constant representing the tunable parameter in the Gauss-Markov model.</li>
<li><b>Bounds</b>: Bounds of the area to cruise.</li>
<li><b>MeanDirection</b>: A random variable used to assign the average direction.</li>
<li><b>MeanPitch</b>: A random variable used to assign the average pitch.</li>
<li><b>MeanVelocity</b>: A random variable used to assign the average velocity.</li>
<li><b>NormalDirection</b>: A gaussian random variable used to calculate the next direction value.</li>
<li><b>NormalPitch</b>: A gaussian random variable used to calculate the next pitch value.</li>
<li><b>NormalVelocity</b>: A gaussian random variable used to calculate the next velocity value.</li>
<li><b>TimeStep</b>: Change current direction and speed after moving for this time.</li>
</ul>
<b>ns3::GenericBatteryModel</b><br>
<ul>
<li><b>BatteryType</b>: Indicates the battery type used by the model</li>
<li><b>CutoffVoltage</b>: The voltage where the battery is considered depleted (V).</li>
<li><b>ExponentialCapacity</b>: (Q_exp) Cell Capacity at the end of the exponential zone (Ah).</li>
<li><b>ExponentialVoltage</b>: (V_exp) Cell voltage at the end of the exponential zone (V).</li>
<li><b>FullVoltage</b>: (Q_full) The voltage of the cell when fully charged (V).</li>
<li><b>InternalResistance</b>: (R) Internal resistance of the cell (Ohms)</li>
<li><b>LowBatteryThreshold</b>: Low battery threshold for generic battery model.</li>
<li><b>MaxCapacity</b>: (Q) The maximum capacity of the cell (Ah).</li>
<li><b>NominalCapacity</b>: (Q_nom) Cell capacity at the end of the nominal zone (Ah)</li>
<li><b>NominalVoltage</b>: (V_nom) Nominal voltage of the cell (V).</li>
<li><b>PeriodicEnergyUpdateInterval</b>: Time between two consecutive periodic energy updates.</li>
<li><b>TypicalDischargeCurrent</b>: Typical discharge current used in manufacters datasheets (A)</li>
</ul>
<b>ns3::GridBuildingAllocator</b><br>
<ul>
<li><b>DeltaX</b>: The x space between buildings.</li>
<li><b>DeltaY</b>: The y space between buildings.</li>
<li><b>GridWidth</b>: The number of objects laid out on a line.</li>
<li><b>Height</b>: The height of the building (roof level)</li>
<li><b>LayoutType</b>: The type of layout.</li>
<li><b>LengthX</b>: The length of the wall of each building along the X axis.</li>
<li><b>LengthY</b>: The length of the wall of each building along the X axis.</li>
<li><b>MinX</b>: The x coordinate where the grid starts.</li>
<li><b>MinY</b>: The y coordinate where the grid starts.</li>
</ul>
<b>ns3::GridPositionAllocator</b><br>
<ul>
<li><b>DeltaX</b>: The x space between objects.</li>
<li><b>DeltaY</b>: The y space between objects.</li>
<li><b>GridWidth</b>: The number of objects laid out on a line.</li>
<li><b>LayoutType</b>: The type of layout.</li>
<li><b>MinX</b>: The x coordinate where the grid starts.</li>
<li><b>MinY</b>: The y coordinate where the grid starts.</li>
<li><b>Z</b>: The z coordinate of all the positions allocated.</li>
</ul>
<b>ns3::HalfDuplexIdealPhy</b><br>
<ul>
<li><b>Rate</b>: The PHY rate used by this device</li>
</ul>
<b>ns3::HeConfiguration</b><br>
<ul>
<li><b>BeMuEdcaTimer</b>: The MU EDCA Timer used by BE EDCA. It must be a multiple of 8192 us and must be in the range from 8.192 ms to 2088.96 ms. 0 is a reserved value, but we allow to use this value to indicate that an MU EDCA Parameter Set element must not be sent. Therefore, 0 can only be used if the MU EDCA Timer for all ACs is set to 0.</li>
<li><b>BkMuEdcaTimer</b>: The MU EDCA Timer used by BK EDCA. It must be a multiple of 8192 us and must be in the range from 8.192 ms to 2088.96 ms.0 is a reserved value, but we allow to use this value to indicate that an MU EDCA Parameter Set element must not be sent. Therefore, 0 can only be used if the MU EDCA Timer for all ACs is set to 0.</li>
<li><b>BssColor</b>: The BSS color</li>
<li><b>GuardInterval</b>: Specify the shortest guard interval duration that can be used for HE transmissions.Possible values are 800ns, 1600ns or 3200ns.</li>
<li><b>MaxTbPpduDelay</b>: If positive, the value of this attribute specifies the maximum delay with which a TB PPDU can be received after the reception of the first TB PPDU. If the delay is higher than this value, the TB PPDU is dropped and considered interference. The maximum delay is anyway capped at the duration of the training fields in the PPDU. This attribute is only valid for APs.</li>
<li><b>MpduBufferSize</b>: The MPDU buffer size for receiving A-MPDUs</li>
<li><b>MuBeAifsn</b>: AIFSN used by BE EDCA when the MU EDCA Timer is running. It must be either zero (EDCA disabled) or a value from 2 to 15.</li>
<li><b>MuBeCwMax</b>: CWmax used by BE EDCA when the MU EDCA Timer is running. It must be a power of 2 minus 1 in the range from 0 to 32767.</li>
<li><b>MuBeCwMin</b>: CWmin used by BE EDCA when the MU EDCA Timer is running. It must be a power of 2 minus 1 in the range from 0 to 32767.</li>
<li><b>MuBkAifsn</b>: AIFSN used by BK EDCA when the MU EDCA Timer is running. It must be either zero (EDCA disabled) or a value from 2 to 15.</li>
<li><b>MuBkCwMax</b>: CWmax used by BK EDCA when the MU EDCA Timer is running. It must be a power of 2 minus 1 in the range from 0 to 32767.</li>
<li><b>MuBkCwMin</b>: CWmin used by BK EDCA when the MU EDCA Timer is running. It must be a power of 2 minus 1 in the range from 0 to 32767.</li>
<li><b>MuViAifsn</b>: AIFSN used by VI EDCA when the MU EDCA Timer is running. It must be either zero (EDCA disabled) or a value from 2 to 15.</li>
<li><b>MuViCwMax</b>: CWmax used by VI EDCA when the MU EDCA Timer is running. It must be a power of 2 minus 1 in the range from 0 to 32767.</li>
<li><b>MuViCwMin</b>: CWmin used by VI EDCA when the MU EDCA Timer is running. It must be a power of 2 minus 1 in the range from 0 to 32767.</li>
<li><b>MuVoAifsn</b>: AIFSN used by VO EDCA when the MU EDCA Timer is running. It must be either zero (EDCA disabled) or a value from 2 to 15.</li>
<li><b>MuVoCwMax</b>: CWmax used by VO EDCA when the MU EDCA Timer is running. It must be a power of 2 minus 1 in the range from 0 to 32767.</li>
<li><b>MuVoCwMin</b>: CWmin used by VO EDCA when the MU EDCA Timer is running. It must be a power of 2 minus 1 in the range from 0 to 32767.</li>
<li><b>ViMuEdcaTimer</b>: The MU EDCA Timer used by VI EDCA. It must be a multiple of 8192 us and must be in the range from 8.192 ms to 2088.96 ms.0 is a reserved value, but we allow to use this value to indicate that an MU EDCA Parameter Set element must not be sent. Therefore, 0 can only be used if the MU EDCA Timer for all ACs is set to 0.</li>
<li><b>VoMuEdcaTimer</b>: The MU EDCA Timer used by VO EDCA. It must be a multiple of 8192 us and must be in the range from 8.192 ms to 2088.96 ms.0 is a reserved value, but we allow to use this value to indicate that an MU EDCA Parameter Set element must not be sent. Therefore, 0 can only be used if the MU EDCA Timer for all ACs is set to 0.</li>
</ul>
<b>ns3::HierarchicalMobilityModel</b><br>
<ul>
<li><b>Child</b>: The child mobility model.</li>
<li><b>Parent</b>: The parent mobility model.</li>
</ul>
<b>ns3::HtConfiguration</b><br>
<ul>
<li><b>LdpcSupported</b>: Whether or not LDPC coding is supported.</li>
<li><b>ShortGuardIntervalSupported</b>: Whether or not short guard interval is supported.</li>
<li><b>Support40MHzOperation</b>: Whether or not 40 MHz operation is to be supported.</li>
</ul>
<b>ns3::HybridBuildingsPropagationLossModel</b><br>
<ul>
<li><b>CitySize</b>: Dimension of the city</li>
<li><b>Environment</b>: Environment Scenario</li>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).</li>
<li><b>Los2NlosThr</b>:  Threshold from LoS to NLoS in ITU 1411 [m].</li>
<li><b>RooftopLevel</b>: The height of the rooftop level in meters</li>
</ul>
<b>ns3::Icmpv6L4Protocol</b><br>
<ul>
<li><b>DAD</b>: Always do DAD check.</li>
<li><b>DadTimeout</b>: Duplicate Address Detection (DAD) timeout</li>
<li><b>DelayFirstProbe</b>: Neighbor Discovery node constants: delay for the first probe.</li>
<li><b>MaxMulticastSolicit</b>: Neighbor Discovery node constants: max multicast solicitations.</li>
<li><b>MaxUnicastSolicit</b>: Neighbor Discovery node constants: max unicast solicitations.</li>
<li><b>ReachableTime</b>: Neighbor Discovery node constants: reachable time.</li>
<li><b>RetransmissionTime</b>: Neighbor Discovery node constants: retransmission timer.</li>
<li><b>RsInitialRetransmissionTime</b>: Multicast RS initial retransmission time.</li>
<li><b>RsMaxRetransmissionCount</b>: Multicast RS maximum retransmission count (0 means unbound). Note: RFC 7559 suggest a zero value (infinite). The default is 4 to avoid non-terminating simulations.</li>
<li><b>RsMaxRetransmissionDuration</b>: Multicast RS maximum retransmission duration (0 means unbound).</li>
<li><b>RsMaxRetransmissionTime</b>: Multicast RS maximum retransmission time (0 means unbound).</li>
<li><b>RsRetransmissionJitter</b>: Multicast RS retransmission randomization quantity</li>
<li><b>SolicitationJitter</b>: The jitter in ms a node is allowed to wait before sending any solicitation. Some jitter aims to prevent collisions. By default, the model will wait for a duration in ms defined by a uniform random-variable between 0 and SolicitationJitter</li>
</ul>
<b>ns3::IdealBeamformingHelper</b><br>
<ul>
<li><b>BeamformingMethod</b>: Type of the ideal beamforming method in the case that it is enabled, by default is "cell scan" method.</li>
<li><b>BeamformingPeriodicity</b>: Interval between consecutive beamforming method executions. If set to 0 it will not be updated.</li>
</ul>
<b>ns3::IdealWifiManager</b><br>
<ul>
<li><b>BerThreshold</b>: The maximum Bit Error Rate acceptable at any transmission mode</li>
</ul>
<b>ns3::IpL4Protocol</b><br>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.</li>
</ul>
<b>ns3::Ipv4</b><br>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future Ipv4 devices.</li>
<li><b>WeakEsModel</b>: RFC1122 term for whether host accepts datagram with a dest. address on another interface</li>
</ul>
<b>ns3::Ipv4GlobalRouting</b><br>
<ul>
<li><b>RandomEcmpRouting</b>: Set to true if packets are randomly routed among ECMP; set to false for using only one route consistently</li>
<li><b>RespondToInterfaceEvents</b>: Set to true if you want to dynamically recompute the global routes upon Interface notification events (up/down, or add/remove address)</li>
</ul>
<b>ns3::Ipv4Interface</b><br>
<ul>
<li><b>ArpCache</b>: The arp cache for this ipv4 interface</li>
</ul>
<b>ns3::Ipv4L3Protocol</b><br>
<ul>
<li><b>DefaultTtl</b>: The TTL value set by default on all outgoing packets generated on this node.</li>
<li><b>DuplicateExpire</b>: Expiration delay for duplicate cache entries</li>
<li><b>EnableDuplicatePacketDetection</b>: Enable multicast duplicate packet detection based on RFC 6621</li>
<li><b>FragmentExpirationTimeout</b>: When this timeout expires, the fragments will be cleared from the buffer.</li>
<li><b>InterfaceList</b>: The set of Ipv4 interfaces associated to this Ipv4 stack.</li>
<li><b>PurgeExpiredPeriod</b>: Time between purges of expired duplicate packet entries, 0 means never purge</li>
</ul>
<b>ns3::Ipv4RawSocketImpl</b><br>
<ul>
<li><b>IcmpFilter</b>: Any icmp header whose type field matches a bit in this filter is dropped. Type must be less than 32.</li>
<li><b>IpHeaderInclude</b>: Include IP Header information (a.k.a setsockopt (IP_HDRINCL)).</li>
<li><b>Protocol</b>: Protocol number to match.</li>
</ul>
<b>ns3::Ipv6</b><br>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future IPv6 devices.</li>
<li><b>MtuDiscover</b>: If disabled, every interface will have its MTU set to 1280 bytes.</li>
</ul>
<b>ns3::Ipv6Extension</b><br>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.</li>
</ul>
<b>ns3::Ipv6ExtensionDemux</b><br>
<ul>
<li><b>Extensions</b>: The set of IPv6 extensions registered with this demux.</li>
</ul>
<b>ns3::Ipv6ExtensionFragment</b><br>
<ul>
<li><b>FragmentExpirationTimeout</b>: When this timeout expires, the fragments will be cleared from the buffer.</li>
</ul>
<b>ns3::Ipv6ExtensionRoutingDemux</b><br>
<ul>
<li><b>RoutingExtensions</b>: The set of IPv6 Routing extensions registered with this demux.</li>
</ul>
<b>ns3::Ipv6L3Protocol</b><br>
<ul>
<li><b>DefaultTclass</b>: The TCLASS value set by default on all outgoing packets generated on this node.</li>
<li><b>DefaultTtl</b>: The TTL value set by default on all outgoing packets generated on this node.</li>
<li><b>InterfaceList</b>: The set of IPv6 interfaces associated to this IPv6 stack.</li>
<li><b>SendIcmpv6Redirect</b>: Send the ICMPv6 Redirect when appropriate.</li>
<li><b>StrongEndSystemModel</b>: Reject packets for an address not configured on the interface they're coming from (RFC1122, section 3.3.4.2).</li>
</ul>
<b>ns3::Ipv6Option</b><br>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.</li>
</ul>
<b>ns3::Ipv6OptionDemux</b><br>
<ul>
<li><b>Options</b>: The set of IPv6 options registered with this demux.</li>
</ul>
<b>ns3::Ipv6PmtuCache</b><br>
<ul>
<li><b>CacheExpiryTime</b>: Validity time for a Path MTU entry. Default is 10 minutes, minimum is 5 minutes.</li>
</ul>
<b>ns3::Ipv6RawSocketImpl</b><br>
<ul>
<li><b>Protocol</b>: Protocol number to match.</li>
</ul>
<b>ns3::IsotropicAntennaModel</b><br>
<ul>
<li><b>Gain</b>: The gain of the antenna in dB</li>
</ul>
<b>ns3::ItuR1238PropagationLossModel</b><br>
<ul>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).</li>
</ul>
<b>ns3::ItuR1411LosPropagationLossModel</b><br>
<ul>
<li><b>Frequency</b>: The propagation frequency in Hz</li>
</ul>
<b>ns3::ItuR1411NlosOverRooftopPropagationLossModel</b><br>
<ul>
<li><b>BuildingSeparation</b>: The separation between buildings</li>
<li><b>BuildingsExtend</b>: The distance over which the buildings extend</li>
<li><b>CitySize</b>: Dimension of the city</li>
<li><b>Environment</b>: Environment Scenario</li>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).</li>
<li><b>RooftopLevel</b>: The height of the rooftop level in meters</li>
<li><b>StreetsOrientation</b>: The orientation of streets in degrees [0,90] with respect to the direction of propagation</li>
<li><b>StreetsWidth</b>: The width of streets</li>
</ul>
<b>ns3::JakesProcess</b><br>
<ul>
<li><b>DopplerFrequencyHz</b>: Corresponding doppler frequency[Hz]</li>
<li><b>NumberOfOscillators</b>: The number of oscillators</li>
</ul>
<b>ns3::LiIonEnergySource</b><br>
<ul>
<li><b>ExpCapacity</b>: Cell Capacity at the end of the exponential zone.</li>
<li><b>ExpCellVoltage</b>: Cell voltage at the end of the exponential zone.</li>
<li><b>InitialCellVoltage</b>: Initial (maximum) voltage of the cell (fully charged).</li>
<li><b>InternalResistance</b>: Internal resistance of the cell</li>
<li><b>LiIonEnergyLowBatteryThreshold</b>: Low battery threshold for LiIon energy source.</li>
<li><b>LiIonEnergySourceInitialEnergyJ</b>: Initial energy stored in basic energy source.</li>
<li><b>NomCapacity</b>: Cell capacity at the end of the nominal zone.</li>
<li><b>NominalCellVoltage</b>: Nominal voltage of the cell.</li>
<li><b>PeriodicEnergyUpdateInterval</b>: Time between two consecutive periodic energy updates.</li>
<li><b>RatedCapacity</b>: Rated capacity of the cell.</li>
<li><b>ThresholdVoltage</b>: Minimum threshold voltage to consider the battery depleted.</li>
<li><b>TypCurrent</b>: Typical discharge current used to fit the curves</li>
</ul>
<b>ns3::LinearWifiTxCurrentModel</b><br>
<ul>
<li><b>Eta</b>: The efficiency of the power amplifier.</li>
<li><b>IdleCurrent</b>: The current in the IDLE state (in Ampere).</li>
<li><b>Voltage</b>: The supply voltage (in Volts).</li>
</ul>
<b>ns3::LogDistancePropagationLossModel</b><br>
<ul>
<li><b>Exponent</b>: The exponent of the Path Loss propagation model</li>
<li><b>ReferenceDistance</b>: The distance at which the reference loss is calculated (m)</li>
<li><b>ReferenceLoss</b>: The reference loss at reference distance (dB). (Default is Friis at 1m with 5.15 GHz)</li>
</ul>
<b>ns3::LogNormalRandomVariable</b><br>
<ul>
<li><b>Mu</b>: The mu value for the log-normal distribution returned by this RNG stream.</li>
<li><b>Sigma</b>: The sigma value for the log-normal distribution returned by this RNG stream.</li>
</ul>
<b>ns3::LrWpanLqiTag</b><br>
<ul>
<li><b>Lqi</b>: The lqi of the last packet received</li>
</ul>
<b>ns3::LrWpanMac</b><br>
<ul>
<li><b>PanId</b>: 16-bit identifier of the associated PAN</li>
</ul>
<b>ns3::LrWpanNetDevice</b><br>
<ul>
<li><b>Channel</b>: The channel attached to this device</li>
<li><b>Mac</b>: The MAC layer attached to this device.</li>
<li><b>Phy</b>: The PHY layer attached to this device.</li>
<li><b>PseudoMacAddressMode</b>: Build the pseudo-MAC Address according to RFC 4944 or RFC 6282 (default: RFC 6282).</li>
<li><b>UseAcks</b>: Request acknowledgments for data frames.</li>
</ul>
<b>ns3::LrWpanPhy</b><br>
<ul>
<li><b>PostReceptionErrorModel</b>: An optional packet error model can be added to the receive packet process after any propagation-based (SNR-based) error models have been applied. Typically this is used to force specific packet drops, for testing purposes.</li>
</ul>
<b>ns3::LteAmc</b><br>
<ul>
<li><b>AmcModel</b>: AMC model used to assign CQI</li>
<li><b>Ber</b>: The requested BER in assigning MCS (default is 0.00005).</li>
</ul>
<b>ns3::LteAnr</b><br>
<ul>
<li><b>Threshold</b>: Minimum RSRQ range value required for detecting a neighbour cell</li>
</ul>
<b>ns3::LteDataRadioBearerInfo</b><br>
<ul>
<li><b>DrbIdentity</b>: The id of this Data Radio Bearer</li>
<li><b>EpsBearerIdentity</b>: The id of the EPS bearer corresponding to this Data Radio Bearer</li>
<li><b>LtePdcp</b>: PDCP instance of the radio bearer.</li>
<li><b>LteRlc</b>: RLC instance of the radio bearer.</li>
<li><b>logicalChannelIdentity</b>: The id of the Logical Channel corresponding to this Data Radio Bearer</li>
</ul>
<b>ns3::LteEnbMac</b><br>
<ul>
<li><b>ComponentCarrierId</b>: ComponentCarrier Id, needed to reply on the appropriate sap.</li>
<li><b>ConnEstFailCount</b>: how many time T300 timer can expire on the same cell</li>
<li><b>NumberOfRaPreambles</b>: how many random access preambles are available for the contention based RACH process</li>
<li><b>PreambleTransMax</b>: Maximum number of random access preamble transmissions</li>
<li><b>RaResponseWindowSize</b>: length of the window (in TTIs) for the reception of the random access response (RAR); the resulting RAR timeout is this value + 3 ms</li>
</ul>
<b>ns3::LteEnbNetDevice</b><br>
<ul>
<li><b>CellId</b>: Cell Identifier</li>
<li><b>ComponentCarrierMap</b>: List of component carriers.</li>
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to</li>
<li><b>CsgIndication</b>: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.</li>
<li><b>DlBandwidth</b>: Downlink Transmission Bandwidth Configuration in number of Resource Blocks</li>
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.</li>
<li><b>LteAnr</b>: The automatic neighbour relation function associated to this EnbNetDevice</li>
<li><b>LteEnbComponentCarrierManager</b>: The RRC associated to this EnbNetDevice</li>
<li><b>LteEnbRrc</b>: The RRC associated to this EnbNetDevice</li>
<li><b>LteFfrAlgorithm</b>: The FFR algorithm associated to this EnbNetDevice</li>
<li><b>LteHandoverAlgorithm</b>: The handover algorithm associated to this EnbNetDevice</li>
<li><b>UlBandwidth</b>: Uplink Transmission Bandwidth Configuration in number of Resource Blocks</li>
<li><b>UlEarfcn</b>: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.</li>
</ul>
<b>ns3::LteEnbPhy</b><br>
<ul>
<li><b>DlSpectrumPhy</b>: The downlink LteSpectrumPhy associated to this LtePhy</li>
<li><b>InterferenceSamplePeriod</b>: The sampling period for reporting interference stats</li>
<li><b>MacToChannelDelay</b>: The delay in TTI units that occurs between a scheduling decision in the MAC and the actual start of the transmission by the PHY. This is intended to be used to model the latency of real PHY and MAC implementations.</li>
<li><b>NoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver.  According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an ideal receiver with the same overall gain and bandwidth when the receivers are connected to sources at the standard noise temperature T0."  In this model, we consider T0 = 290K.</li>
<li><b>TxPower</b>: Transmission power in dBm</li>
<li><b>UeSinrSamplePeriod</b>: The sampling period for reporting UEs' SINR stats.</li>
<li><b>UlSpectrumPhy</b>: The uplink LteSpectrumPhy associated to this LtePhy</li>
</ul>
<b>ns3::LteEnbRrc</b><br>
<ul>
<li><b>AdmitHandoverRequest</b>: Whether to admit an X2 handover request from another eNB</li>
<li><b>AdmitRrcConnectionRequest</b>: Whether to admit a connection request from a UE</li>
<li><b>ConnectionRejectedTimeoutDuration</b>: Time to wait between sending a RRC CONNECTION REJECT and destroying the UE context</li>
<li><b>ConnectionRequestTimeoutDuration</b>: After a RA attempt, if no RRC CONNECTION REQUEST is received before this time, the UE context is destroyed. Must account for reception of RAR and transmission of RRC CONNECTION REQUEST over UL GRANT. The value of thistimer should not be greater than T300 timer at UE RRC</li>
<li><b>ConnectionSetupTimeoutDuration</b>: After accepting connection request, if no RRC CONNECTION SETUP COMPLETE is received before this time, the UE context is destroyed. Must account for the UE's reception of RRC CONNECTION SETUP and transmission of RRC CONNECTION SETUP COMPLETE.</li>
<li><b>DefaultTransmissionMode</b>: The default UEs' transmission mode (0: SISO)</li>
<li><b>EpsBearerToRlcMapping</b>: Specify which type of RLC will be used for each type of EPS bearer.</li>
<li><b>HandoverJoiningTimeoutDuration</b>: After accepting a handover request, if no RRC CONNECTION RECONFIGURATION COMPLETE is received before this time, the UE context is destroyed. Must account for reception of X2 HO REQ ACK by source eNB, transmission of the Handover Command, non-contention-based random access and reception of the RRC CONNECTION RECONFIGURATION COMPLETE message.</li>
<li><b>HandoverLeavingTimeoutDuration</b>: After issuing a Handover Command, if neither RRC CONNECTION RE-ESTABLISHMENT nor X2 UE Context Release has been previously received, the UE context is destroyed.</li>
<li><b>NumberOfComponentCarriers</b>: Number of Component Carriers</li>
<li><b>QRxLevMin</b>: One of information transmitted within the SIB1 message, indicating the required minimum RSRP level that any UE must receive from this cell before it is allowed to camp to this cell. The default value -70 corresponds to -140 dBm and is the lowest possible value as defined by Section 6.3.4 of 3GPP TS 36.133. This restriction, however, only applies to initial cell selection and EPC-enabled simulation.</li>
<li><b>RsrpFilterCoefficient</b>: Determines the strength of smoothing effect induced by layer 3 filtering of RSRP in all attached UE; if set to 0, no layer 3 filtering is applicable</li>
<li><b>RsrqFilterCoefficient</b>: Determines the strength of smoothing effect induced by layer 3 filtering of RSRQ in all attached UE; if set to 0, no layer 3 filtering is applicable</li>
<li><b>SrsPeriodicity</b>: The SRS periodicity in milliseconds</li>
<li><b>SystemInformationPeriodicity</b>: The interval for sending system information (Time value)</li>
<li><b>UeMap</b>: List of UeManager by C-RNTI.</li>
</ul>
<b>ns3::LteFfrAlgorithm</b><br>
<ul>
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true</li>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically</li>
</ul>
<b>ns3::LteFfrDistributedAlgorithm</b><br>
<ul>
<li><b>CalculationInterval</b>: Time interval between calculation of Edge sub-band, Default value 1 second</li>
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
<li><b>CenterPowerOffset</b>: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0</li>
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
<li><b>EdgePowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0</li>
<li><b>EdgeRbNum</b>: Number of RB that can be used in edge Sub-band</li>
<li><b>RsrpDifferenceThreshold</b>: If the difference between the power of the signal received by UE from the serving cell and the power of the signal received from the adjacent cell is less than a RsrpDifferenceThreshold value, the cell weight is incremented</li>
<li><b>RsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band</li>
</ul>
<b>ns3::LteFfrEnhancedAlgorithm</b><br>
<ul>
<li><b>CenterAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0</li>
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
<li><b>DlCqiThreshold</b>: If the DL-CQI for RBG of is higher than this threshold, transmission on RBG is possible</li>
<li><b>DlReuse1SubBandwidth</b>: Downlink Reuse 1 SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>DlReuse3SubBandwidth</b>: Downlink Reuse 3 SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>DlSubBandOffset</b>: Downlink SubBand Offset for this cell in number of Resource Block Groups</li>
<li><b>EdgeAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0</li>
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
<li><b>RsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band</li>
<li><b>UlCqiThreshold</b>: If the UL-CQI for RBG of is higher than this threshold, transmission on RBG is possible</li>
<li><b>UlReuse1SubBandwidth</b>: Uplink Reuse 1 SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>UlReuse3SubBandwidth</b>: Uplink Reuse 3 SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>UlSubBandOffset</b>: Uplink SubBand Offset for this cell in number of Resource Block Groups</li>
</ul>
<b>ns3::LteFfrSoftAlgorithm</b><br>
<ul>
<li><b>CenterAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0</li>
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
<li><b>CenterRsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Medium sub-band</li>
<li><b>DlCommonSubBandwidth</b>: Downlink Medium (Common) SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>DlEdgeSubBandOffset</b>: Downlink Edge SubBand Offset in number of Resource Block Groups</li>
<li><b>DlEdgeSubBandwidth</b>: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>EdgeAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0</li>
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
<li><b>EdgeRsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band</li>
<li><b>MediumAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Medium Sub-band, default value dB0</li>
<li><b>MediumAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in medium areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
<li><b>UlCommonSubBandwidth</b>: Uplink Medium (Common) SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>UlEdgeSubBandOffset</b>: Uplink Edge SubBand Offset in number of Resource Block Groups</li>
<li><b>UlEdgeSubBandwidth</b>: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups</li>
</ul>
<b>ns3::LteFrHardAlgorithm</b><br>
<ul>
<li><b>DlSubBandOffset</b>: Downlink Offset in number of Resource Block Groups</li>
<li><b>DlSubBandwidth</b>: Downlink Transmission SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>UlSubBandOffset</b>: Uplink Offset in number of Resource Block Groups</li>
<li><b>UlSubBandwidth</b>: Uplink Transmission SubBandwidth Configuration in number of Resource Block Groups</li>
</ul>
<b>ns3::LteFrSoftAlgorithm</b><br>
<ul>
<li><b>AllowCenterUeUseEdgeSubBand</b>: If true center UEs can receive on Edge SubBand RBGs</li>
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
<li><b>CenterPowerOffset</b>: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0</li>
<li><b>DlEdgeSubBandOffset</b>: Downlink Edge SubBand Offset in number of Resource Block Groups</li>
<li><b>DlEdgeSubBandwidth</b>: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
<li><b>EdgePowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0</li>
<li><b>RsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band</li>
<li><b>UlEdgeSubBandOffset</b>: Uplink Edge SubBand Offset in number of Resource Block Groups</li>
<li><b>UlEdgeSubBandwidth</b>: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups</li>
</ul>
<b>ns3::LteFrStrictAlgorithm</b><br>
<ul>
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
<li><b>CenterPowerOffset</b>: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0</li>
<li><b>DlCommonSubBandwidth</b>: Downlink Common SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>DlEdgeSubBandOffset</b>: Downlink Edge SubBand Offset in number of Resource Block Groups</li>
<li><b>DlEdgeSubBandwidth</b>: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
<li><b>EdgePowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0</li>
<li><b>RsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band</li>
<li><b>UlCommonSubBandwidth</b>: Uplink Common SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>UlEdgeSubBandOffset</b>: Uplink Edge SubBand Offset in number of Resource Block Groups</li>
<li><b>UlEdgeSubBandwidth</b>: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups</li>
</ul>
<b>ns3::LteHelper</b><br>
<ul>
<li><b>AnrEnabled</b>: Activate or deactivate Automatic Neighbour Relation function</li>
<li><b>EnbComponentCarrierManager</b>: The type of Component Carrier Manager to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting ns3::LteEnbComponentCarrierManager.</li>
<li><b>FadingModel</b>: The type of fading model to be used.The allowed values for this attributes are the type names of any class inheriting from ns3::SpectrumPropagationLossModel.If the type is set to an empty string, no fading model is used.</li>
<li><b>FfrAlgorithm</b>: The type of FFR algorithm to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::LteFfrAlgorithm.</li>
<li><b>HandoverAlgorithm</b>: The type of handover algorithm to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::LteHandoverAlgorithm.</li>
<li><b>NumberOfComponentCarriers</b>: Set the number of Component carrier to use. If it is more than one and m_useCa is false, it will raise an error.</li>
<li><b>PathlossModel</b>: The type of pathloss model to be used. The allowed values for this attributes are the type names of any class inheriting from ns3::PropagationLossModel.</li>
<li><b>Scheduler</b>: The type of scheduler to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::FfMacScheduler.</li>
<li><b>UeComponentCarrierManager</b>: The type of Component Carrier Manager to be used for UEs. The allowed values for this attributes are the type names of any class inheriting ns3::LteUeComponentCarrierManager.</li>
<li><b>UseCa</b>: If true, Carrier Aggregation feature is enabled and a valid Component Carrier Map is expected. If false, single carrier simulation.</li>
<li><b>UseIdealRrc</b>: If true, LteRrcProtocolIdeal will be used for RRC signaling. If false, LteRrcProtocolReal will be used.</li>
<li><b>UsePdschForCqiGeneration</b>: If true, DL-CQI will be calculated from PDCCH as signal and PDSCH as interference. If false, DL-CQI will be calculated from PDCCH as signal and PDCCH as interference.</li>
</ul>
<b>ns3::LteHexGridEnbTopologyHelper</b><br>
<ul>
<li><b>GridWidth</b>: The number of sites in even rows (odd rows will have one additional site).</li>
<li><b>InterSiteDistance</b>: The distance [m] between nearby sites</li>
<li><b>MinX</b>: The x coordinate where the hex grid starts.</li>
<li><b>MinY</b>: The y coordinate where the hex grid starts.</li>
<li><b>SectorOffset</b>: The offset [m] in the position for the node of each sector with respect to the center of the three-sector site</li>
<li><b>SiteHeight</b>: The height [m] of each site</li>
</ul>
<b>ns3::LteNetDevice</b><br>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
</ul>
<b>ns3::LteRadioBearerTag</b><br>
<ul>
<li><b>lcid</b>: The id within the UE identifying the logical channel to which the packet belongs</li>
<li><b>rnti</b>: The rnti that indicates the UE to which packet belongs</li>
</ul>
<b>ns3::LteRlcAm</b><br>
<ul>
<li><b>MaxTxBufferSize</b>: Maximum Size of the Transmission Buffer (in Bytes).  If zero is configured, the buffer is unlimited.</li>
<li><b>PollRetransmitTimer</b>: Value of the t-PollRetransmit timer (See section 7.3 of 3GPP TS 36.322)</li>
<li><b>ReorderingTimer</b>: Value of the t-Reordering timer (See section 7.3 of 3GPP TS 36.322)</li>
<li><b>ReportBufferStatusTimer</b>: How much to wait to issue a new Report Buffer Status since the last time a new SDU was received</li>
<li><b>StatusProhibitTimer</b>: Value of the t-StatusProhibit timer (See section 7.3 of 3GPP TS 36.322)</li>
<li><b>TxOpportunityForRetxAlwaysBigEnough</b>: If true, always pretend that the size of a TxOpportunity is big enough for retransmission. If false (default and realistic behavior), no retx is performed unless the corresponding TxOpportunity is big enough.</li>
</ul>
<b>ns3::LteRlcTm</b><br>
<ul>
<li><b>MaxTxBufferSize</b>: Maximum Size of the Transmission Buffer (in Bytes)</li>
</ul>
<b>ns3::LteRlcUm</b><br>
<ul>
<li><b>DiscardTimerMs</b>: Discard timer in milliseconds to be used to discard packets. If set to 0 then packet delay budget will be used as the discard timer value, otherwise it will be used this value.</li>
<li><b>EnablePdcpDiscarding</b>: Whether to use the PDCP discarding, i.e., perform discarding at the moment of passing the PDCP SDU to RLC)</li>
<li><b>MaxTxBufferSize</b>: Maximum Size of the Transmission Buffer (in Bytes)</li>
<li><b>ReorderingTimer</b>: Value of the t-Reordering timer (See section 7.3 of 3GPP TS 36.322)</li>
</ul>
<b>ns3::LteSignalingRadioBearerInfo</b><br>
<ul>
<li><b>LtePdcp</b>: PDCP instance of the radio bearer.</li>
<li><b>LteRlc</b>: RLC instance of the radio bearer.</li>
<li><b>SrbIdentity</b>: The id of this Signaling Radio Bearer</li>
</ul>
<b>ns3::LteSpectrumPhy</b><br>
<ul>
<li><b>CtrlErrorModelEnabled</b>: Activate/Deactivate the error model of control (PCFICH-PDCCH decodification) [by default is active].</li>
<li><b>DataErrorModelEnabled</b>: Activate/Deactivate the error model of data (TBs of PDSCH and PUSCH) [by default is active].</li>
</ul>
<b>ns3::LteUeNetDevice</b><br>
<ul>
<li><b>ComponentCarrierMapUe</b>: List of all component Carrier.</li>
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this UE is associated with, i.e., giving the UE access to cells which belong to this particular CSG. This restriction only applies to initial cell selection and EPC-enabled simulation. This does not revoke the UE's access to non-CSG cells.</li>
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.</li>
<li><b>EpcUeNas</b>: The NAS associated to this UeNetDevice</li>
<li><b>Imsi</b>: International Mobile Subscriber Identity assigned to this UE</li>
<li><b>LteUeComponentCarrierManager</b>: The ComponentCarrierManager associated to this UeNetDevice</li>
<li><b>LteUeRrc</b>: The RRC associated to this UeNetDevice</li>
</ul>
<b>ns3::LteUePhy</b><br>
<ul>
<li><b>DlSpectrumPhy</b>: The downlink LteSpectrumPhy associated to this LtePhy</li>
<li><b>DownlinkCqiPeriodicity</b>: Periodicity in milliseconds for reporting thewideband and subband downlink CQIs to the eNB</li>
<li><b>EnableRlfDetection</b>: If true, RLF detection will be enabled.</li>
<li><b>EnableUplinkPowerControl</b>: If true, Uplink Power Control will be enabled.</li>
<li><b>NoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0." In this model, we consider T0 = 290K.</li>
<li><b>NumQinEvalSf</b>: This specifies the total number of consecutive subframeswhich corresponds to the Qin evaluation period</li>
<li><b>NumQoutEvalSf</b>: This specifies the total number of consecutive subframeswhich corresponds to the Qout evaluation period</li>
<li><b>Qin</b>: corresponds to 2% block error rate of a hypothetical PDCCH transmissiontaking into account the PCFICH errors with transmission parameters.see 3GPP TS 36.213 4.2.1 and TS 36.133 7.6</li>
<li><b>Qout</b>: corresponds to 10% block error rate of a hypothetical PDCCH transmissiontaking into account the PCFICH errors with transmission parameters.see 3GPP TS 36.213 4.2.1 and TS 36.133 7.6</li>
<li><b>RsrpSinrSamplePeriod</b>: The sampling period for reporting RSRP-SINR stats (default value 1)</li>
<li><b>RsrqUeMeasThreshold</b>: Receive threshold for PSS on RSRQ [dB]</li>
<li><b>TxMode1Gain</b>: Transmission mode 1 gain in dB</li>
<li><b>TxMode2Gain</b>: Transmission mode 2 gain in dB</li>
<li><b>TxMode3Gain</b>: Transmission mode 3 gain in dB</li>
<li><b>TxMode4Gain</b>: Transmission mode 4 gain in dB</li>
<li><b>TxMode5Gain</b>: Transmission mode 5 gain in dB</li>
<li><b>TxMode6Gain</b>: Transmission mode 6 gain in dB</li>
<li><b>TxMode7Gain</b>: Transmission mode 7 gain in dB</li>
<li><b>TxPower</b>: Transmission power in dBm</li>
<li><b>UeMeasurementsFilterPeriod</b>: Time period for reporting UE measurements, i.e., thelength of layer-1 filtering.</li>
<li><b>UlSpectrumPhy</b>: The uplink LteSpectrumPhy associated to this LtePhy</li>
</ul>
<b>ns3::LteUePowerControl</b><br>
<ul>
<li><b>AccumulationEnabled</b>: If true TCP accumulation mode will be active, otherwise absolute mode will be active</li>
<li><b>Alpha</b>: Value of Alpha parameter</li>
<li><b>ClosedLoop</b>: If true Closed Loop mode will be active, otherwise Open Loop</li>
<li><b>Pcmax</b>: Max Transmission power in dBm, Default value 23 dBmTS36.101 section 6.2.3</li>
<li><b>Pcmin</b>: Min Transmission power in dBm, Default value -40 dBmTS36.101 section 6.2.3</li>
<li><b>PoNominalPusch</b>: P_O_NOMINAL_PUSCH   INT (-126 ... 24), Default value -80</li>
<li><b>PoUePusch</b>: P_O_UE_PUSCH   INT(-8...7), Default value 0</li>
<li><b>PsrsOffset</b>: P_SRS_OFFSET   INT(0...15), Default value 7</li>
</ul>
<b>ns3::LteUeRrc</b><br>
<ul>
<li><b>C-RNTI</b>: Cell Radio Network Temporary Identifier</li>
<li><b>CellId</b>: Serving cell identifier</li>
<li><b>DataRadioBearerMap</b>: List of UE RadioBearerInfo for Data Radio Bearers by LCID.</li>
<li><b>N310</b>: This specifies the maximum number of out-of-sync indications. Standard values: 1, 2, 3, 4, 6, 8, 10, 20</li>
<li><b>N311</b>: This specifies the maximum number of in-sync indications. Standard values: 1, 2, 3, 4, 5, 6, 8, 10</li>
<li><b>Srb0</b>: SignalingRadioBearerInfo for SRB0</li>
<li><b>Srb1</b>: SignalingRadioBearerInfo for SRB1</li>
<li><b>T300</b>: Timer for the RRC Connection Establishment procedure (i.e., the procedure is deemed as failed if it takes longer than this). Standard values: 100ms, 200ms, 300ms, 400ms, 600ms, 1000ms, 1500ms, 2000ms</li>
<li><b>T310</b>: Timer for detecting the Radio link failure (i.e., the radio link is deemed as failed if this timer expires). Standard values: 0ms 50ms, 100ms, 200ms, 500ms, 1000ms, 2000ms</li>
</ul>
<b>ns3::MacStatsCalculator</b><br>
<ul>
<li><b>DlOutputFilename</b>: Name of the file where the downlink results will be saved.</li>
<li><b>UlOutputFilename</b>: Name of the file where the uplink results will be saved.</li>
</ul>
<b>ns3::MatrixPropagationLossModel</b><br>
<ul>
<li><b>DefaultLoss</b>: The default value for propagation loss, dB.</li>
</ul>
<b>ns3::MeshPointDevice</b><br>
<ul>
<li><b>ForwardingDelay</b>: A random variable to account for processing time (microseconds) to forward a frame.</li>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
<li><b>RoutingProtocol</b>: The mesh routing protocol used by this mesh point.</li>
</ul>
<b>ns3::MeshWifiInterfaceMac</b><br>
<ul>
<li><b>BeaconGeneration</b>: Enable/Disable Beaconing.</li>
<li><b>BeaconInterval</b>: Beacon Interval</li>
<li><b>RandomStart</b>: Window when beacon generating starts (uniform random) in seconds</li>
</ul>
<b>ns3::MinstrelHtWifiManager</b><br>
<ul>
<li><b>EWMA</b>: EWMA level</li>
<li><b>LegacyUpdateStatistics</b>: The interval between updating statistics table (for legacy Minstrel)</li>
<li><b>LookAroundRate</b>: The percentage to try other rates (for legacy Minstrel)</li>
<li><b>PacketLength</b>: The packet length used for calculating mode TxTime (bytes)</li>
<li><b>PrintStats</b>: Control the printing of the statistics table</li>
<li><b>SampleColumn</b>: The number of columns used for sampling</li>
<li><b>UpdateStatistics</b>: The interval between updating statistics table</li>
<li><b>UseLatestAmendmentOnly</b>: Use only the latest amendment when it is supported by both peers</li>
</ul>
<b>ns3::MinstrelWifiManager</b><br>
<ul>
<li><b>EWMA</b>: EWMA level</li>
<li><b>LookAroundRate</b>: The percentage to try other rates</li>
<li><b>PacketLength</b>: The packet length used for calculating mode TxTime</li>
<li><b>PrintSamples</b>: Print samples table</li>
<li><b>PrintStats</b>: Print statistics table</li>
<li><b>SampleColumn</b>: The number of columns used for sampling</li>
<li><b>UpdateStatistics</b>: The interval between updating statistics table</li>
</ul>
<b>ns3::MobilityModel</b><br>
<ul>
<li><b>Position</b>: The current position of the mobility model.</li>
<li><b>Velocity</b>: The current velocity of the mobility model.</li>
</ul>
<b>ns3::MultiUserScheduler</b><br>
<ul>
<li><b>AccessReqAc</b>: The Access Category for which the MultiUserScheduler makes requests for channel access.</li>
<li><b>AccessReqInterval</b>: Duration of the interval between two consecutive requests for channel access made by the MultiUserScheduler. Such requests are made independently of the presence of frames in the queues of the AP and are intended to allow the AP to coordinate UL MU transmissions even without DL traffic. A null duration indicates that such requests shall not be made.</li>
<li><b>DelayAccessReqUponAccess</b>: If enabled, the access request interval is measured starting from the last time an EDCA function obtained channel access. Otherwise, the access request interval is measured starting from the last time the MultiUserScheduler made a request for channel access.</li>
</ul>
<b>ns3::NakagamiPropagationLossModel</b><br>
<ul>
<li><b>Distance1</b>: Beginning of the second distance field. Default is 80m.</li>
<li><b>Distance2</b>: Beginning of the third distance field. Default is 200m.</li>
<li><b>ErlangRv</b>: Access to the underlying ErlangRandomVariable</li>
<li><b>GammaRv</b>: Access to the underlying GammaRandomVariable</li>
<li><b>m0</b>: m0 for distances smaller than Distance1. Default is 1.5.</li>
<li><b>m1</b>: m1 for distances smaller than Distance2. Default is 0.75.</li>
<li><b>m2</b>: m2 for distances greater than Distance2. Default is 0.75.</li>
</ul>
<b>ns3::NdiscCache</b><br>
<ul>
<li><b>UnresolvedQueueSize</b>: Size of the queue for packets pending an NA reply.</li>
</ul>
<b>ns3::NetDeviceQueueInterface</b><br>
<ul>
<li><b>NTxQueues</b>: The number of device transmission queues</li>
<li><b>TxQueuesType</b>: The type of transmission queues to be used</li>
</ul>
<b>ns3::NoBackhaulEpcHelper</b><br>
<ul>
<li><b>S11LinkDataRate</b>: The data rate to be used for the next S11 link to be created</li>
<li><b>S11LinkDelay</b>: The delay to be used for the next S11 link to be created</li>
<li><b>S11LinkMtu</b>: The MTU of the next S11 link to be created.</li>
<li><b>S5LinkDataRate</b>: The data rate to be used for the next S5 link to be created</li>
<li><b>S5LinkDelay</b>: The delay to be used for the next S5 link to be created</li>
<li><b>S5LinkMtu</b>: The MTU of the next S5 link to be created</li>
<li><b>X2LinkDataRate</b>: The data rate to be used for the next X2 link to be created</li>
<li><b>X2LinkDelay</b>: The delay to be used for the next X2 link to be created</li>
<li><b>X2LinkEnablePcap</b>: Enable Pcap for X2 link</li>
<li><b>X2LinkMtu</b>: The MTU of the next X2 link to be created. Note that, because of some big X2 messages, you need a big MTU.</li>
<li><b>X2LinkPcapPrefix</b>: Prefix for Pcap generated by X2 link</li>
</ul>
<b>ns3::Node</b><br>
<ul>
<li><b>ApplicationList</b>: The list of applications associated to this Node.</li>
<li><b>DeviceList</b>: The list of devices associated to this Node.</li>
<li><b>Id</b>: The id (unique integer) of this Node.</li>
<li><b>SystemId</b>: The systemId of this node: a unique integer used for parallel simulations.</li>
</ul>
<b>ns3::NodeListPriv</b><br>
<ul>
<li><b>NodeList</b>: The list of all nodes created during the simulation.</li>
</ul>
<b>ns3::NonCommunicatingNetDevice</b><br>
<ul>
<li><b>Phy</b>: The PHY layer attached to this device.</li>
</ul>
<b>ns3::NormalRandomVariable</b><br>
<ul>
<li><b>Bound</b>: The bound on the values returned by this RNG stream.</li>
<li><b>Mean</b>: The mean value for the normal distribution returned by this RNG stream.</li>
<li><b>Variance</b>: The variance value for the normal distribution returned by this RNG stream.</li>
</ul>
<b>ns3::NrAmc</b><br>
<ul>
<li><b>AmcModel</b>: AMC model used to assign CQI</li>
<li><b>ErrorModelType</b>: Type of the Error Model to use when AmcModel is set to ErrorModel. This parameter has to match the ErrorModelType in nr-spectrum-model,because they need to refer to same MCS tables and indexes</li>
<li><b>NumRefScPerRb</b>: Number of Subcarriers carrying Reference Signals per RB</li>
</ul>
<b>ns3::NrBearerStatsCalculator</b><br>
<ul>
<li><b>DlPdcpOutputFilename</b>: Name of the file where the downlink results will be saved.</li>
<li><b>DlRlcOutputFilename</b>: Name of the file where the downlink results will be saved.</li>
<li><b>EpochDuration</b>: Epoch duration.</li>
<li><b>StartTime</b>: Start time of the on going epoch.</li>
<li><b>UlPdcpOutputFilename</b>: Name of the file where the uplink results will be saved.</li>
<li><b>UlRlcOutputFilename</b>: Name of the file where the uplink results will be saved.</li>
</ul>
<b>ns3::NrBearerStatsSimple</b><br>
<ul>
<li><b>DlPdcpRxOutputFilename</b>: Name of the file where the downlink PDCP RX results will be saved.</li>
<li><b>DlPdcpTxOutputFilename</b>: Name of the file where the downlink PDCP TX results will be saved.</li>
<li><b>DlRlcRxOutputFilename</b>: Name of the file where the RLC downlink RX results will be saved.</li>
<li><b>DlRlcTxOutputFilename</b>: Name of the file where the RLC downlink TX results will be saved.</li>
<li><b>UlPdcpRxOutputFilename</b>: Name of the file where the uplink PDCP RX results will be saved.</li>
<li><b>UlPdcpTxOutputFilename</b>: Name of the file where the uplink PDCP TX results will be saved.</li>
<li><b>UlRlcRxOutputFilename</b>: Name of the file where the RLC uplink TX results will be saved.</li>
<li><b>UlRlcTxOutputFilename</b>: Name of the file where the RLC uplink RX results will be saved.</li>
</ul>
<b>ns3::NrChAccessManager</b><br>
<ul>
<li><b>GrantDuration</b>: Duration of grant for transmitting.</li>
</ul>
<b>ns3::NrGnbMac</b><br>
<ul>
<li><b>NumHarqProcess</b>: Number of concurrent stop-and-wait Hybrid ARQ processes per user</li>
<li><b>NumRbPerRbg</b>: Number of resource blocks per resource block group.</li>
</ul>
<b>ns3::NrGnbNetDevice</b><br>
<ul>
<li><b>BandwidthPartMap</b>: List of Bandwidth Part container.</li>
<li><b>LteEnbComponentCarrierManager</b>: The component carrier manager associated to this EnbNetDevice</li>
<li><b>LteEnbRrc</b>: The RRC layer associated with the ENB</li>
</ul>
<b>ns3::NrGnbPhy</b><br>
<ul>
<li><b>N0Delay</b>: Minimum processing delay needed to decode DL DCI and decode DL data</li>
<li><b>N1Delay</b>: Minimum processing delay (UE side) from the end of DL Data reception to the earliest possible start of the corresponding ACK/NACK transmission</li>
<li><b>N2Delay</b>: Minimum processing delay needed to decode UL DCI and prepare UL data</li>
<li><b>NoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0." In this model, we consider T0 = 290K.</li>
<li><b>NrSpectrumPhyList</b>: List of all SpectrumPhy instances of this NrUePhy.</li>
<li><b>Numerology</b>: The 3GPP numerology to be used</li>
<li><b>Pattern</b>: The slot pattern</li>
<li><b>PowerAllocationType</b>: Defines the type of the power allocation. Currently are supported two types: "UniformPowerAllocBw", which is a uniform power allocation over all bandwidth (over all RBs), and "UniformPowerAllocUsed", which is a uniform power allocation over used (active) RBs. By default is set a uniform power allocation over used RBs .</li>
<li><b>RbOverhead</b>: Overhead when calculating the usable RB number</li>
<li><b>SymbolsPerSlot</b>: Number of symbols in one slot</li>
<li><b>TbDecodeLatency</b>: Transport block decode latency</li>
<li><b>TxPower</b>: Transmission power in dBm</li>
</ul>
<b>ns3::NrHelper</b><br>
<ul>
<li><b>HarqEnabled</b>: Enable Hybrid ARQ</li>
</ul>
<b>ns3::NrMacSchedulerNs3</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The time while a CQI is valid</li>
<li><b>DlAmc</b>: The DL AMC of this scheduler</li>
<li><b>DlCtrlSymbols</b>: Number of symbols allocated for DL CTRL</li>
<li><b>EnableHarqReTx</b>: If true, it would set the max HARQ ReTx to 3; otherwise it set it to 0</li>
<li><b>EnableSrsInFSlots</b>: Denotes whether the SRSs will be transmitted in F slotsIf true, it can be transmitted in F slots, otherwise it cannot.</li>
<li><b>EnableSrsInUlSlots</b>: Denotes whether the SRSs will be transmitted only in F slotsor both in F and UL slots. If False, SRS is transmitted onlyin F slots, if True in both (F/UL)</li>
<li><b>FixedMcsDl</b>: Fix MCS to value set in StartingMcsDl</li>
<li><b>FixedMcsUl</b>: Fix MCS to value set in StartingMcsUl</li>
<li><b>MaxDlMcs</b>: Maximum MCS index for DL</li>
<li><b>SchedLcAlgorithmType</b>: Type of the scheduling algorithm that assigns bytes to the different LCs.</li>
<li><b>SrsSymbols</b>: Number of symbols allocated for UL SRS</li>
<li><b>StartingMcsDl</b>: Starting MCS for DL</li>
<li><b>StartingMcsUl</b>: Starting MCS for UL</li>
<li><b>UlAmc</b>: The UL AMC of this scheduler</li>
<li><b>UlCtrlSymbols</b>: Number of symbols allocated for UL CTRL</li>
</ul>
<b>ns3::NrMacSchedulerOfdmaPF</b><br>
<ul>
<li><b>FairnessIndex</b>: Value (between 0 and 1) that defines the PF metric (1 is the traditional 3GPP PF, 0 is RR in throughput</li>
<li><b>LastAvgTPutWeight</b>: Weight of the last average throughput in the average throughput calculation</li>
</ul>
<b>ns3::NrMacSchedulerOfdmaQos</b><br>
<ul>
<li><b>FairnessIndex</b>: Value (between 0 and 1) that defines the PF metric (1 is the traditional 3GPP PF, 0 is RR in throughput</li>
<li><b>LastAvgTPutWeight</b>: Weight of the last average throughput in the average throughput calculation</li>
</ul>
<b>ns3::NrMacSchedulerSrsDefault</b><br>
<ul>
<li><b>StartingPeriodicity</b>: Starting value for the periodicity</li>
</ul>
<b>ns3::NrMacSchedulerTdmaPF</b><br>
<ul>
<li><b>FairnessIndex</b>: Value (between 0 and 1) that defines the PF metric (1 is the traditional 3GPP PF, 0 is RR in throughput</li>
<li><b>LastAvgTPutWeight</b>: Weight of the last average throughput in the average throughput calculation</li>
</ul>
<b>ns3::NrMacSchedulerTdmaQos</b><br>
<ul>
<li><b>FairnessIndex</b>: Value (between 0 and 1) that defines the PF metric (1 is the traditional 3GPP PF, 0 is RR in throughput</li>
<li><b>LastAvgTPutWeight</b>: Weight of the last average throughput in the average throughput calculation</li>
</ul>
<b>ns3::NrMacSchedulingStats</b><br>
<ul>
<li><b>DlOutputFilename</b>: Name of the file where the downlink results will be saved.</li>
<li><b>UlOutputFilename</b>: Name of the file where the uplink results will be saved.</li>
</ul>
<b>ns3::NrNetDevice</b><br>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
</ul>
<b>ns3::NrPhyRxTrace</b><br>
<ul>
<li><b>SimTag</b>: simulation tag that will be concatenated to output file namesin order to distinguish them, for example: RxPacketTrace-${SimTag}.out. </li>
</ul>
<b>ns3::NrRadioBearerTag</b><br>
<ul>
<li><b>lcid</b>: The id within the UE identifying the logical channel to which the packet belongs</li>
<li><b>rnti</b>: The rnti that indicates the UE to which packet belongs</li>
<li><b>size</b>: Size in bytes of the RLC PDU</li>
</ul>
<b>ns3::NrRadioEnvironmentMapHelper</b><br>
<ul>
<li><b>InstallationDelay</b>: How many time it is needed in the simulation to configure phy parameters at UE, depends on RRC message timing.</li>
<li><b>IterForAverage</b>: Number of iterations for the calculationof the average rem value.</li>
<li><b>RemMode</b>: There are three high level modes of Rem generation: a) BEAM_SHAPE in which are represented the beams that are configured in the user's script scenario, considering that the receiver always has quasi-omni, and that all the beams point toward the UE which is passed as UE of interest. The purpose of this map is to illustrate the REM of the scenario that is configured.b) COVERAGE_AREA which produces two REM maps: the worst-case SINR and best-SNR for each rem position; Worst case SINR means that all interfering devices use for the transmission the beam towards the rem point;and also for the best-SNR, for each transmitting device and the REM point are used the best directional beam-pair and then is selected the best SNR.c) UE_COVERAGE which is similar as the above, although the Tx Deviceis the UE (UL direction), and the Rx device is each gNB to which it is connected each time, while the rest of gNBs (if they are present) arepointing their beams towards the Rx gNB. In case of TDD, the SINR mapwill show the interference caused by the DL of these gNBs.</li>
<li><b>SimTag</b>: simulation tag that will be concatenated to output file namesin order to distinguish them, for example: nr-rem-${SimTag}.out. nr-rem-${SimTag}-ues.txt, nr-rem-${SimTag}-gnbs.txt, nr-rem-${SimTag}-buildings.txt.</li>
<li><b>XMax</b>: The max x coordinate of the map.</li>
<li><b>XMin</b>: The min x coordinate of the map.</li>
<li><b>XRes</b>: The resolution (number of points) of themap along the x axis.</li>
<li><b>YMax</b>: The max y coordinate of the map.</li>
<li><b>YMin</b>: The min y coordinate of the map.</li>
<li><b>YRes</b>: The resolution (number of points) of themap along the y axis.</li>
<li><b>Z</b>: The value of the z coordinate for whichthe map is to be generated.</li>
</ul>
<b>ns3::NrSpectrumPhy</b><br>
<ul>
<li><b>CcaMode1Threshold</b>: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to declare CCA BUSY state.</li>
<li><b>DataErrorModelEnabled</b>: Activate/Deactivate the error model of data (TBs of PDSCH and PUSCH) [by default is active].</li>
<li><b>ErrorModelType</b>: Default type of the Error Model to apply to TBs of PDSCH and PUSCH</li>
<li><b>InterStreamInterferenceRatio</b>: Inter-stream interference ratio in the range of 0 to 1, e.g.,0 means no interference and 1 means full interference</li>
<li><b>UnlicensedMode</b>: Activate/Deactivate unlicensed mode in which energy detection is performed and PHY state machine has an additional state CCA_BUSY.</li>
</ul>
<b>ns3::NrUeMac</b><br>
<ul>
<li><b>NumHarqProcess</b>: Number of concurrent stop-and-wait Hybrid ARQ processes per user</li>
</ul>
<b>ns3::NrUeNetDevice</b><br>
<ul>
<li><b>ComponentCarrierMapUe</b>: List of all component Carrier.</li>
<li><b>EpcUeNas</b>: The NAS associated to this UeNetDevice</li>
<li><b>Imsi</b>: International Mobile Subscriber Identity assigned to this UE</li>
<li><b>LteUeComponentCarrierManager</b>: The ComponentCarrierManager associated to this UeNetDevice</li>
<li><b>LteUeRrc</b>: The RRC layer associated with the ENB</li>
<li><b>nrUeRrc</b>: The RRC associated to this UeNetDevice</li>
</ul>
<b>ns3::NrUePhy</b><br>
<ul>
<li><b>EnableUplinkPowerControl</b>: If true, Uplink Power Control will be enabled.</li>
<li><b>FixedRankIndicator</b>: The rank indicator</li>
<li><b>LBTThresholdForCtrl</b>: After a DL/UL transmission, if we have less than this value to send the UL CTRL, we consider the channel as granted</li>
<li><b>NoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0." In this model, we consider T0 = 290K.</li>
<li><b>NrSpectrumPhyList</b>: List of all SpectrumPhy instances of this NrUePhy.</li>
<li><b>PowerAllocationType</b>: Defines the type of the power allocation. Currently are supported two types: "UniformPowerAllocBw", which is a uniform power allocation over all bandwidth (over all RBs), and "UniformPowerAllocBw", which is a uniform power allocation over used (active) RBs. By default is set a uniform power allocation over used RBs .</li>
<li><b>RiSinrThreshold1</b>: The SINR threshold 1 in dB. It is used to adaptively choosethe rank indicator value when a UE is trying to switch fromone stream to two. The UE will report RI = 2 if the averageSINR of the measured stream is above this threshold; otherwise,it will report RI = 1. The initial threshold value of 10 dBis selected according to: https://ieeexplore.ieee.org/abstract/document/6364098 Figure 2</li>
<li><b>RiSinrThreshold2</b>: The SINR threshold 2 in dB. It is used to adaptively choosethe rank indicator value once a UE has already switched totwo streams, i.e., it has already received the data on thesecond stream and has measured its average SINR. The UE willreport RI = 2 if the average SINR of both the stream isabove this threshold; otherwise, it will report RI = 1.The initial threshold value of 10 dB is selected according to: https://ieeexplore.ieee.org/abstract/document/6364098 Figure 2</li>
<li><b>TbDecodeLatency</b>: Transport block decode latency</li>
<li><b>TxPower</b>: Transmission power in dBm</li>
<li><b>UeMeasurementsFilterPeriod</b>: Time period for reporting UE measurements, i.e., thelength of layer-1 filtering.</li>
<li><b>UseFixedRi</b>: If true, UE will use a fixed configured RI value; otherwise,it will use an adaptive RI value based on the SINR of thestreams</li>
</ul>
<b>ns3::NrUePowerControl</b><br>
<ul>
<li><b>AccumulationEnabled</b>: If true TPC accumulation mode will be active, otherwise absolute mode will be active</li>
<li><b>Alpha</b>: Value of Alpha parameter</li>
<li><b>BL_CE</b>: When set to true means that this power control is applied to bandwidth reduced, low complexity or coverage enhanced (BL/CE) device.By default this attribute is set to false. Default BL_CE mode is CEModeB. This option can be used only in conjunction with attribute TSpec being set to TS 36.213.</li>
<li><b>ClosedLoop</b>: If true Closed Loop mode will be active, otherwise Open Loop</li>
<li><b>K0Pucch</b>: K0_PUCCH parameter needed for PUCCH accumulation state calculation. Should be configured according TS 36.213 or TS 38.213 specification depending on TSpec attribute setting. According to TS 38.213 for FDD or FDD-TDD and primary cell frame structure type 1, M is equal to 1 and K0PUCCH is 4</li>
<li><b>KPusch</b>: K_PUSCH parameter needed for PUSCH accumulation state calculation. This value must be carefully configured according to TS 36.213 or TS 38.213 and taking into account the type of simulation scenario. E.g. TDD, FDD, frame structure type, etc. For, LTE FDD or FDD-TDD and frame structure type 1, KPusch is 4.</li>
<li><b>Pcmax</b>: Max Transmission power in dBm, Default value 23 dBmTS36.101 section 6.2.3</li>
<li><b>Pcmin</b>: Min Transmission power in dBm, Default value -40 dBmTS36.101 section 6.2.3</li>
<li><b>PoNominalPucch</b>: P_O_NOMINAL_PUCCH   INT (-126 ... 24), Default value -80</li>
<li><b>PoNominalPusch</b>: P_O_NOMINAL_PUSCH   INT (-126 ... 24), Default value -80</li>
<li><b>PoUePucch</b>: P_O_UE_PUCCH   INT(-8...7), Default value 0</li>
<li><b>PoUePusch</b>: P_O_UE_PUSCH   INT(-8...7), Default value 0</li>
<li><b>PsrsOffset</b>: P_SRS_OFFSET   INT(0...15), Default value 7</li>
<li><b>TSpec</b>: Technical specification TS 36.213 or TS 38.213,By default is set TS to 36.213. To configure TS 36.213 set the value TS36.213, while for TS 38.213 should be configured TS38.213.</li>
</ul>
<b>ns3::ObssPdAlgorithm</b><br>
<ul>
<li><b>ObssPdLevel</b>: The current OBSS PD level (dBm).</li>
<li><b>ObssPdLevelMax</b>: Maximum value (dBm) of OBSS PD level.</li>
<li><b>ObssPdLevelMin</b>: Minimum value (dBm) of OBSS PD level.</li>
<li><b>TxPowerRefMimo</b>: The MIMO reference TX power level (dBm).</li>
<li><b>TxPowerRefSiso</b>: The SISO reference TX power level (dBm).</li>
</ul>
<b>ns3::OkumuraHataPropagationLossModel</b><br>
<ul>
<li><b>CitySize</b>: Dimension of the city</li>
<li><b>Environment</b>: Environment Scenario</li>
<li><b>Frequency</b>: The propagation frequency in Hz</li>
</ul>
<b>ns3::olsr::RoutingProtocol</b><br>
<ul>
<li><b>HelloInterval</b>: HELLO messages emission interval.</li>
<li><b>HnaInterval</b>: HNA messages emission interval.  Normally it is equal to TcInterval.</li>
<li><b>MidInterval</b>: MID messages emission interval.  Normally it is equal to TcInterval.</li>
<li><b>TcInterval</b>: TC messages emission interval.</li>
<li><b>Willingness</b>: Willingness of a node to carry and forward traffic for other nodes.</li>
</ul>
<b>ns3::OnoeWifiManager</b><br>
<ul>
<li><b>AddCreditThreshold</b>: Add credit threshold</li>
<li><b>RaiseThreshold</b>: Attempt to raise the rate if we hit that threshold</li>
<li><b>UpdatePeriod</b>: The interval between decisions about rate control changes</li>
</ul>
<b>ns3::OnOffApplication</b><br>
<ul>
<li><b>DataRate</b>: The data rate in on state.</li>
<li><b>EnableSeqTsSizeHeader</b>: Enable use of SeqTsSizeHeader for sequence number and timestamp</li>
<li><b>Local</b>: The Address on which to bind the socket. If not set, it is generated automatically.</li>
<li><b>MaxBytes</b>: The total number of bytes to send. Once these bytes are sent, no packet is sent again, even in on state. The value zero means that there is no limit.</li>
<li><b>OffTime</b>: A RandomVariableStream used to pick the duration of the 'Off' state.</li>
<li><b>OnTime</b>: A RandomVariableStream used to pick the duration of the 'On' state.</li>
<li><b>PacketSize</b>: The size of packets sent in on state</li>
<li><b>Protocol</b>: The type of protocol to use. This should be a subclass of ns3::SocketFactory</li>
<li><b>Remote</b>: The address of the destination</li>
</ul>
<b>ns3::OutdoorPositionAllocator</b><br>
<ul>
<li><b>MaxAttempts</b>: Maximum number of attempts for the rejection sampling before giving up.</li>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random box.</li>
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random box.</li>
<li><b>Z</b>: A random variable which represents the z coordinate of a position in a random box.</li>
</ul>
<b>ns3::PacketSink</b><br>
<ul>
<li><b>EnableSeqTsSizeHeader</b>: Enable optional header tracing of SeqTsSizeHeader</li>
<li><b>Local</b>: The Address on which to Bind the rx socket.</li>
<li><b>Protocol</b>: The type id of the protocol to use for the rx socket.</li>
</ul>
<b>ns3::PacketSocket</b><br>
<ul>
<li><b>RcvBufSize</b>: PacketSocket maximum receive buffer size (bytes)</li>
</ul>
<b>ns3::PacketSocketClient</b><br>
<ul>
<li><b>Interval</b>: The time to wait between packets</li>
<li><b>MaxPackets</b>: The maximum number of packets the application will send (zero means infinite)</li>
<li><b>PacketSize</b>: Size of packets generated (bytes).</li>
<li><b>Priority</b>: Priority assigned to the packets generated.</li>
</ul>
<b>ns3::ParabolicAntennaModel</b><br>
<ul>
<li><b>Beamwidth</b>: The 3dB beamwidth (degrees)</li>
<li><b>MaxAttenuation</b>: The maximum attenuation (dB) of the antenna radiation pattern.</li>
<li><b>Orientation</b>: The angle (degrees) that expresses the orientation of the antenna on the x-y plane relative to the x axis</li>
</ul>
<b>ns3::ParetoRandomVariable</b><br>
<ul>
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream (if non-zero).</li>
<li><b>Scale</b>: The scale parameter for the Pareto distribution returned by this RNG stream.</li>
<li><b>Shape</b>: The shape parameter for the Pareto distribution returned by this RNG stream.</li>
</ul>
<b>ns3::ParfWifiManager</b><br>
<ul>
<li><b>AttemptThreshold</b>: The minimum number of transmission attempts to try a new power or rate.</li>
<li><b>SuccessThreshold</b>: The minimum number of successful transmissions to try a new power or rate.</li>
</ul>
<b>ns3::PcapFileWrapper</b><br>
<ul>
<li><b>CaptureSize</b>: Maximum length of captured packets (cf. pcap snaplen)</li>
<li><b>NanosecMode</b>: Whether packet timestamps in the PCAP file are nanoseconds or microseconds(default).</li>
</ul>
<b>ns3::PfFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::PfifoFastQueueDisc</b><br>
<ul>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc.</li>
</ul>
<b>ns3::PhasedArrayModel</b><br>
<ul>
<li><b>AntennaElement</b>: A pointer to the antenna element used by the phased array</li>
</ul>
<b>ns3::PhyRxStatsCalculator</b><br>
<ul>
<li><b>DlRxOutputFilename</b>: Name of the file where the downlink results will be saved.</li>
<li><b>UlRxOutputFilename</b>: Name of the file where the uplink results will be saved.</li>
</ul>
<b>ns3::PhyStatsCalculator</b><br>
<ul>
<li><b>DlRsrpSinrFilename</b>: Name of the file where the RSRP/SINR statistics will be saved.</li>
<li><b>UlInterferenceFilename</b>: Name of the file where the interference statistics will be saved.</li>
<li><b>UlSinrFilename</b>: Name of the file where the UE SINR statistics will be saved.</li>
</ul>
<b>ns3::PhyTxStatsCalculator</b><br>
<ul>
<li><b>DlTxOutputFilename</b>: Name of the file where the downlink results will be saved.</li>
<li><b>UlTxOutputFilename</b>: Name of the file where the uplink results will be saved.</li>
</ul>
<b>ns3::PieQueueDisc</b><br>
<ul>
<li><b>A</b>: Value of alpha</li>
<li><b>ActiveThreshold</b>: Threshold for activating PIE (disabled by default)</li>
<li><b>B</b>: Value of beta</li>
<li><b>CeThreshold</b>: The FqPie CE threshold for marking packets</li>
<li><b>DequeueThreshold</b>: Minimum queue size in bytes before dequeue rate is measured</li>
<li><b>MarkEcnThreshold</b>: ECN marking threshold (RFC 8033 suggests 0.1 (i.e., 10%) default)</li>
<li><b>MaxBurstAllowance</b>: Current max burst allowance before random drop</li>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc</li>
<li><b>MeanPktSize</b>: Average of packet size</li>
<li><b>QueueDelayReference</b>: Desired queue delay</li>
<li><b>Supdate</b>: Start time of the update timer</li>
<li><b>Tupdate</b>: Time period to calculate drop probability</li>
<li><b>UseCapDropAdjustment</b>: Enable/Disable Cap Drop Adjustment feature mentioned in RFC 8033</li>
<li><b>UseDequeueRateEstimator</b>: Enable/Disable usage of Dequeue Rate Estimator</li>
<li><b>UseDerandomization</b>: Enable/Disable Derandomization feature mentioned in RFC 8033</li>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)</li>
<li><b>UseL4s</b>: True to use L4S (only ECT1 packets are marked at CE threshold)</li>
</ul>
<b>ns3::Ping</b><br>
<ul>
<li><b>Count</b>: The maximum number of packets the application will send (zero means no limits)</li>
<li><b>Destination</b>: The unicast IPv4 or IPv6 address of the machine we want to ping</li>
<li><b>InterfaceAddress</b>: Local address of the sender</li>
<li><b>Interval</b>: Time interval between sending each packet</li>
<li><b>Size</b>: The number of data bytes to be sent, before ICMP and IP headers are added</li>
<li><b>Timeout</b>: Time to wait for a response if no RTT samples are available</li>
<li><b>VerboseMode</b>: Configure verbose, quiet, or silent output</li>
</ul>
<b>ns3::Ping6</b><br>
<ul>
<li><b>Interval</b>: The time to wait between packets</li>
<li><b>LocalIpv6</b>: Local Ipv6Address of the sender</li>
<li><b>MaxPackets</b>: The maximum number of packets the application will send (zero means infinite)</li>
<li><b>PacketSize</b>: Size of packets generated</li>
<li><b>RemoteIpv6</b>: The Ipv6Address of the outbound packets</li>
</ul>
<b>ns3::PointToPointChannel</b><br>
<ul>
<li><b>Delay</b>: Propagation delay through the channel</li>
</ul>
<b>ns3::PointToPointEpcHelper</b><br>
<ul>
<li><b>S1uLinkDataRate</b>: The data rate to be used for the next S1-U link to be created</li>
<li><b>S1uLinkDelay</b>: The delay to be used for the next S1-U link to be created</li>
<li><b>S1uLinkEnablePcap</b>: Enable Pcap for X2 link</li>
<li><b>S1uLinkMtu</b>: The MTU of the next S1-U link to be created. Note that, because of the additional GTP/UDP/IP tunneling overhead, you need a MTU larger than the end-to-end MTU that you want to support.</li>
<li><b>S1uLinkPcapPrefix</b>: Prefix for Pcap generated by S1-U link</li>
</ul>
<b>ns3::PointToPointNetDevice</b><br>
<ul>
<li><b>Address</b>: The MAC address of this device.</li>
<li><b>DataRate</b>: The default data rate for point to point links</li>
<li><b>InterframeGap</b>: The time to wait between packet (frame) transmissions</li>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
<li><b>ReceiveErrorModel</b>: The receiver error model used to simulate packet loss</li>
<li><b>TxQueue</b>: A queue to use as the transmit queue in the device.</li>
</ul>
<b>ns3::PrioQueueDisc</b><br>
<ul>
<li><b>Priomap</b>: The priority to band mapping.</li>
</ul>
<b>ns3::ProbabilisticV2vHighwayChannelConditionModel</b><br>
<ul>
<li><b>Density</b>: Specifies the density of the vehicles in the scenario.It can be set to Low, Medium or High.</li>
</ul>
<b>ns3::ProbabilisticV2vUrbanChannelConditionModel</b><br>
<ul>
<li><b>Density</b>: Specifies the density of the vehicles in the scenario.It can be set to Low, Medium or High.</li>
</ul>
<b>ns3::Probe</b><br>
<ul>
<li><b>Start</b>: Time data collection starts</li>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute</li>
</ul>
<b>ns3::PssFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>PssFdSchedulerType</b>: FD scheduler in PSS (default value is PFsch)</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
<li><b>nMux</b>: The number of UE selected by TD scheduler (default value is 0)</li>
</ul>
<b>ns3::QosFrameExchangeManager</b><br>
<ul>
<li><b>PifsRecovery</b>: Perform a PIFS recovery as a response to transmission failure within a TXOP</li>
<li><b>SetQueueSize</b>: Whether to set the Queue Size subfield of the QoS Control field of QoS data frames sent by non-AP stations</li>
</ul>
<b>ns3::QosTxop</b><br>
<ul>
<li><b>AddBaResponseTimeout</b>: The timeout to wait for ADDBA response after the Ack to ADDBA request is received.</li>
<li><b>BlockAckManager</b>: The BlockAckManager object.</li>
<li><b>FailedAddBaTimeout</b>: The timeout after a failed BA agreement. During this timeout, the originator resumes sending packets using normal MPDU. After that, BA agreement is reset and the originator will retry BA negotiation.</li>
<li><b>NMaxInflights</b>: The maximum number of links (in the range 1-15) on which an MPDU can be simultaneously in-flight.</li>
<li><b>UseExplicitBarAfterMissedBlockAck</b>: Specify whether explicit BlockAckRequest should be sent upon missed BlockAck Response.</li>
</ul>
<b>ns3::QueueDisc</b><br>
<ul>
<li><b>InternalQueueList</b>: The list of internal queues.</li>
<li><b>PacketFilterList</b>: The list of packet filters.</li>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.</li>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run</li>
</ul>
<b>ns3::QueueDiscClass</b><br>
<ul>
<li><b>QueueDisc</b>: The queue disc attached to the class</li>
</ul>
<b>ns3::RadioBearerStatsCalculator</b><br>
<ul>
<li><b>DlPdcpOutputFilename</b>: Name of the file where the downlink results will be saved.</li>
<li><b>DlRlcOutputFilename</b>: Name of the file where the downlink results will be saved.</li>
<li><b>EpochDuration</b>: Epoch duration.</li>
<li><b>StartTime</b>: Start time of the on going epoch.</li>
<li><b>UlPdcpOutputFilename</b>: Name of the file where the uplink results will be saved.</li>
<li><b>UlRlcOutputFilename</b>: Name of the file where the uplink results will be saved.</li>
</ul>
<b>ns3::RadioEnvironmentMapHelper</b><br>
<ul>
<li><b>Bandwidth</b>: Transmission Bandwidth Configuration (in number of RBs) over which the SINR will be calculated</li>
<li><b>Channel</b>: The DL spectrum channel for which the RadioEnvironment Map is to be generated. Alternatively ChannelPath attribute can be used.Only one of the two (Channel or ChannelPath) should be set.</li>
<li><b>ChannelPath</b>: The path to the channel for which the Radio Environment Map is to be generated.This attribute is an alternative to Channel attribute and is only used if Channel is not set (equal to nullptr). Only one of the two (Channel or ChannelPath) should be set.</li>
<li><b>Earfcn</b>: E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3.</li>
<li><b>MaxPointsPerIteration</b>: Maximum number of REM points to be calculated per iteration. Every point consumes approximately 5KB of memory.</li>
<li><b>NoisePower</b>: the power of the measuring instrument noise, in Watts. Default to a kT of -174 dBm with a noise figure of 9 dB and a bandwidth of 25 LTE Resource Blocks</li>
<li><b>OutputFile</b>: the filename to which the Radio Environment Map is saved</li>
<li><b>RbId</b>: Resource block Id, for which REM will be generated, default value is -1, what means REM will be averaged from all RBs</li>
<li><b>StopWhenDone</b>: If true, Simulator::Stop () will be called as soon as the REM has been generated</li>
<li><b>UseDataChannel</b>: If true, REM will be generated for PDSCH and for PDCCH otherwise</li>
<li><b>XMax</b>: The max x coordinate of the map.</li>
<li><b>XMin</b>: The min x coordinate of the map.</li>
<li><b>XRes</b>: The resolution (number of points) of the map along the x axis.</li>
<li><b>YMax</b>: The max y coordinate of the map.</li>
<li><b>YMin</b>: The min y coordinate of the map.</li>
<li><b>YRes</b>: The resolution (number of points) of the map along the y axis.</li>
<li><b>Z</b>: The value of the z coordinate for which the map is to be generated</li>
</ul>
<b>ns3::Radvd</b><br>
<ul>
<li><b>AdvertisementJitter</b>: Uniform variable to provide jitter between min and max values of AdvInterval</li>
</ul>
<b>ns3::RandomBoxPositionAllocator</b><br>
<ul>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random box.</li>
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random box.</li>
<li><b>Z</b>: A random variable which represents the z coordinate of a position in a random box.</li>
</ul>
<b>ns3::RandomBuildingPositionAllocator</b><br>
<ul>
<li><b>WithReplacement</b>: If true, the building will be randomly selected with replacement. If false, no replacement will occur, until the list of buildings to select becomes empty, at which point it will be filled again with the list of all buildings.</li>
</ul>
<b>ns3::RandomDirection2dMobilityModel</b><br>
<ul>
<li><b>Bounds</b>: The 2d bounding area</li>
<li><b>Pause</b>: A random variable to control the pause (s).</li>
<li><b>Speed</b>: A random variable to control the speed (m/s).</li>
</ul>
<b>ns3::RandomDiscPositionAllocator</b><br>
<ul>
<li><b>Rho</b>: A random variable which represents the radius of a position in a random disc.</li>
<li><b>Theta</b>: A random variable which represents the angle (gradients) of a position in a random disc.</li>
<li><b>X</b>: The x coordinate of the center of the random position disc.</li>
<li><b>Y</b>: The y coordinate of the center of the random position disc.</li>
<li><b>Z</b>: The z coordinate of all the positions in the disc.</li>
</ul>
<b>ns3::RandomPropagationDelayModel</b><br>
<ul>
<li><b>Variable</b>: The random variable which generates random delays (s).</li>
</ul>
<b>ns3::RandomPropagationLossModel</b><br>
<ul>
<li><b>Variable</b>: The random variable used to pick a loss every time CalcRxPower is invoked.</li>
</ul>
<b>ns3::RandomRectanglePositionAllocator</b><br>
<ul>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random rectangle.</li>
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random rectangle.</li>
<li><b>Z</b>: The z coordinate of all the positions allocated.</li>
</ul>
<b>ns3::RandomVariableStream</b><br>
<ul>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values</li>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.</li>
</ul>
<b>ns3::RandomWalk2dMobilityModel</b><br>
<ul>
<li><b>Bounds</b>: Bounds of the area to cruise.</li>
<li><b>Direction</b>: A random variable used to pick the direction (radians).</li>
<li><b>Distance</b>: Change current direction and speed after moving for this distance.</li>
<li><b>Mode</b>: The mode indicates the condition used to change the current speed and direction</li>
<li><b>Speed</b>: A random variable used to pick the speed (m/s).</li>
<li><b>Time</b>: Change current direction and speed after moving for this delay.</li>
</ul>
<b>ns3::RandomWalk2dOutdoorMobilityModel</b><br>
<ul>
<li><b>Bounds</b>: Bounds of the area to cruise.</li>
<li><b>Direction</b>: A random variable used to pick the direction (radians).</li>
<li><b>Distance</b>: Change current direction and speed after moving for this distance.</li>
<li><b>MaxIterations</b>: Maximum number of attempts to find an alternative next positionif the original one is inside a building.</li>
<li><b>Mode</b>: The mode indicates the condition used to change the current speed and direction</li>
<li><b>Speed</b>: A random variable used to pick the speed (m/s).The default value is taken from Figure 1 of the paperHenderson, L.F., 1971. The statistics of crowd fluids. nature, 229(5284), p.381.</li>
<li><b>Time</b>: Change current direction and speed after moving for this delay.</li>
<li><b>Tolerance</b>: Tolerance for the intersection point with buildings (m).It represents a small distance from where the building limitis actually placed, for example to represent a sidewalk.</li>
</ul>
<b>ns3::RandomWaypointMobilityModel</b><br>
<ul>
<li><b>Pause</b>: A random variable used to pick the pause of a random waypoint model.</li>
<li><b>PositionAllocator</b>: The position model used to pick a destination point.</li>
<li><b>Speed</b>: A random variable used to pick the speed of a random waypoint model.</li>
</ul>
<b>ns3::RangePropagationLossModel</b><br>
<ul>
<li><b>MaxRange</b>: Maximum Transmission Range (meters)</li>
</ul>
<b>ns3::RateErrorModel</b><br>
<ul>
<li><b>ErrorRate</b>: The error rate.</li>
<li><b>ErrorUnit</b>: The error unit</li>
<li><b>RanVar</b>: The decision variable attached to this error model.</li>
</ul>
<b>ns3::RealisticBeamformingAlgorithm</b><br>
<ul>
<li><b>BeamSearchAngleStep</b>: Angle step when searching for the best beam</li>
<li><b>UseSnrSrs</b>: Denotes whether the SRS measurement will be SNR or SINR. If FalseSINR is used, if True the SNR</li>
</ul>
<b>ns3::RealisticBfManager</b><br>
<ul>
<li><b>TriggerEvent</b>: Defines a beamforming trigger event</li>
<li><b>UpdateDelay</b>: Delay between SRS SINR report and the beamforming vectors update. Should be lower then SRS periodicity in slots, otherwise the SRS SINR being used will be the latest received.</li>
<li><b>UpdatePeriodicity</b>: Interval between consecutive beamforming update method executions expressed in the number of SRS periodicities to wait before triggering the next beamforming update.</li>
</ul>
<b>ns3::RealtimeSimulatorImpl</b><br>
<ul>
<li><b>HardLimit</b>: Maximum acceptable real-time jitter (used in conjunction with SynchronizationMode=HardLimit)</li>
<li><b>SynchronizationMode</b>: What to do if the simulation cannot keep up with real time.</li>
</ul>
<b>ns3::RedQueueDisc</b><br>
<ul>
<li><b>ARED</b>: True to enable ARED</li>
<li><b>AdaptMaxP</b>: True to adapt m_curMaxP</li>
<li><b>Alpha</b>: Increment parameter for m_curMaxP in ARED</li>
<li><b>Beta</b>: Decrement parameter for m_curMaxP in ARED</li>
<li><b>Bottom</b>: Lower bound for m_curMaxP in ARED</li>
<li><b>FengAdaptive</b>: True to enable Feng's Adaptive RED</li>
<li><b>FengAlpha</b>: Decrement parameter for m_curMaxP in Feng's Adaptive RED</li>
<li><b>FengBeta</b>: Increment parameter for m_curMaxP in Feng's Adaptive RED</li>
<li><b>Gentle</b>: True to increases dropping probability slowly when average queue exceeds maxthresh</li>
<li><b>IdlePktSize</b>: Average packet size used during idle times. Used when m_cautions = 3</li>
<li><b>Interval</b>: Time interval to update m_curMaxP</li>
<li><b>LInterm</b>: The maximum probability of dropping a packet</li>
<li><b>LastSet</b>: Store the last time m_curMaxP was updated</li>
<li><b>LinkBandwidth</b>: The RED link bandwidth</li>
<li><b>LinkDelay</b>: The RED link delay</li>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc</li>
<li><b>MaxTh</b>: Maximum average length threshold in packets/bytes</li>
<li><b>MeanPktSize</b>: Average of packet size</li>
<li><b>MinTh</b>: Minimum average length threshold in packets/bytes</li>
<li><b>NLRED</b>: True to enable Nonlinear RED</li>
<li><b>Ns1Compat</b>: NS-1 compatibility</li>
<li><b>QW</b>: Queue weight related to the exponential weighted moving average (EWMA)</li>
<li><b>Rtt</b>: Round Trip Time to be considered while automatically setting m_bottom</li>
<li><b>TargetDelay</b>: Target average queuing delay in ARED</li>
<li><b>Top</b>: Upper bound for m_curMaxP in ARED</li>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)</li>
<li><b>UseHardDrop</b>: True to always drop packets above max threshold</li>
<li><b>Wait</b>: True for waiting between dropped packets</li>
</ul>
<b>ns3::Rip</b><br>
<ul>
<li><b>GarbageCollectionDelay</b>: The delay to delete an expired route.</li>
<li><b>LinkDownValue</b>: Value for link down in count to infinity.</li>
<li><b>MaxTriggeredCooldown</b>: Max cooldown delay after a Triggered Update.</li>
<li><b>MinTriggeredCooldown</b>: Min cooldown delay after a Triggered Update.</li>
<li><b>SplitHorizon</b>: Split Horizon strategy.</li>
<li><b>StartupDelay</b>: Maximum random delay for protocol startup (send route requests).</li>
<li><b>TimeoutDelay</b>: The delay to invalidate a route.</li>
<li><b>UnsolicitedRoutingUpdate</b>: The time between two Unsolicited Routing Updates.</li>
</ul>
<b>ns3::RipNg</b><br>
<ul>
<li><b>GarbageCollectionDelay</b>: The delay to delete an expired route.</li>
<li><b>LinkDownValue</b>: Value for link down in count to infinity.</li>
<li><b>MaxTriggeredCooldown</b>: Max cooldown delay after a Triggered Update.</li>
<li><b>MinTriggeredCooldown</b>: Min cooldown delay after a Triggered Update.</li>
<li><b>SplitHorizon</b>: Split Horizon strategy.</li>
<li><b>StartupDelay</b>: Maximum random delay for protocol startup (send route requests).</li>
<li><b>TimeoutDelay</b>: The delay to invalidate a route.</li>
<li><b>UnsolicitedRoutingUpdate</b>: The time between two Unsolicited Routing Updates.</li>
</ul>
<b>ns3::RraaWifiManager</b><br>
<ul>
<li><b>AckFrameLength</b>: The Ack frame length (in bytes) used for calculating mode TxTime.</li>
<li><b>Alpha</b>: Constant for calculating the MTL threshold.</li>
<li><b>Basic</b>: If true the RRAA-BASIC algorithm will be used, otherwise the RRAA will be used</li>
<li><b>Beta</b>: Constant for calculating the ORI threshold.</li>
<li><b>FrameLength</b>: The Data frame length (in bytes) used for calculating mode TxTime.</li>
<li><b>Tau</b>: Constant for calculating the EWND size.</li>
<li><b>Timeout</b>: Timeout for the RRAA BASIC loss estimation block</li>
</ul>
<b>ns3::RrFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::RrMultiUserScheduler</b><br>
<ul>
<li><b>EnableBsrp</b>: If enabled, send a BSRP Trigger Frame before an UL MU transmission.</li>
<li><b>EnableTxopSharing</b>: If enabled, allow A-MPDUs of different TIDs in a DL MU PPDU.</li>
<li><b>EnableUlOfdma</b>: If enabled, return UL_MU_TX if DL_MU_TX was returned the previous time.</li>
<li><b>ForceDlOfdma</b>: If enabled, return DL_MU_TX even if no DL MU PPDU could be built.</li>
<li><b>MaxCredits</b>: Maximum amount of credits a station can have. When transmitting a DL MU PPDU, the amount of credits received by each station equals the TX duration (in microseconds) divided by the total number of stations. Stations that are the recipient of the DL MU PPDU have to pay a number of credits equal to the TX duration (in microseconds) times the allocated bandwidth share</li>
<li><b>NStations</b>: The maximum number of stations that can be granted an RU in a DL MU OFDMA transmission</li>
<li><b>UlPsduSize</b>: The default size in bytes of the solicited PSDU (to be sent in a TB PPDU)</li>
<li><b>UseCentral26TonesRus</b>: If enabled, central 26-tone RUs are allocated, too, when the selected RU type is at least 52 tones.</li>
</ul>
<b>ns3::RrpaaWifiManager</b><br>
<ul>
<li><b>AckFrameLength</b>: The Ack frame length (in bytes) used for calculating mode TxTime.</li>
<li><b>Alpha</b>: Constant for calculating the MTL threshold.</li>
<li><b>Basic</b>: If true the RRPAA-BASIC algorithm will be used, otherwise the RRPAA will be used.</li>
<li><b>Beta</b>: Constant for calculating the ORI threshold.</li>
<li><b>Delta</b>: Constant for Probabilistic Decision Table increments.</li>
<li><b>FrameLength</b>: The Data frame length (in bytes) used for calculating mode TxTime.</li>
<li><b>Gamma</b>: Constant for Probabilistic Decision Table decrements.</li>
<li><b>Tau</b>: Constant for calculating the EWND size.</li>
<li><b>Timeout</b>: Timeout for the RRPAA-BASIC loss estimation block.</li>
</ul>
<b>ns3::RttEstimator</b><br>
<ul>
<li><b>InitialEstimation</b>: Initial RTT estimate</li>
</ul>
<b>ns3::RttMeanDeviation</b><br>
<ul>
<li><b>Alpha</b>: Gain used in estimating the RTT, must be 0 <= alpha <= 1</li>
<li><b>Beta</b>: Gain used in estimating the RTT variation, must be 0 <= beta <= 1</li>
</ul>
<b>ns3::RvBatteryModel</b><br>
<ul>
<li><b>RvBatteryModelAlphaValue</b>: RV battery model alpha value.</li>
<li><b>RvBatteryModelBetaValue</b>: RV battery model beta value.</li>
<li><b>RvBatteryModelCutoffVoltage</b>: RV battery model cutoff voltage.</li>
<li><b>RvBatteryModelLowBatteryThreshold</b>: Low battery threshold.</li>
<li><b>RvBatteryModelNumOfTerms</b>: The number of terms of the infinite sum for estimating battery level.</li>
<li><b>RvBatteryModelOpenCircuitVoltage</b>: RV battery model open circuit voltage.</li>
<li><b>RvBatteryModelPeriodicEnergyUpdateInterval</b>: RV battery model sampling interval.</li>
</ul>
<b>ns3::SequentialRandomVariable</b><br>
<ul>
<li><b>Consecutive</b>: The number of times each member of the sequence is repeated.</li>
<li><b>Increment</b>: The sequence random variable increment.</li>
<li><b>Max</b>: One more than the last value of the sequence.</li>
<li><b>Min</b>: The first value of the sequence.</li>
</ul>
<b>ns3::SimpleChannel</b><br>
<ul>
<li><b>Delay</b>: Transmission delay through the channel</li>
</ul>
<b>ns3::SimpleFrameCaptureModel</b><br>
<ul>
<li><b>Margin</b>: Reception is switched if the newly arrived frame has a power higher than this value above the frame currently being received (expressed in dB).</li>
</ul>
<b>ns3::SimpleNetDevice</b><br>
<ul>
<li><b>DataRate</b>: The default data rate for point to point links. Zero means infinite</li>
<li><b>PointToPointMode</b>: The device is configured in Point to Point mode</li>
<li><b>ReceiveErrorModel</b>: The receiver error model used to simulate packet loss</li>
<li><b>TxQueue</b>: A queue to use as the transmit queue in the device.</li>
</ul>
<b>ns3::SimpleOfdmWimaxPhy</b><br>
<ul>
<li><b>G</b>: This is the ratio of CP time to useful time.</li>
<li><b>Nfft</b>: FFT size</li>
<li><b>NoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver.</li>
<li><b>RxGain</b>: Reception gain (dB).</li>
<li><b>TraceFilePath</b>: Path to the directory containing SNR to block error rate files</li>
<li><b>TxGain</b>: Transmission gain (dB).</li>
<li><b>TxPower</b>: Transmission power (dB).</li>
</ul>
<b>ns3::SixLowPanNetDevice</b><br>
<ul>
<li><b>CompressionThreshold</b>: The minimum MAC layer payload size.</li>
<li><b>EtherType</b>: The specific EtherType to be used in L2 frames.</li>
<li><b>ForceEtherType</b>: Force a specific EtherType in L2 frames.</li>
<li><b>FragmentExpirationTimeout</b>: When this timeout expires, the fragments will be cleared from the buffer.</li>
<li><b>FragmentReassemblyListSize</b>: The maximum size of the reassembly buffer (in packets). Zero meaning infinite.</li>
<li><b>MeshCacheLength</b>: Length of the cache for each source.</li>
<li><b>MeshUnderJitter</b>: The jitter in ms a node uses to forward mesh-under packets - used to prevent collisions</li>
<li><b>MeshUnderRadius</b>: Hops Left to use in mesh-under.</li>
<li><b>OmitUdpChecksum</b>: Omit the UDP checksum in IPHC compression.</li>
<li><b>Rfc6282</b>: Use RFC6282 (IPHC) if true, RFC4944 (HC1) otherwise.</li>
<li><b>UseMeshUnder</b>: Use a mesh-under routing protocol.</li>
</ul>
<b>ns3::SnrTag</b><br>
<ul>
<li><b>Snr</b>: The SNR of the last packet received</li>
</ul>
<b>ns3::SpectrumAnalyzer</b><br>
<ul>
<li><b>NoisePowerSpectralDensity</b>: The power spectral density of the measuring instrument noise, in Watt/Hz. Mostly useful to make spectrograms look more similar to those obtained by real devices. Defaults to the value for thermal noise at 300K.</li>
<li><b>Resolution</b>: The length of the time interval over which the power spectral density of incoming signals is averaged</li>
</ul>
<b>ns3::SpectrumChannel</b><br>
<ul>
<li><b>MaxLossDb</b>: If a single-frequency PropagationLossModel is used, this value represents the maximum loss in dB for which transmissions will be passed to the receiving PHY. Signals for which the PropagationLossModel returns a loss bigger than this value will not be propagated to the receiver. This parameter is to be used to reduce the computational load by not propagating signals that are far beyond the interference range. Note that the default value corresponds to considering all signals for reception. Tune this value with care.</li>
<li><b>PropagationLossModel</b>: A pointer to the propagation loss model attached to this channel.</li>
</ul>
<b>ns3::SpectrumWifiPhy</b><br>
<ul>
<li><b>DisableWifiReception</b>: Prevent Wi-Fi frame sync from ever happening</li>
<li><b>TrackSignalsFromInactiveInterfaces</b>: Enable or disable tracking signals coming from inactive spectrum PHY interfaces</li>
<li><b>TxMaskInnerBandMinimumRejection</b>: Minimum rejection (dBr) for the inner band of the transmit spectrum mask</li>
<li><b>TxMaskOuterBandMaximumRejection</b>: Maximum rejection (dBr) for the outer band of the transmit spectrum mask</li>
<li><b>TxMaskOuterBandMinimumRejection</b>: Minimum rejection (dBr) for the outer band of the transmit spectrum mask</li>
</ul>
<b>ns3::StaWifiMac</b><br>
<ul>
<li><b>ActiveProbing</b>: If true, we send probe requests. If false, we don't.NOTE: if more than one STA in your simulation is using active probing, you should enable it at a different simulation time for each STA, otherwise all the STAs will start sending probes at the same time resulting in collisions. See bug 1060 for more info.</li>
<li><b>AssocRequestTimeout</b>: The interval between two consecutive association request attempts.</li>
<li><b>MaxMissedBeacons</b>: Number of beacons which much be consecutively missed before we attempt to restart association.</li>
<li><b>PmModeSwitchTimeout</b>: If switching to a new Power Management mode is not completed within this amount of time, make another attempt at switching Power Management mode.</li>
<li><b>PowerSaveMode</b>: Enable/disable power save mode on the given link. The power management mode is actually changed when the AP acknowledges a frame sent with the Power Management field set to the value corresponding to the requested mode</li>
<li><b>ProbeDelay</b>: Delay (in microseconds) to be used prior to transmitting a Probe frame during active scanning.</li>
<li><b>ProbeRequestTimeout</b>: The duration to actively probe the channel.</li>
<li><b>WaitBeaconTimeout</b>: The duration to dwell on a channel while passively scanning for beacon</li>
</ul>
<b>ns3::SteadyStateRandomWaypointMobilityModel</b><br>
<ul>
<li><b>MaxPause</b>: Maximum pause value, [s]</li>
<li><b>MaxSpeed</b>: Maximum speed value, [m/s]</li>
<li><b>MaxX</b>: Maximum X value of traveling region, [m]</li>
<li><b>MaxY</b>: Maximum Y value of traveling region, [m]</li>
<li><b>MinPause</b>: Minimum pause value, [s]</li>
<li><b>MinSpeed</b>: Minimum speed value, [m/s]</li>
<li><b>MinX</b>: Minimum X value of traveling region, [m]</li>
<li><b>MinY</b>: Minimum Y value of traveling region, [m]</li>
<li><b>Z</b>: Z value of traveling region (fixed), [m]</li>
</ul>
<b>ns3::SubscriberStationNetDevice</b><br>
<ul>
<li><b>BasicConnection</b>: Basic connection</li>
<li><b>Classifier</b>: The ss classifier attached to this device.</li>
<li><b>IntervalT1</b>: Wait for DCD timeout. Maximum is 5*maxDcdInterval</li>
<li><b>IntervalT12</b>: Wait for UCD descriptor.Maximum is 5*MaxUcdInterval</li>
<li><b>IntervalT2</b>: Wait for broadcast ranging timeout, i.e., wait for initial ranging opportunity. Maximum is 5*Ranging interval</li>
<li><b>IntervalT20</b>: Time the SS searches for preambles on a given channel. Minimum is 2 MAC frames</li>
<li><b>IntervalT21</b>: time the SS searches for (decodable) DL-MAP on a given channel</li>
<li><b>IntervalT3</b>: ranging Response reception timeout following the transmission of a ranging request. Maximum is 200ms</li>
<li><b>IntervalT7</b>: wait for DSA/DSC/DSD Response timeout. Maximum is 1s</li>
<li><b>LinkManager</b>: The ss link manager attached to this device.</li>
<li><b>LostDlMapInterval</b>: Time since last received DL-MAP message before downlink synchronization is considered lost. Maximum is 600ms</li>
<li><b>LostUlMapInterval</b>: Time since last received UL-MAP before uplink synchronization is considered lost, maximum is 600.</li>
<li><b>MaxContentionRangingRetries</b>: Number of retries on contention Ranging Requests</li>
<li><b>MaxDcdInterval</b>: Maximum time between transmission of DCD messages. Maximum is 10s</li>
<li><b>MaxUcdInterval</b>: Maximum time between transmission of UCD messages. Maximum is 10s</li>
<li><b>PrimaryConnection</b>: Primary connection</li>
<li><b>SSScheduler</b>: The ss scheduler attached to this device.</li>
</ul>
<b>ns3::TableBasedErrorRateModel</b><br>
<ul>
<li><b>FallbackErrorRateModel</b>: Ptr to the fallback error rate model to be used when no matching value is found in a table</li>
<li><b>SizeThreshold</b>: Threshold in bytes over which the table for large size frames is used</li>
</ul>
<b>ns3::TapBridge</b><br>
<ul>
<li><b>DeviceName</b>: The name of the tap device to create.</li>
<li><b>Gateway</b>: The IP address of the default gateway to assign to the host machine, when in ConfigureLocal mode.</li>
<li><b>IpAddress</b>: The IP address to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered IP address of the simulated device.</li>
<li><b>MacAddress</b>: The MAC address to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered MAC address of the simulated device.</li>
<li><b>Mode</b>: The operating and configuration mode to use.</li>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
<li><b>Netmask</b>: The network mask to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered MAC address of the simulated device.</li>
<li><b>Start</b>: The simulation time at which to spin up the tap device read thread.</li>
<li><b>Stop</b>: The simulation time at which to tear down the tap device read thread.</li>
<li><b>Verbose</b>: Enable verbose output from tap-creator child process</li>
</ul>
<b>ns3::TbfQueueDisc</b><br>
<ul>
<li><b>Burst</b>: Size of the first bucket in bytes</li>
<li><b>MaxSize</b>: The max queue size</li>
<li><b>Mtu</b>: Size of the second bucket in bytes. If null, it is initialized to the MTU of the receiving NetDevice (if any)</li>
<li><b>PeakRate</b>: Rate at which tokens enter the second bucket in bps or Bps.If null, there is no second bucket</li>
<li><b>Rate</b>: Rate at which tokens enter the first bucket in bps or Bps.</li>
</ul>
<b>ns3::TcpBbr</b><br>
<ul>
<li><b>AckEpochAckedResetThresh</b>: Max allowed val for m_ackEpochAcked, after which sampling epoch is reset</li>
<li><b>BwWindowLength</b>: Length of bandwidth windowed filter</li>
<li><b>ExtraAckedRttWindowLength</b>: Window length of extra acked window</li>
<li><b>HighGain</b>: Value of high gain</li>
<li><b>ProbeRttDuration</b>: Time to be spent in PROBE_RTT phase</li>
<li><b>RttWindowLength</b>: Length of RTT windowed filter</li>
<li><b>Stream</b>: Random number stream (default is set to 4 to align with Linux results)</li>
</ul>
<b>ns3::TcpBic</b><br>
<ul>
<li><b>Beta</b>: Beta for multiplicative decrease</li>
<li><b>BinarySearchCoefficient</b>: Inverse of the coefficient for the binary search. Default 4, as in Linux</li>
<li><b>FastConvergence</b>: Turn on/off fast convergence.</li>
<li><b>LowWnd</b>: Threshold window size (in segments) for engaging BIC response</li>
<li><b>MaxIncr</b>: Limit on increment allowed during binary search</li>
<li><b>SmoothPart</b>: Number of RTT needed to approach cWnd_max from cWnd_max-BinarySearchCoefficient. It can be viewed as the gradient of the slow start AIM phase: less this value is, more steep the increment will be.</li>
</ul>
<b>ns3::TcpCubic</b><br>
<ul>
<li><b>Beta</b>: Beta for multiplicative decrease</li>
<li><b>C</b>: Cubic Scaling factor</li>
<li><b>CntClamp</b>: Counter value when no losses are detected (counter is used when incrementing cWnd in congestion avoidance, to avoid floating point arithmetic). It is the modulo of the (avoided) division</li>
<li><b>CubicDelta</b>: Delta Time to wait after fast recovery before adjusting param</li>
<li><b>FastConvergence</b>: Enable (true) or disable (false) fast convergence</li>
<li><b>HyStart</b>: Enable (true) or disable (false) hybrid slow start algorithm</li>
<li><b>HyStartAckDelta</b>: Spacing between ack's indicating train</li>
<li><b>HyStartDelayMax</b>: Maximum time for hystart algorithm</li>
<li><b>HyStartDelayMin</b>: Minimum time for hystart algorithm</li>
<li><b>HyStartDetect</b>: Hybrid Slow Start detection mechanisms:packet train, delay, both</li>
<li><b>HyStartLowWindow</b>: Lower bound cWnd for hybrid slow start (segments)</li>
<li><b>HyStartMinSamples</b>: Number of delay samples for detecting the increase of delay</li>
</ul>
<b>ns3::TcpDctcp</b><br>
<ul>
<li><b>DctcpAlphaOnInit</b>: Initial alpha value</li>
<li><b>DctcpShiftG</b>: Parameter G for updating dctcp_alpha</li>
<li><b>UseEct0</b>: Use ECT(0) for ECN codepoint, if false use ECT(1)</li>
</ul>
<b>ns3::TcpHtcp</b><br>
<ul>
<li><b>DefaultBackoff</b>: The default AIMD backoff factor</li>
<li><b>DeltaL</b>: Delta_L parameter in increase function</li>
<li><b>ThroughputRatio</b>: Threshold value for updating beta</li>
</ul>
<b>ns3::TcpHybla</b><br>
<ul>
<li><b>RRTT</b>: Reference RTT</li>
</ul>
<b>ns3::TcpIllinois</b><br>
<ul>
<li><b>AlphaBase</b>: Alpha base threshold</li>
<li><b>AlphaMax</b>: Maximum alpha threshold</li>
<li><b>AlphaMin</b>: Minimum alpha threshold</li>
<li><b>BetaBase</b>: Beta base threshold</li>
<li><b>BetaMax</b>: Maximum beta threshold</li>
<li><b>BetaMin</b>: Minimum beta threshold</li>
<li><b>Theta</b>: Theta threshold</li>
<li><b>WinThresh</b>: Window threshold</li>
</ul>
<b>ns3::TcpL4Protocol</b><br>
<ul>
<li><b>RecoveryType</b>: Recovery type of TCP objects.</li>
<li><b>RttEstimatorType</b>: Type of RttEstimator objects.</li>
<li><b>SocketList</b>: A container of sockets associated to this protocol. The underlying type is an unordered map, the attribute name is kept for backward compatibility.</li>
<li><b>SocketType</b>: Socket type of TCP objects.</li>
</ul>
<b>ns3::TcpLedbat</b><br>
<ul>
<li><b>BaseHistoryLen</b>: Number of Base delay samples</li>
<li><b>Gain</b>: Offset Gain</li>
<li><b>MinCwnd</b>: Minimum cWnd for Ledbat</li>
<li><b>NoiseFilterLen</b>: Number of Current delay samples</li>
<li><b>SSParam</b>: Possibility of Slow Start</li>
<li><b>TargetDelay</b>: Targeted Queue Delay</li>
</ul>
<b>ns3::TcpPrrRecovery</b><br>
<ul>
<li><b>ReductionBound</b>: Type of Reduction Bound</li>
</ul>
<b>ns3::TcpScalable</b><br>
<ul>
<li><b>AIFactor</b>: Additive Increase Factor</li>
<li><b>MDFactor</b>: Multiplicative Decrease Factor</li>
</ul>
<b>ns3::TcpSocket</b><br>
<ul>
<li><b>ConnCount</b>: Number of connection attempts (SYN retransmissions) before returning failure</li>
<li><b>ConnTimeout</b>: TCP retransmission timeout when opening connection (seconds)</li>
<li><b>DataRetries</b>: Number of data retransmission attempts</li>
<li><b>DelAckCount</b>: Number of packets to wait before sending a TCP ack</li>
<li><b>DelAckTimeout</b>: Timeout value for TCP delayed acks, in seconds</li>
<li><b>InitialCwnd</b>: TCP initial congestion window size (segments)</li>
<li><b>InitialSlowStartThreshold</b>: TCP initial slow start threshold (bytes)</li>
<li><b>PersistTimeout</b>: Persist timeout to probe for rx window</li>
<li><b>RcvBufSize</b>: TcpSocket maximum receive buffer size (bytes)</li>
<li><b>SegmentSize</b>: TCP maximum segment size in bytes (may be adjusted based on MTU discovery)</li>
<li><b>SndBufSize</b>: TcpSocket maximum transmit buffer size (bytes)</li>
<li><b>TcpNoDelay</b>: Set to true to disable Nagle's algorithm</li>
</ul>
<b>ns3::TcpSocketBase</b><br>
<ul>
<li><b>ClockGranularity</b>: Clock Granularity used in RTO calculations</li>
<li><b>CongestionOps</b>: Pointer to TcpCongestionOps object</li>
<li><b>IcmpCallback</b>: Callback invoked whenever an icmp error is received on this socket.</li>
<li><b>IcmpCallback6</b>: Callback invoked whenever an icmpv6 error is received on this socket.</li>
<li><b>LimitedTransmit</b>: Enable limited transmit</li>
<li><b>MaxSegLifetime</b>: Maximum segment lifetime in seconds, use for TIME_WAIT state transition to CLOSED state</li>
<li><b>MaxWindowSize</b>: Max size of advertised window</li>
<li><b>MinRto</b>: Minimum retransmit timeout value</li>
<li><b>ReTxThreshold</b>: Threshold for fast retransmit</li>
<li><b>RxBuffer</b>: TCP Rx buffer</li>
<li><b>Sack</b>: Enable or disable Sack option</li>
<li><b>Timestamp</b>: Enable or disable Timestamp option</li>
<li><b>TxBuffer</b>: TCP Tx buffer</li>
<li><b>UseEcn</b>: Parameter to set ECN functionality</li>
<li><b>WindowScaling</b>: Enable or disable Window Scaling option</li>
</ul>
<b>ns3::TcpSocketState</b><br>
<ul>
<li><b>EnablePacing</b>: Enable Pacing</li>
<li><b>MaxPacingRate</b>: Set Max Pacing Rate</li>
<li><b>PaceInitialWindow</b>: Perform pacing for initial window of data</li>
<li><b>PacingCaRatio</b>: Percent pacing rate increase for congestion avoidance conditions</li>
<li><b>PacingSsRatio</b>: Percent pacing rate increase for slow start conditions</li>
</ul>
<b>ns3::TcpVegas</b><br>
<ul>
<li><b>Alpha</b>: Lower bound of packets in network</li>
<li><b>Beta</b>: Upper bound of packets in network</li>
<li><b>Gamma</b>: Limit on increase</li>
</ul>
<b>ns3::TcpVeno</b><br>
<ul>
<li><b>Beta</b>: Threshold for congestion detection</li>
</ul>
<b>ns3::TcpWestwoodPlus</b><br>
<ul>
<li><b>FilterType</b>: Use this to choose no filter or Tustin's approximation filter</li>
</ul>
<b>ns3::TcpYeah</b><br>
<ul>
<li><b>Alpha</b>: Maximum backlog allowed at the bottleneck queue</li>
<li><b>Delta</b>: Log minimum fraction of cwnd to be removed on loss</li>
<li><b>Epsilon</b>: Log maximum fraction to be removed on early decongestion</li>
<li><b>Gamma</b>: Fraction of queue to be removed per RTT</li>
<li><b>Phy</b>: Maximum delta from base</li>
<li><b>Rho</b>: Minimum # of consecutive RTT to consider competition on loss</li>
<li><b>StcpAiFactor</b>: STCP additive increase factor</li>
<li><b>Zeta</b>: Minimum # of state switches to reset m_renoCount</li>
</ul>
<b>ns3::TdBetFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::TdMtFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::TdTbfqFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>CreditLimit</b>: Flow credit limit (default 625000 bytes)</li>
<li><b>CreditableThreshold</b>: Threshold of flow credit (default 0 bytes)</li>
<li><b>DebtLimit</b>: Flow debt limit (default -625000 bytes)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>TokenPoolSize</b>: The maximum value of flow token pool (default 1 bytes)</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::ThompsonSamplingWifiManager</b><br>
<ul>
<li><b>Decay</b>: Exponential decay coefficient, Hz; zero is a valid value for static scenarios</li>
</ul>
<b>ns3::ThreeGppChannelConditionModel</b><br>
<ul>
<li><b>LinkO2iConditionToAntennaHeight</b>: Specifies whether the O2I condition will be determined based on the UE height, i.e. if the UE height is 1.5 then it is O2O, otherwise it is O2I.</li>
<li><b>O2iLowLossThreshold</b>: Specifies what will be the ratio of O2I low - high penetration losses. Default value is 1.0 meaning thatall losses will be low</li>
<li><b>O2iThreshold</b>: Specifies what will be the ratio of O2I channel conditions. Default value is 0 that corresponds to 0 O2I losses.</li>
<li><b>UpdatePeriod</b>: Specifies the time period after which the channel condition is recomputed. If set to 0, the channel condition is never updated.</li>
</ul>
<b>ns3::ThreeGppChannelModel</b><br>
<ul>
<li><b>Blockage</b>: Enable blockage model A (sec 7.6.4.1)</li>
<li><b>BlockerSpeed</b>: The speed of moving blockers, the unit is m/s</li>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model</li>
<li><b>Frequency</b>: The operating Frequency in Hz</li>
<li><b>NumNonselfBlocking</b>: number of non-self-blocking regions</li>
<li><b>PortraitMode</b>: true for portrait mode, false for landscape mode</li>
<li><b>Scenario</b>: The 3GPP scenario (RMa, UMa, UMi-StreetCanyon, InH-OfficeOpen, InH-OfficeMixed)</li>
<li><b>UpdatePeriod</b>: Specify the channel coherence time</li>
<li><b>vScatt</b>: Maximum speed of the vehicle in the layout (see 3GPP TR 37.885 v15.3.0, Sec. 6.2.3).Used to compute the additional contribution for the Doppler ofdelayed (reflected) paths</li>
</ul>
<b>ns3::ThreeGppChannelModelParam</b><br>
<ul>
<li><b>ParametrizedCorrelation</b>: Whether the parameter value Ro will be used as the term for the correlation or the 3gpp term: std::sqrt (1 / k). When true Ro will be used, otherwise, 3gpp term.</li>
<li><b>Ro</b>: Cross polarization correlation parameter.</li>
</ul>
<b>ns3::ThreeGppHttpClient</b><br>
<ul>
<li><b>RemoteServerAddress</b>: The address of the destination server.</li>
<li><b>RemoteServerPort</b>: The destination port of the outbound packets.</li>
<li><b>Variables</b>: Variable collection, which is used to control e.g. timing and HTTP request size.</li>
</ul>
<b>ns3::ThreeGppHttpServer</b><br>
<ul>
<li><b>LocalAddress</b>: The local address of the server, i.e., the address on which to bind the Rx socket.</li>
<li><b>LocalPort</b>: Port on which the application listen for incoming packets.</li>
<li><b>Mtu</b>: Maximum transmission unit (in bytes) of the TCP sockets used in this application, excluding the compulsory 40 bytes TCP header. Typical values are 1460 and 536 bytes. The attribute is read-only because the value is randomly determined.</li>
<li><b>Variables</b>: Variable collection, which is used to control e.g. processing and object generation delays.</li>
</ul>
<b>ns3::ThreeGppHttpVariables</b><br>
<ul>
<li><b>EmbeddedObjectGenerationDelay</b>: The constant time needed by HTTP server to generate an embedded object as a response.</li>
<li><b>EmbeddedObjectSizeMax</b>: The maximum value of embedded object sizes (in bytes).</li>
<li><b>EmbeddedObjectSizeMean</b>: The mean of embedded object sizes (in bytes).</li>
<li><b>EmbeddedObjectSizeMin</b>: The minimum value of embedded object sizes (in bytes).</li>
<li><b>EmbeddedObjectSizeStdDev</b>: The standard deviation of embedded object sizes (in bytes).</li>
<li><b>HighMtuProbability</b>: The probability that higher MTU size is used.</li>
<li><b>HighMtuSize</b>: The higher MTU size.</li>
<li><b>LowMtuSize</b>: The lower MTU size.</li>
<li><b>MainObjectGenerationDelay</b>: The constant time needed by HTTP server to generate a main object as a response.</li>
<li><b>MainObjectSizeMax</b>: The maximum value of main object sizes (in bytes).</li>
<li><b>MainObjectSizeMean</b>: The mean of main object sizes (in bytes).</li>
<li><b>MainObjectSizeMin</b>: The minimum value of main object sizes (in bytes).</li>
<li><b>MainObjectSizeStdDev</b>: The standard deviation of main object sizes (in bytes).</li>
<li><b>NumOfEmbeddedObjectsMax</b>: The upper bound parameter of Pareto distribution for the number of embedded objects per web page. The actual maximum value is this value subtracted by the scale parameter.</li>
<li><b>NumOfEmbeddedObjectsScale</b>: The scale parameter of Pareto distribution for the number of embedded objects per web page.</li>
<li><b>NumOfEmbeddedObjectsShape</b>: The shape parameter of Pareto distribution for the number of embedded objects per web page.</li>
<li><b>ParsingTimeMean</b>: The mean of parsing time.</li>
<li><b>ReadingTimeMean</b>: The mean of reading time.</li>
<li><b>RequestSize</b>: The constant size of HTTP request packet (in bytes).</li>
</ul>
<b>ns3::ThreeGppPropagationLossModel</b><br>
<ul>
<li><b>BuildingPenetrationLossesEnabled</b>: Enable/disable Building Penetration Losses.</li>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.</li>
<li><b>EnforceParameterRanges</b>: Whether to strictly enforce TR38.901 applicability ranges</li>
<li><b>Frequency</b>: The centre frequency in Hz.</li>
<li><b>ShadowingEnabled</b>: Enable/disable shadowing.</li>
</ul>
<b>ns3::ThreeGppRmaPropagationLossModel</b><br>
<ul>
<li><b>AvgBuildingHeight</b>: The average building height in meters.</li>
<li><b>AvgStreetWidth</b>: The average street width in meters.</li>
</ul>
<b>ns3::ThreeGppSpectrumPropagationLossModel</b><br>
<ul>
<li><b>ChannelModel</b>: The channel model. It needs to implement the MatrixBasedChannelModel interface</li>
</ul>
<b>ns3::ThreeGppV2vUrbanPropagationLossModel</b><br>
<ul>
<li><b>PercType3Vehicles</b>: The percentage of vehicles of type 3 (i.e., trucks) in the scenario</li>
</ul>
<b>ns3::ThreeLogDistancePropagationLossModel</b><br>
<ul>
<li><b>Distance0</b>: Beginning of the first (near) distance field</li>
<li><b>Distance1</b>: Beginning of the second (middle) distance field.</li>
<li><b>Distance2</b>: Beginning of the third (far) distance field.</li>
<li><b>Exponent0</b>: The exponent for the first field.</li>
<li><b>Exponent1</b>: The exponent for the second field.</li>
<li><b>Exponent2</b>: The exponent for the third field.</li>
<li><b>ReferenceLoss</b>: The reference loss at distance d0 (dB). (Default is Friis at 1m with 5.15 GHz)</li>
</ul>
<b>ns3::ThresholdPreambleDetectionModel</b><br>
<ul>
<li><b>MinimumRssi</b>: Preamble is dropped if the RSSI is below this value (expressed in dBm).</li>
<li><b>Threshold</b>: Preamble is successfully detected if the SNR is at or above this value (expressed in dB).</li>
</ul>
<b>ns3::TraceFadingLossModel</b><br>
<ul>
<li><b>RbNum</b>: The number of RB the trace is made of (default 100)</li>
<li><b>RngStreamSetSize</b>: The number of RNG streams reserved for the fading model. The maximum number of streams that are needed for an LTE FDD scenario is 2 * numUEs * numeNBs.</li>
<li><b>SamplesNum</b>: The number of samples the trace is made of (default 10000)</li>
<li><b>TraceFilename</b>: Name of file to load a trace from.</li>
<li><b>TraceLength</b>: The total length of the fading trace (default value 10 s.)</li>
<li><b>WindowSize</b>: The size of the window for the fading trace (default value 0.5 s.)</li>
</ul>
<b>ns3::TrafficControlLayer</b><br>
<ul>
<li><b>RootQueueDiscList</b>: The list of root queue discs associated to this Traffic Control layer.</li>
</ul>
<b>ns3::TrafficGenerator3gppAudioData</b><br>
<ul>
<li><b>DataRate</b>: The desired data rate in Mbps. Typical values are 0.756 Mbps and 1.12 Mbps.</li>
<li><b>Periodicity</b>: The periodicity in milliseconds.</li>
<li><b>Protocol</b>: The type of protocol to use.</li>
<li><b>Remote</b>: The address of the destination</li>
</ul>
<b>ns3::TrafficGenerator3gppGenericVideo</b><br>
<ul>
<li><b>AlgType</b>: Type of the algorithm for the codec adaptation</li>
<li><b>BoundJitter</b>: The periodicity in milliseconds.</li>
<li><b>DataRate</b>: The desired data rate in Mbps.</li>
<li><b>DecreaseDataRateQuicklyMultiplier</b>: The multiplier when decreasing the video traffic volume quickly, e.g. 0.2 to decrease 5 times. Used to decrease fps or data rate.</li>
<li><b>DecreaseDataRateSlowlyMultiplier</b>: The multiplier when decreasing the video traffic volume slowly, e.g, 0.75, to decrease 25%. Used to decrease fps or data rate.</li>
<li><b>Fps</b>: Frame generation rate (per second). E.g. typical value cold be 60fps.</li>
<li><b>IncreaseDataRateMultiplier</b>: The multiplier when increasing the video traffic volume, e.g., 3 to increase 3 times. Used to decrease fps or data rate.</li>
<li><b>LowerThresholdForDecreasingQuickly</b>: The lower packet loss bound for decreasing the video traffic quickly.</li>
<li><b>LowerThresholdForDecreasingSlowly</b>: The lower packet loss bound for decreasing the video traffic slowly.</li>
<li><b>MaxDataRate</b>: The maximum desired data rate in Mbps.</li>
<li><b>MaxFps</b>: The maximum frame generation rate (per second). </li>
<li><b>MaxRatioPacketSize</b>: Max ratio wrt the mean packet size. See Table 5.1.1.1-1 of 3GPP TR 38.838 V17.0.0 (2021-12).Typical values are 150% and 109%.</li>
<li><b>MeanPacketArrivalJitter</b>: The mean of packet arrival jitter in milliseconds.</li>
<li><b>MinDataRate</b>: The minimum desired data rate in Mbps.</li>
<li><b>MinFps</b>: The minimum frame generation rate (per second). </li>
<li><b>MinRatioPacketSize</b>: Min ratio wrt the mean packet size. See Table 5.1.1.1-1 of 3GPP TR 38.838 V17.0.0 (2021-12).Typical values are 50% and 91%.</li>
<li><b>Protocol</b>: The type of protocol to use.</li>
<li><b>Remote</b>: The address of the destination</li>
<li><b>StdPacketArrivalJitter</b>: The STD of packet arrival jitter in milliseconds.</li>
<li><b>StdRatioPacketSize</b>: STD ratio wrt the mean packet size. See Table 5.1.1.1-1 of 3GPP TR 38.838 V17.0.0 (2021-12).Typical values are 10.5% and 3%.</li>
<li><b>UpperThresholdForIncreasing</b>: The upper packet loss bound for increasing the video traffic.</li>
</ul>
<b>ns3::TrafficGenerator3gppPoseControl</b><br>
<ul>
<li><b>PacketSize</b>: The packet size in bytes.</li>
<li><b>Periodicity</b>: The periodicity in milliseconds.</li>
<li><b>Protocol</b>: The type of protocol to use.</li>
<li><b>Remote</b>: The address of the destination</li>
</ul>
<b>ns3::TrafficGeneratorFtpSingle</b><br>
<ul>
<li><b>FileSize</b>: The total number of bytes to send. The value zero means that there is no limit.</li>
<li><b>PacketSize</b>: The number of bytes to write per socket send</li>
<li><b>Protocol</b>: The type of protocol to use.</li>
<li><b>Remote</b>: The address of the destination</li>
</ul>
<b>ns3::TrafficGeneratorNgmnFtpMulti</b><br>
<ul>
<li><b>FileSizeMu</b>: Mu parameter of lognormal distribution for the file size generation</li>
<li><b>FileSizeSigma</b>: Sigma parameter of lognormal distribution for the file size generation</li>
<li><b>MaxFileSize</b>: Max file size in number of bytes</li>
<li><b>PacketSize</b>: The number of bytes to write per socket send</li>
<li><b>Protocol</b>: The type of protocol to use.</li>
<li><b>ReadingTimeMean</b>: The mean reading time in seconds</li>
<li><b>Remote</b>: The address of the destination</li>
</ul>
<b>ns3::TrafficGeneratorNgmnGaming</b><br>
<ul>
<li><b>InitialPacketArrivalMax</b>: The maximum value in milliseconds for the initial packet arrival calculation according to NGMN white paper Annex A. The packet arrival in both, downlink and uplink, is determined using the Uniform Distribution.</li>
<li><b>InitialPacketArrivalMin</b>: The minimum value in milliseconds for the initial packet arrival calculation according to NGMN white paper Annex A. The packet arrival in both, downlink and uplink, is determined using the Uniform Distribution.</li>
<li><b>IsDownlink</b>: If set to true the traffic will be generated according to parameters and model for gaming downlink, otherwise, if false,it will be generated according to parameters and model for uplink.</li>
<li><b>PacketArrivalUl</b>: Packet arrival time in milliseconds for uplink. Packet arrival in uplink is deterministic</li>
<li><b>Protocol</b>: The type of protocol to use.</li>
<li><b>Remote</b>: The address of the destination</li>
<li><b>aParamPacketArrivalDl</b>: The a parameter for the packet arrival calculation in downlink according to NGMN white paper Annex A. The packet arrival in downlink is determined using Largest Extreme Value Distribution (also known as Fisher-Tippett distribution) random variable.</li>
<li><b>aParamPacketSizeDl</b>: The a parameter in number of bytes for the packet size calculation in downlink according to NGMN white paper Annex A. The packet size is determined using the Largest Extreme Value Distribution (also known as Fisher-Tippett distribution) random variable.</li>
<li><b>aParamPacketSizeUl</b>: The a parameter in number of bytes for the packet size calculation in uplink according to the NGMN white paper Annex A. The packet size is determined using Largest Extreme Value Distribution (also known as Fisher-Tippett distribution) random variable.</li>
<li><b>bParamPacketArrivalDl</b>: The b parameter for the packet arrival calculation in downlink according to NGMN white paper Annex A. The packet arrivalin downlink is determined using Largest Extreme Value Distribution (also known as Fisher-Tippett distribution) random variable.</li>
<li><b>bParamPacketSizeDl</b>: The b parameter in number of bytes for the packet size calculation in downlink according to NGMN white paper Annex A. The packet size is determined using the Largest Extreme Value Distribution (also known as Fisher-Tippett distribution) random variable.</li>
<li><b>bParamPacketSizeUl</b>: The b parameter in number of bytes for the packet size  calculation in uplink according to the NGMN white paper Annex A. The packet size is determined using Largest Extreme Value Distribution (also known as Fisher-Tippett distribution) random variable.</li>
</ul>
<b>ns3::TrafficGeneratorNgmnVideo</b><br>
<ul>
<li><b>InterframeIntervalTime</b>: Interframe interval time </li>
<li><b>NumberOfPacketsInFrame</b>: Number of packets in frame</li>
<li><b>PacketSizeBound</b>: The bound parameter for the Pareto distribution for the packet size generation</li>
<li><b>PacketSizeScale</b>: The scale parameter for the Pareto distribution for the packet size generation</li>
<li><b>PacketSizeShape</b>: The shape parameter for the Pareto distribution for the packet size generation</li>
<li><b>PacketTimeBound</b>: The bound parameter for the Pareto distribution for the packet time generation</li>
<li><b>PacketTimeScale</b>: The scale parameter for the Pareto distribution for the packet time generation</li>
<li><b>PacketTimeShape</b>: The shape parameter for the Pareto distribution for the packet timee generation</li>
<li><b>Protocol</b>: The type of protocol to use.</li>
<li><b>Remote</b>: The address of the destination</li>
</ul>
<b>ns3::TrafficGeneratorNgmnVoip</b><br>
<ul>
<li><b>EncoderFrameLength</b>: The encoder frame length in milliseconds. It is used for the calculation of transition probabilities based on configured voice activity factor (VAF).</li>
<li><b>MeanTalkSpurtDuration</b>: Mean talk spurt duration in the number of milliseconds.</li>
<li><b>Protocol</b>: The type of protocol to use.</li>
<li><b>Remote</b>: The address of the destination</li>
<li><b>SIDPayload</b>: The payload of SIDs.</li>
<li><b>SIDPeriodicity</b>: The periodicity of SIDs is 160 ms during silence</li>
<li><b>VoiceActivityFactor</b>: Voice activity factor, determines the ratio of active versus inactive state. Expressed as the ratio.</li>
<li><b>VoicePayload</b>: The voice packet payload in number of bytes.</li>
</ul>
<b>ns3::TriangularRandomVariable</b><br>
<ul>
<li><b>Max</b>: The upper bound on the values returned by this RNG stream.</li>
<li><b>Mean</b>: The mean value for the triangular distribution returned by this RNG stream.</li>
<li><b>Min</b>: The lower bound on the values returned by this RNG stream.</li>
</ul>
<b>ns3::TtaFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::TvSpectrumTransmitter</b><br>
<ul>
<li><b>Antenna</b>: The AntennaModel to be used. Allows classes inherited from ns3::AntennaModel. Defaults to ns3::IsotropicAntennaModel.</li>
<li><b>BasePsd</b>: The base power spectral density (in dBm/Hz) of the TV transmitter's transmitted spectrum. Base PSD is the maximum PSD of the spectrum excluding pilots. For analog and COFDM transmitters this is the maximum PSD, but for 8-VSB transmitters this is the maximum PSD of the main signal spectrum (flat-top segment) since the pilot actually has the maximum PSD overall.</li>
<li><b>ChannelBandwidth</b>: The bandwidth (in Hz) of the TV transmitter's signal. Must be greater than or equal to 0.</li>
<li><b>StartFrequency</b>: The lower end frequency (in Hz) of the TV transmitter's signal. Must be greater than or equal to 0.</li>
<li><b>StartingTime</b>: The time point after the simulation begins in which the TV transmitter will begin transmitting.</li>
<li><b>TransmitDuration</b>: The duration of time that the TV transmitter will transmit for.</li>
<li><b>TvType</b>: The type of TV transmitter/modulation to be used.</li>
</ul>
<b>ns3::TwoRayGroundPropagationLossModel</b><br>
<ul>
<li><b>Frequency</b>: The carrier frequency (in Hz) at which propagation occurs  (default is 5.15 GHz).</li>
<li><b>HeightAboveZ</b>: The height of the antenna (m) above the node's Z coordinate</li>
<li><b>MinDistance</b>: The distance under which the propagation model refuses to give results (m)</li>
<li><b>SystemLoss</b>: The system loss</li>
</ul>
<b>ns3::TwoRaySpectrumPropagationLossModel</b><br>
<ul>
<li><b>ChannelConditionModel</b>: Pointer to the channel condition model.</li>
<li><b>Frequency</b>: The operating Frequency in Hz</li>
<li><b>Scenario</b>: The 3GPP scenario (RMa, UMa, UMi-StreetCanyon, InH-OfficeOpen, InH-OfficeMixed).</li>
</ul>
<b>ns3::Txop</b><br>
<ul>
<li><b>Aifsn</b>: The AIFSN: the default value conforms to non-QOS (just for the first link, in case of 11be multi-link devices).</li>
<li><b>Aifsns</b>: The values of AIFSN for all the links</li>
<li><b>MaxCw</b>: The maximum value of the contention window (just for the first link, in case of 11be multi-link devices).</li>
<li><b>MaxCws</b>: The maximum values of the contention window for all the links</li>
<li><b>MinCw</b>: The minimum value of the contention window (just for the first link, in case of 11be multi-link devices).</li>
<li><b>MinCws</b>: The minimum values of the contention window for all the links</li>
<li><b>Queue</b>: The WifiMacQueue object</li>
<li><b>TxopLimit</b>: The TXOP limit: the default value conforms to non-QoS (just for the first link, in case of 11be multi-link devices).</li>
<li><b>TxopLimits</b>: The values of TXOP limit for all the links</li>
</ul>
<b>ns3::UanChannel</b><br>
<ul>
<li><b>NoiseModel</b>: A pointer to the model of the channel ambient noise.</li>
<li><b>PropagationModel</b>: A pointer to the propagation model.</li>
</ul>
<b>ns3::UanMacCw</b><br>
<ul>
<li><b>CW</b>: The MAC parameter CW.</li>
<li><b>SlotTime</b>: Time slot duration for MAC backoff.</li>
</ul>
<b>ns3::UanMacRc</b><br>
<ul>
<li><b>MaxFrames</b>: Maximum number of frames to include in a single RTS.</li>
<li><b>MaxPropDelay</b>: Maximum possible propagation delay to gateway.</li>
<li><b>MinRetryRate</b>: Smallest allowed RTS retry rate.</li>
<li><b>NumberOfRates</b>: Number of rate divisions supported by each PHY.</li>
<li><b>QueueLimit</b>: Maximum packets to queue at MAC.</li>
<li><b>RetryRate</b>: Number of retry attempts per second (of RTS/GWPING).</li>
<li><b>RetryStep</b>: Retry rate increment.</li>
<li><b>SIFS</b>: Spacing to give between frames (this should match gateway).</li>
</ul>
<b>ns3::UanMacRcGw</b><br>
<ul>
<li><b>FrameSize</b>: Size of data frames in bytes.</li>
<li><b>MaxPropDelay</b>: Maximum propagation delay between gateway and non-gateway nodes.</li>
<li><b>MaxReservations</b>: Maximum number of reservations to accept per cycle.</li>
<li><b>MinRetryRate</b>: Smallest allowed RTS retry rate.</li>
<li><b>NumberOfNodes</b>: Number of non-gateway nodes in this gateway's neighborhood.</li>
<li><b>NumberOfRates</b>: Number of rates per Phy layer.</li>
<li><b>RateStep</b>: Increments available for rate assignment in bps.</li>
<li><b>RetryStep</b>: Retry rate increment.</li>
<li><b>SIFS</b>: Spacing between frames to account for timing error and processing delay.</li>
<li><b>TotalRate</b>: Total available channel rate in bps (for a single channel, without splitting reservation channel).</li>
</ul>
<b>ns3::UanNetDevice</b><br>
<ul>
<li><b>Channel</b>: The channel attached to this device.</li>
<li><b>Mac</b>: The MAC layer attached to this device.</li>
<li><b>Phy</b>: The PHY layer attached to this device.</li>
<li><b>Transducer</b>: The Transducer attached to this device.</li>
</ul>
<b>ns3::UanNoiseModelDefault</b><br>
<ul>
<li><b>Shipping</b>: Shipping contribution to noise between 0 and 1.</li>
<li><b>Wind</b>: Wind speed in m/s.</li>
</ul>
<b>ns3::UanPhyCalcSinrFhFsk</b><br>
<ul>
<li><b>NumberOfHops</b>: Number of frequencies in hopping pattern.</li>
</ul>
<b>ns3::UanPhyDual</b><br>
<ul>
<li><b>CcaThresholdPhy1</b>: Aggregate energy of incoming signals to move to CCA Busy state dB of Phy1.</li>
<li><b>CcaThresholdPhy2</b>: Aggregate energy of incoming signals to move to CCA Busy state dB of Phy2.</li>
<li><b>PerModelPhy1</b>: Functor to calculate PER based on SINR and TxMode for Phy1.</li>
<li><b>PerModelPhy2</b>: Functor to calculate PER based on SINR and TxMode for Phy2.</li>
<li><b>SinrModelPhy1</b>: Functor to calculate SINR based on pkt arrivals and modes for Phy1.</li>
<li><b>SinrModelPhy2</b>: Functor to calculate SINR based on pkt arrivals and modes for Phy2.</li>
<li><b>SupportedModesPhy1</b>: List of modes supported by Phy1.</li>
<li><b>SupportedModesPhy2</b>: List of modes supported by Phy2.</li>
<li><b>TxPowerPhy1</b>: Transmission output power in dB of Phy1.</li>
<li><b>TxPowerPhy2</b>: Transmission output power in dB of Phy2.</li>
</ul>
<b>ns3::UanPhyGen</b><br>
<ul>
<li><b>CcaThreshold</b>: Aggregate energy of incoming signals to move to CCA Busy state dB.</li>
<li><b>PerModel</b>: Functor to calculate PER based on SINR and TxMode.</li>
<li><b>RxThreshold</b>: Required SNR for signal acquisition in dB.</li>
<li><b>SinrModel</b>: Functor to calculate SINR based on pkt arrivals and modes.</li>
<li><b>SupportedModes</b>: List of modes supported by this PHY.</li>
<li><b>TxPower</b>: Transmission output power in dB.</li>
</ul>
<b>ns3::UanPhyPerGenDefault</b><br>
<ul>
<li><b>Threshold</b>: SINR cutoff for good packet reception.</li>
</ul>
<b>ns3::UanPropModelThorp</b><br>
<ul>
<li><b>SpreadCoef</b>: Spreading coefficient used in calculation of Thorp's approximation.</li>
</ul>
<b>ns3::UanTransducerHd</b><br>
<ul>
<li><b>RxGainDb</b>: Gain in Db added to incoming signal at receiver.</li>
</ul>
<b>ns3::UdpClient</b><br>
<ul>
<li><b>Interval</b>: The time to wait between packets</li>
<li><b>MaxPackets</b>: The maximum number of packets the application will send (zero means infinite)</li>
<li><b>PacketSize</b>: Size of packets generated. The minimum packet size is 12 bytes which is the size of the header carrying the sequence number and the time stamp.</li>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets</li>
<li><b>RemotePort</b>: The destination port of the outbound packets</li>
</ul>
<b>ns3::UdpEchoClient</b><br>
<ul>
<li><b>Interval</b>: The time to wait between packets</li>
<li><b>MaxPackets</b>: The maximum number of packets the application will send (zero means infinite)</li>
<li><b>PacketSize</b>: Size of echo data in outbound packets</li>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets</li>
<li><b>RemotePort</b>: The destination port of the outbound packets</li>
</ul>
<b>ns3::UdpEchoServer</b><br>
<ul>
<li><b>Port</b>: Port on which we listen for incoming packets.</li>
</ul>
<b>ns3::UdpL4Protocol</b><br>
<ul>
<li><b>SocketList</b>: A container of sockets associated to this protocol. The underlying type is an unordered map, the attribute name is kept for backward compatibility.</li>
</ul>
<b>ns3::UdpServer</b><br>
<ul>
<li><b>PacketWindowSize</b>: The size of the window used to compute the packet loss. This value should be a multiple of 8.</li>
<li><b>Port</b>: Port on which we listen for incoming packets.</li>
</ul>
<b>ns3::UdpSocket</b><br>
<ul>
<li><b>IpMulticastIf</b>: interface index for outgoing multicast on this socket; -1 indicates to use default interface</li>
<li><b>IpMulticastLoop</b>: whether outgoing multicast sent also to loopback interface</li>
<li><b>IpMulticastTtl</b>: socket-specific TTL for multicast IP packets (if non-zero)</li>
<li><b>IpTtl</b>: socket-specific TTL for unicast IP packets (if non-zero)</li>
<li><b>MtuDiscover</b>: If enabled, every outgoing ip packet will have the DF flag set.</li>
<li><b>RcvBufSize</b>: UdpSocket maximum receive buffer size (bytes)</li>
</ul>
<b>ns3::UdpSocketImpl</b><br>
<ul>
<li><b>IcmpCallback</b>: Callback invoked whenever an icmp error is received on this socket.</li>
<li><b>IcmpCallback6</b>: Callback invoked whenever an icmpv6 error is received on this socket.</li>
</ul>
<b>ns3::UdpTraceClient</b><br>
<ul>
<li><b>MaxPacketSize</b>: The maximum size of a packet (including the SeqTsHeader, 12 bytes).</li>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets</li>
<li><b>RemotePort</b>: The destination port of the outbound packets</li>
<li><b>TraceFilename</b>: Name of file to load a trace from. By default, uses a hardcoded trace.</li>
<li><b>TraceLoop</b>: Loops through the trace file, starting again once it is over.</li>
</ul>
<b>ns3::UeManager</b><br>
<ul>
<li><b>C-RNTI</b>: Cell Radio Network Temporary Identifier</li>
<li><b>DataRadioBearerMap</b>: List of UE DataRadioBearerInfo by DRBID.</li>
<li><b>Srb0</b>: SignalingRadioBearerInfo for SRB0</li>
<li><b>Srb1</b>: SignalingRadioBearerInfo for SRB1</li>
</ul>
<b>ns3::UniformDiscPositionAllocator</b><br>
<ul>
<li><b>X</b>: The x coordinate of the center of the  disc.</li>
<li><b>Y</b>: The y coordinate of the center of the  disc.</li>
<li><b>Z</b>: The z coordinate of all the positions in the disc.</li>
<li><b>rho</b>: The radius of the disc</li>
</ul>
<b>ns3::UniformPlanarArray</b><br>
<ul>
<li><b>AntennaHorizontalSpacing</b>: Horizontal spacing between antenna elements, in multiples of wave length</li>
<li><b>AntennaVerticalSpacing</b>: Vertical spacing between antenna elements, in multiples of wave length</li>
<li><b>BearingAngle</b>: The bearing angle in radians</li>
<li><b>DowntiltAngle</b>: The downtilt angle in radians</li>
<li><b>NumColumns</b>: Horizontal size of the array</li>
<li><b>NumRows</b>: Vertical size of the array</li>
<li><b>PolSlantAngle</b>: The polarization slant angle in radians</li>
</ul>
<b>ns3::UniformRandomVariable</b><br>
<ul>
<li><b>Max</b>: The upper bound on the values returned by this RNG stream.</li>
<li><b>Min</b>: The lower bound on the values returned by this RNG stream.</li>
</ul>
<b>ns3::UplinkSchedulerMBQoS</b><br>
<ul>
<li><b>WindowInterval</b>: The time to wait to reset window</li>
</ul>
<b>ns3::V4Ping</b><br>
<ul>
<li><b>Interval</b>: Wait  interval  seconds between sending each packet.</li>
<li><b>Remote</b>: The address of the machine we want to ping.</li>
<li><b>Size</b>: The number of data bytes to be sent, real packet will be 8 (ICMP) + 20 (IP) bytes longer.</li>
<li><b>Verbose</b>: Produce usual output.</li>
</ul>
<b>ns3::V4TraceRoute</b><br>
<ul>
<li><b>Interval</b>: Wait interval between sent packets.</li>
<li><b>MaxHop</b>: The maximum number of hops to trace.</li>
<li><b>ProbeNum</b>: The number of packets send to each hop.</li>
<li><b>Remote</b>: The address of the machine we want to trace.</li>
<li><b>Size</b>: The number of data bytes to be sent, real packet will be 8 (ICMP) + 20 (IP) bytes longer.</li>
<li><b>Timeout</b>: The waiting time for a route response before a timeout.</li>
<li><b>Verbose</b>: Produce usual output.</li>
</ul>
<b>ns3::VhtConfiguration</b><br>
<ul>
<li><b>SecondaryCcaSensitivityThresholds</b>: Tuple {threshold for 20MHz PPDUs, threshold for 40MHz PPDUs, threshold for 80MHz PPDUs} describing the CCA sensitivity thresholds for PPDUs that do not occupy the primary channel. The power of a received PPDU that does not occupy the primary channel should be higher than the threshold (dBm) associated to the PPDU bandwidth to allow the PHY layer to declare CCA BUSY state.</li>
<li><b>Support160MHzOperation</b>: Whether or not 160 MHz operation is to be supported.</li>
</ul>
<b>ns3::VirtualNetDevice</b><br>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
</ul>
<b>ns3::WaveformGenerator</b><br>
<ul>
<li><b>DutyCycle</b>: the duty cycle of the generator, i.e., the fraction of the period that is occupied by a signal</li>
<li><b>Period</b>: the period (=1/frequency)</li>
</ul>
<b>ns3::WaypointMobilityModel</b><br>
<ul>
<li><b>InitialPositionIsWaypoint</b>: Calling SetPosition with no waypoints creates a waypoint.</li>
<li><b>LazyNotify</b>: Only call NotifyCourseChange when position is calculated.</li>
<li><b>NextWaypoint</b>: The next waypoint used to determine position.</li>
<li><b>WaypointsLeft</b>: The number of waypoints remaining.</li>
</ul>
<b>ns3::WeibullRandomVariable</b><br>
<ul>
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream.</li>
<li><b>Scale</b>: The scale parameter for the Weibull distribution returned by this RNG stream.</li>
<li><b>Shape</b>: The shape parameter for the Weibull distribution returned by this RNG stream.</li>
</ul>
<b>ns3::WifiAssocManager</b><br>
<ul>
<li><b>AllowedLinks</b>: Only Beacon and Probe Response frames received on a link belonging to the given set are processed. An empty set is equivalent to the set of all links.</li>
</ul>
<b>ns3::WifiDefaultAckManager</b><br>
<ul>
<li><b>BaThreshold</b>: Immediate acknowledgment is requested upon transmission of a frame whose sequence number is distant at least BaThreshold multiplied by the transmit window size from the starting sequence number of the transmit window. Set to zero to request a response for every transmitted frame.</li>
<li><b>DlMuAckSequenceType</b>: Type of the acknowledgment sequence for DL MU PPDUs.</li>
<li><b>MaxBlockAckMcs</b>: The MCS used to send a BlockAck in a TB PPDU is the minimum between the MCS used for the PSDU sent in the preceding DL MU PPDU and the value of this attribute.</li>
<li><b>UseExplicitBar</b>: Specify whether to send Block Ack Requests (if true) or use Implicit Block Ack Request ack policy (if false).</li>
</ul>
<b>ns3::WifiDefaultAssocManager</b><br>
<ul>
<li><b>ChannelSwitchTimeout</b>: After requesting a channel switch on a link to setup that link, wait at most this amount of time. If a channel switch is not notified within this amount of time, we give up setting up that link.</li>
</ul>
<b>ns3::WifiDefaultProtectionManager</b><br>
<ul>
<li><b>EnableMuRts</b>: If enabled, always protect a DL/UL MU frame exchange with MU-RTS/CTS.</li>
</ul>
<b>ns3::WifiMac</b><br>
<ul>
<li><b>BE_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.</li>
<li><b>BE_BlockAckThreshold</b>: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.</li>
<li><b>BE_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BE access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.</li>
<li><b>BE_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BE access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.</li>
<li><b>BE_Txop</b>: Queue that manages packets belonging to AC_BE access class.</li>
<li><b>BK_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.</li>
<li><b>BK_BlockAckThreshold</b>: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.</li>
<li><b>BK_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BK access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.</li>
<li><b>BK_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BK access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.</li>
<li><b>BK_Txop</b>: Queue that manages packets belonging to AC_BK access class.</li>
<li><b>CtsToSelfSupported</b>: Use CTS to Self when using a rate that is not in the basic rate set.</li>
<li><b>QosSupported</b>: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.</li>
<li><b>ShortSlotTimeSupported</b>: Whether or not short slot time is supported (only used by ERP APs or STAs).</li>
<li><b>Ssid</b>: The ssid we want to belong to.</li>
<li><b>Txop</b>: The Txop object.</li>
<li><b>VI_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.</li>
<li><b>VI_BlockAckThreshold</b>: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.</li>
<li><b>VI_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VI access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.</li>
<li><b>VI_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VI access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.</li>
<li><b>VI_Txop</b>: Queue that manages packets belonging to AC_VI access class.</li>
<li><b>VO_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 microseconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.</li>
<li><b>VO_BlockAckThreshold</b>: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.</li>
<li><b>VO_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VO access class (capped to 65535 for HT PPDUs, 1048575 for VHT PPDUs, 6500631 for HE PPDUs and 15523200 for EHT PPDUs). Value 0 means A-MPDU aggregation is disabled for that AC.</li>
<li><b>VO_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VO access class (capped to 7935 for HT PPDUs and 11398 for VHT/HE/EHT PPDUs). Value 0 means A-MSDU aggregation is disabled for that AC.</li>
<li><b>VO_Txop</b>: Queue that manages packets belonging to AC_VO access class.</li>
</ul>
<b>ns3::WifiMacQueue</b><br>
<ul>
<li><b>MaxDelay</b>: If a packet stays longer than this delay in the queue, it is dropped.</li>
<li><b>MaxSize</b>: The max queue size</li>
</ul>
<b>ns3::WifiNetDevice</b><br>
<ul>
<li><b>Channel</b>: The channel attached to this device</li>
<li><b>EhtConfiguration</b>: The EhtConfiguration object.</li>
<li><b>HeConfiguration</b>: The HeConfiguration object.</li>
<li><b>HtConfiguration</b>: The HtConfiguration object.</li>
<li><b>Mac</b>: The MAC layer attached to this device.</li>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
<li><b>Phy</b>: The PHY layer attached to this device.</li>
<li><b>Phys</b>: The PHY layers attached to this device (11be multi-link devices only).</li>
<li><b>RemoteStationManager</b>: The station manager attached to this device.</li>
<li><b>RemoteStationManagers</b>: The remote station managers attached to this device (11be multi-link devices only).</li>
<li><b>VhtConfiguration</b>: The VhtConfiguration object.</li>
</ul>
<b>ns3::WifiPhy</b><br>
<ul>
<li><b>Antennas</b>: The number of antennas on the device.</li>
<li><b>CcaEdThreshold</b>: The energy of all received signals should be higher than this threshold (dBm) in the primary channel to allow the PHY layer to declare CCA BUSY state.</li>
<li><b>CcaSensitivity</b>: The energy of a received wifi signal should be higher than this threshold (dBm) in the primary channel to allow the PHY layer to declare CCA BUSY state.</li>
<li><b>Channel</b>: The channel attached to this PHY</li>
<li><b>ChannelNumber</b>: The channel number of the current operating channel.</li>
<li><b>ChannelSettings</b>: Tuple {channel number, channel width (MHz), PHY band, primary20 index} describing the settings of the operating channel. The primary20 index is the index of the primary 20 MHz channel within the operating channel (0 indicates the 20 MHz subchannel with the lowest center frequency) and is only valid if the width of the operating channel is a multiple of 20 MHz. If the standard for this object has not been set yet, the value of this attribute is saved and will be used to set the operating channel when the standard is configured. If the PHY band is left unspecified, the default band for the configured standard is used. If the channel width and the channel number are both 0, the default channel width for the configured standard and band are used. If the channel number is 0, the default channel number for the configured standard, band and channel width is used.Note that the channel width can be left unspecified (0) if the channel number uniquely identify a frequency channel for the given standard and band.</li>
<li><b>ChannelSwitchDelay</b>: Delay between two short frames transmitted on different frequencies.</li>
<li><b>ChannelWidth</b>: The width in MHz of the current operating channel (5, 10, 20, 22, 40, 80 or 160).</li>
<li><b>FixedPhyBand</b>: If set to true, changing PHY band is prohibited after initialization.</li>
<li><b>FrameCaptureModel</b>: Ptr to an object that implements the frame capture model</li>
<li><b>Frequency</b>: The center frequency (MHz) of the current operating channel.</li>
<li><b>InterferenceHelper</b>: Ptr to an object that implements the interference helper</li>
<li><b>MaxSupportedRxSpatialStreams</b>: The maximum number of supported RX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.</li>
<li><b>MaxSupportedTxSpatialStreams</b>: The maximum number of supported TX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.</li>
<li><b>Pifs</b>: The duration of the PCF Interframe Space. NOTE that the default value is overwritten by the value defined by the standard; if you want to set this attribute, you have to do it after that the PHY object is initialized.</li>
<li><b>PostReceptionErrorModel</b>: An optional packet error model can be added to the receive packet process after any propagation-based (SNR-based) error models have been applied. Typically this is used to force specific packet drops, for testing purposes.</li>
<li><b>PowerDensityLimit</b>: The mean equivalent isotropically radiated power densitylimit (in dBm/MHz) set by regulators.</li>
<li><b>PreambleDetectionModel</b>: Ptr to an object that implements the preamble detection model</li>
<li><b>Primary20MHzIndex</b>: The index of the primary 20 MHz channel within the current operating channel (0 indicates the 20 MHz subchannel with the lowest center frequency).</li>
<li><b>RxGain</b>: Reception gain (dB).</li>
<li><b>RxNoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0 (usually 290 K)".</li>
<li><b>RxSensitivity</b>: The energy of a received signal should be higher than this threshold (dBm) for the PHY to detect the signal. This threshold refers to a width of 20 MHz and will be scaled to match the width of the received signal.</li>
<li><b>ShortPlcpPreambleSupported</b>: Whether or not short PHY preamble is supported.This parameter is only valuable for 802.11b STAs and APs.Note: 802.11g APs and STAs always support short PHY preamble.</li>
<li><b>Sifs</b>: The duration of the Short Interframe Space. NOTE that the default value is overwritten by the value defined by the standard; if you want to set this attribute, you have to do it after that the PHY object is initialized.</li>
<li><b>Slot</b>: The duration of a slot. NOTE that the default value is overwritten by the value defined by the standard; if you want to set this attribute, you have to do it after that the PHY object is initialized.</li>
<li><b>State</b>: The state of the PHY layer.</li>
<li><b>TxGain</b>: Transmission gain (dB).</li>
<li><b>TxPowerEnd</b>: Maximum available transmission level (dBm).</li>
<li><b>TxPowerLevels</b>: Number of transmission power levels available between TxPowerStart and TxPowerEnd included.</li>
<li><b>TxPowerStart</b>: Minimum available transmission level (dBm).</li>
</ul>
<b>ns3::WifiRadioEnergyModel</b><br>
<ul>
<li><b>CcaBusyCurrentA</b>: The default radio CCA Busy State current in Ampere.</li>
<li><b>IdleCurrentA</b>: The default radio Idle current in Ampere.</li>
<li><b>RxCurrentA</b>: The radio RX current in Ampere.</li>
<li><b>SleepCurrentA</b>: The radio Sleep current in Ampere.</li>
<li><b>SwitchingCurrentA</b>: The default radio Channel Switch current in Ampere.</li>
<li><b>TxCurrentA</b>: The radio TX current in Ampere.</li>
<li><b>TxCurrentModel</b>: A pointer to the attached TX current model.</li>
</ul>
<b>ns3::WifiRemoteStationManager</b><br>
<ul>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.</li>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self</li>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.</li>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self</li>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.</li>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.</li>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.</li>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.</li>
</ul>
<b>ns3::WimaxConnection</b><br>
<ul>
<li><b>TxQueue</b>: Transmit queue</li>
<li><b>Type</b>: Connection type</li>
</ul>
<b>ns3::WimaxMacQueue</b><br>
<ul>
<li><b>MaxSize</b>: Maximum size</li>
</ul>
<b>ns3::WimaxNetDevice</b><br>
<ul>
<li><b>BandwidthManager</b>: The bandwidth manager attached to this device.</li>
<li><b>BroadcastConnection</b>: Broadcast connection</li>
<li><b>BurstProfileManager</b>: The burst profile manager attached to this device.</li>
<li><b>Channel</b>: The channel attached to this device.</li>
<li><b>ConnectionManager</b>: The connection manager attached to this device.</li>
<li><b>InitialRangingConnection</b>: Initial ranging connection</li>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
<li><b>Phy</b>: The PHY layer attached to this device.</li>
<li><b>RTG</b>: receive/transmit transition gap.</li>
<li><b>TTG</b>: transmit/receive transition gap.</li>
</ul>
<b>ns3::WimaxPhy</b><br>
<ul>
<li><b>Bandwidth</b>: The channel bandwidth in Hz.</li>
<li><b>Channel</b>: Wimax channel</li>
<li><b>FrameDuration</b>: The frame duration in seconds.</li>
<li><b>Frequency</b>: The central frequency in KHz.</li>
</ul>
<b>ns3::YansWifiChannel</b><br>
<ul>
<li><b>PropagationDelayModel</b>: A pointer to the propagation delay model attached to this channel.</li>
<li><b>PropagationLossModel</b>: A pointer to the propagation loss model attached to this channel.</li>
</ul>
<b>ns3::ZetaRandomVariable</b><br>
<ul>
<li><b>Alpha</b>: The alpha value for the zeta distribution returned by this RNG stream.</li>
</ul>
<b>ns3::ZipfRandomVariable</b><br>
<ul>
<li><b>Alpha</b>: The alpha value for the Zipf distribution returned by this RNG stream.</li>
<li><b>N</b>: The n value for the Zipf distribution returned by this RNG stream.</li>
</ul>
*/

/*!
\page GlobalValueList All GlobalValues

This is a list of all \ref ns3::GlobalValue instances.
See ns3::GlobalValue for how to set these.
<ul>
  <li><b>[SimulatorImplementationType](\ref GlobalValueSimulatorImplementationType)</b>: The object class to use as the simulator implementation.  Default value: ns3::DefaultSimulatorImpl.</li>
  <li><b>[SchedulerType](\ref GlobalValueSchedulerType)</b>: The object class to use as the scheduler implementation.  Default value: ns3::MapScheduler.</li>
  <li><b>[RngSeed](\ref GlobalValueRngSeed)</b>: The global seed of all rng streams.  Default value: 1.</li>
  <li><b>[RngRun](\ref GlobalValueRngRun)</b>: The substream index used for all streams.  Default value: 1.</li>
  <li><b>[ChecksumEnabled](\ref GlobalValueChecksumEnabled)</b>: A global switch to enable all checksums for all protocols.  Default value: false.</li>
</ul>
*/

/*!
\page LogComponentList All LogComponents

This is a list of all \ref ns3::LogComponent instances.

| Log Component                                     | File                                                                                                                                |
| :------------------------------------------------ | :---------------------------------------------------------------------------------------------------------------------------------- |
| PrintIntrospectedDoxygen                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/utils/print-introspected-doxygen.cc                                               |
| TopologyReader                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/topology-read/model/topology-reader.cc                                        |
| TopologyReaderHelper                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/topology-read/helper/topology-reader-helper.cc                                |
| TapBridgeHelper                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/tap-bridge/helper/tap-bridge-helper.cc                                        |
| OlsrRoutingProtocol                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/olsr/model/olsr-routing-protocol.cc                                           |
| MeshPointDevice                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mesh/model/mesh-point-device.cc                                               |
| MeshL2RoutingProtocol                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mesh/model/mesh-l2-routing-protocol.cc                                        |
| AnimationInterface                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/netanim/model/animation-interface.cc                                          |
| FlameRtable                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mesh/model/flame/flame-rtable.cc                                              |
| FlameProtocolMac                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mesh/model/flame/flame-protocol-mac.cc                                        |
| PeerManagementProtocol                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mesh/model/dot11s/peer-management-protocol.cc                                 |
| PeerManagementProtocolMac                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mesh/model/dot11s/peer-management-protocol-mac.cc                             |
| HwmpRtable                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mesh/model/dot11s/hwmp-rtable.cc                                              |
| HwmpProtocol                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mesh/model/dot11s/hwmp-protocol.cc                                            |
| LrWpanSpectrumValueHelper                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lr-wpan/model/lr-wpan-spectrum-value-helper.cc                                |
| LrWpanSpectrumSignalParameters                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lr-wpan/model/lr-wpan-spectrum-signal-parameters.cc                           |
| LrWpanPhy                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lr-wpan/model/lr-wpan-phy.cc                                                  |
| LrWpanMac                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lr-wpan/model/lr-wpan-mac.cc                                                  |
| DsrRreqTable                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dsr/model/dsr-rreq-table.cc                                                   |
| DsrRouting                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dsr/model/dsr-routing.cc                                                      |
| DsrPassiveBuffer                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dsr/model/dsr-passive-buff.cc                                                 |
| DsrOptionHeader                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dsr/model/dsr-option-header.cc                                                |
| DsrMaintainBuffer                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dsr/model/dsr-maintain-buff.cc                                                |
| DsrFsHeader                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dsr/model/dsr-fs-header.cc                                                    |
| HwmpProtocolMac                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mesh/model/dot11s/hwmp-protocol-mac.cc                                        |
| DsrMainHelper                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dsr/helper/dsr-main-helper.cc                                                 |
| DsdvRoutingProtocol                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dsdv/model/dsdv-routing-protocol.cc                                           |
| RaahsClient                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dash/model/algorithms/raahs-client.cc                                         |
| SvaaClient                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dash/model/algorithms/svaa-client.cc                                          |
| OsmpClient                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dash/model/algorithms/osmp-client.cc                                          |
| DashClient                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dash/model/dash-client.cc                                                     |
| AodvRequestQueue                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/aodv/model/aodv-rqueue.cc                                                     |
| AodvNeighbors                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/aodv/model/aodv-neighbor.cc                                                   |
| XrTrafficMixerHelper                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/utils/traffic-generators/helper/xr-traffic-mixer-helper.cc             |
| TrafficGenerator3gppAudioData                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/utils/traffic-generators/model/traffic-generator-3gpp-audio-data.cc    |
| TrafficGenerator3gppPoseControl                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/utils/traffic-generators/model/traffic-generator-3gpp-pose-control.cc  |
| TrafficGeneratorNgmnVideo                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/utils/traffic-generators/model/traffic-generator-ngmn-video.cc         |
| TrafficGeneratorNgmnFtpMulti                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/utils/traffic-generators/model/traffic-generator-ngmn-ftp-multi.cc     |
| TrafficGeneratorFtpSingle                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/utils/traffic-generators/model/traffic-generator-ftp-single.cc         |
| ThreeGppChannelModelParam                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/utils/three-gpp-channel-model-param.cc                                 |
| NrUePowerControl                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-ue-power-control.cc                                           |
| RealisticBeamformingAlgorithm                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/realistic-beamforming-algorithm.cc                               |
| NrChAccessManager                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-ch-access-manager.cc                                          |
| NrEesmCcT1                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-eesm-cc-t1.cc                                                 |
| NrEesmIrT2                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-eesm-ir-t2.cc                                                 |
| NrEesmIrT1                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-eesm-ir-t1.cc                                                 |
| NrEesmIr                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-eesm-ir.cc                                                    |
| NrEesmErrorModel                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-eesm-error-model.cc                                           |
| NrMacSchedulerLcAlgorithm                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-lc-alg.cc                                       |
| NrMacSchedulerUeInfo                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-ue-info.cc                                      |
| NrMacSchedulerOfdmaMR                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-ofdma-mr.cc                                     |
| NrMacSchedulerOfdma                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-ofdma.cc                                        |
| NrMacSchedulerNs3                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-ns3.cc                                          |
| NrMacSchedulerHarqRr                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-harq-rr.cc                                      |
| BwpManagerAlgorithm                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/bwp-manager-algorithm.cc                                         |
| BwpManagerUe                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/bwp-manager-ue.cc                                                |
| BandwidthPartUe                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/bandwidth-part-ue.cc                                             |
| NrHarqPhy                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-harq-phy.cc                                                   |
| NrMacHeaderFsDl                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-header-fs-dl.cc                                           |
| LrWpanInterferenceHelper                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lr-wpan/model/lr-wpan-interference-helper.cc                                  |
| NrMacHeaderFsUl                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-header-fs-ul.cc                                           |
| BwpManagerGnb                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/bwp-manager-gnb.cc                                               |
| NrMacHeaderVsDl                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-header-vs-dl.cc                                           |
| NrEesmCcT2                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-eesm-cc-t2.cc                                                 |
| nrRrcProtocolIdeal                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-rrc-protocol-ideal.cc                                         |
| NrLteMiErrorModel                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-lte-mi-error-model.cc                                         |
| NrPhyMacCommon                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-phy-mac-common.cc                                             |
| NrSpectrumSignalParameters                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-spectrum-signal-parameters.cc                                 |
| NrMacSchedulerTdmaQos                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-tdma-qos.cc                                     |
| NrMacSchedulerOfdmaPF                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-ofdma-pf.cc                                     |
| NrMacSchedulerOfdmaRR                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-ofdma-rr.cc                                     |
| NrMacSchedulerTdmaRR                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-tdma-rr.cc                                      |
| NrMacScheduler                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler.cc                                              |
| NrEesmCc                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-eesm-cc.cc                                                    |
| NrInterference                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-interference.cc                                               |
| NrSpectrumPhy                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-spectrum-phy.cc                                               |
| DsrGraReplyTable                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dsr/model/dsr-gratuitous-reply-table.cc                                       |
| NrUePhy                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-ue-phy.cc                                                     |
| NrPhy                                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-phy.cc                                                        |
| NrUeNetDevice                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-ue-net-device.cc                                              |
| NrNetDevice                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-net-device.cc                                                 |
| NrMacSchedulingStats                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/helper/nr-mac-scheduling-stats.cc                                      |
| NrStatsCalculator                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/helper/nr-stats-calculator.cc                                          |
| NrSpectrumValueHelper                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/helper/nr-spectrum-value-helper.cc                                     |
| TrafficGenerator3gppGenericVideo                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/utils/traffic-generators/model/traffic-generator-3gpp-generic-video.cc |
| NrRadioEnvironmentMapHelper                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/helper/nr-radio-environment-map-helper.cc                              |
| CcBwpHelper                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/helper/cc-bwp-helper.cc                                                |
| NrBearerStatsConnector                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/helper/nr-bearer-stats-connector.cc                                    |
| NrBearerStatsCalculator                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/helper/nr-bearer-stats-calculator.cc                                   |
| NrPointToPointEpcHelper                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/helper/nr-point-to-point-epc-helper.cc                                 |
| NrHelper                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/helper/nr-helper.cc                                                    |
| IpcsClassifierRecord                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/ipcs-classifier-record.cc                                         |
| BandwidthManager                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/bandwidth-manager.cc                                              |
| SSLinkManager                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/ss-link-manager.cc                                                |
| HTTPHeader                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dash/model/http-header.cc                                                     |
| SSScheduler                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/ss-scheduler.cc                                                   |
| BurstProfileManager                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/burst-profile-manager.cc                                          |
| WimaxMacQueue                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/wimax-mac-queue.cc                                                |
| BSSchedulerRtps                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/bs-scheduler-rtps.cc                                              |
| BSSchedulerSimple                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/bs-scheduler-simple.cc                                            |
| LrWpanCsmaCa                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lr-wpan/model/lr-wpan-csmaca.cc                                               |
| BSScheduler                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/bs-scheduler.cc                                                   |
| UplinkSchedulerRtps                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/bs-uplink-scheduler-rtps.cc                                       |
| UplinkSchedulerSimple                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/bs-uplink-scheduler-simple.cc                                     |
| ConnectionManager                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/connection-manager.cc                                             |
| simpleOfdmWimaxChannel                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/simple-ofdm-wimax-channel.cc                                      |
| MACMESSAGES                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/mac-messages.cc                                                   |
| SubscriberStationNetDevice                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/ss-net-device.cc                                                  |
| WimaxNetDevice                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/wimax-net-device.cc                                               |
| YansWifiPhy                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/yans-wifi-phy.cc                                                   |
| WifiTxTimer                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-tx-timer.cc                                                   |
| WifiSpectrumSignalParameters                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-spectrum-signal-parameters.cc                                 |
| AodvRoutingProtocol                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/aodv/model/aodv-routing-protocol.cc                                           |
| NrMacSchedulerUeInfoQos                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-ue-info-qos.cc                                  |
| WifiPpdu                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-ppdu.cc                                                       |
| SNRToBlockErrorRateManager                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/snr-to-block-error-rate-manager.cc                                |
| WifiPhy                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-phy.cc                                                        |
| WifiNetDevice                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-net-device.cc                                                 |
| WifiMac                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-mac.cc                                                        |
| WifiDefaultProtectionManager                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-default-protection-manager.cc                                 |
| VhtPhy                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/vht/vht-phy.cc                                                     |
| VhtConfiguration                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/vht/vht-configuration.cc                                           |
| Txop                                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/txop.cc                                                            |
| BeamManager                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/beam-manager.cc                                                  |
| ThresholdPreambleDetectionModel                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/threshold-preamble-detection-model.cc                              |
| TableBasedErrorRateModel                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/table-based-error-rate-model.cc                                    |
| LrWpanHelper                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lr-wpan/helper/lr-wpan-helper.cc                                              |
| SupportedRates                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/supported-rates.cc                                                 |
| StaWifiMac                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/sta-wifi-mac.cc                                                    |
| ThompsonSamplingWifiManager                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/rate-control/thompson-sampling-wifi-manager.cc                     |
| RraaWifiManager                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/rate-control/rraa-wifi-manager.cc                                  |
| InetTopologyReader                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/topology-read/model/inet-topology-reader.cc                                   |
| ParfWifiManager                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/rate-control/parf-wifi-manager.cc                                  |
| OnoeWifiManager                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/rate-control/onoe-wifi-manager.cc                                  |
| WifiMpdu                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-mpdu.cc                                                       |
| MinstrelWifiManager                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/rate-control/minstrel-wifi-manager.cc                              |
| ConstantRateWifiManager                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/rate-control/constant-rate-wifi-manager.cc                         |
| CaraWifiManager                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/rate-control/cara-wifi-manager.cc                                  |
| ArfWifiManager                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/rate-control/arf-wifi-manager.cc                                   |
| AmrrWifiManager                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/rate-control/amrr-wifi-manager.cc                                  |
| QosTxop                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/qos-txop.cc                                                        |
| QosFrameExchangeManager                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/qos-frame-exchange-manager.cc                                      |
| NrPhyRxTrace                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/helper/nr-phy-rx-trace.cc                                              |
| OriginatorBlockAckAgreement                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/originator-block-ack-agreement.cc                                  |
| OfdmPhy                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/non-ht/ofdm-phy.cc                                                 |
| ErpOfdmPpdu                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/non-ht/erp-ofdm-ppdu.cc                                            |
| ErpOfdmPhy                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/non-ht/erp-ofdm-phy.cc                                             |
| DsssPpdu                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/non-ht/dsss-ppdu.cc                                                |
| SsServiceFlowManager                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/ss-service-flow-manager.cc                                        |
| DsssErrorRateModel                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/non-ht/dsss-error-rate-model.cc                                    |
| MsduAggregator                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/msdu-aggregator.cc                                                 |
| NrMacHeaderVsUl                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-header-vs-ul.cc                                           |
| MacTxMiddle                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/mac-tx-middle.cc                                                   |
| MacRxMiddle                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/mac-rx-middle.cc                                                   |
| HtPpdu                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/ht/ht-ppdu.cc                                                      |
| Inet6SocketAddress                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/inet6-socket-address.cc                                         |
| WifiPsdu                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-psdu.cc                                                       |
| TcpOptionRfc793                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-option-rfc793.cc                                           |
| SpectrumWifiPhy                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/spectrum-wifi-phy.cc                                               |
| Athstats                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/helper/athstats-helper.cc                                                |
| WifiAssocManager                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-assoc-manager.cc                                              |
| TcpLinuxReno                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-linux-reno.cc                                              |
| TcpHybla                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-hybla.cc                                                   |
| NrMacSchedulerTdmaPF                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-tdma-pf.cc                                      |
| EpcMmeApplication                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/epc-mme-application.cc                                              |
| RipNgHeader                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ripng-header.cc                                                |
| SllHeader                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/sll-header.cc                                                   |
| PositionAllocator                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mobility/model/position-allocator.cc                                          |
| LiIonEnergySource                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/energy/model/li-ion-energy-source.cc                                          |
| LteGlobalPathlossDatabase                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/helper/lte-global-pathloss-database.cc                                    |
| LoopbackNetDevice                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/loopback-net-device.cc                                         |
| UdpSocket                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/udp-socket.cc                                                  |
| PhasedArraySpectrumPropagationLossModel           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/phased-array-spectrum-propagation-loss-model.cc                |
| EmlsrManager                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/eht/emlsr-manager.cc                                               |
| IdealBeamformingAlgorithm                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/ideal-beamforming-algorithm.cc                                   |
| Ipv6StaticRouting                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-static-routing.cc                                         |
| FdNetDeviceHelper                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/fd-net-device/helper/fd-net-device-helper.cc                                  |
| EthernetHeader                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/ethernet-header.cc                                              |
| Ipv6PmtuCache                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-pmtu-cache.cc                                             |
| Timer                                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/timer.cc                                                           |
| SixLowPanHelper                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/sixlowpan/helper/sixlowpan-helper.cc                                          |
| Ipv4RoutingTableEntry                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-routing-table-entry.cc                                    |
| Ipv6Interface                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-interface.cc                                              |
| LteMiErrorModel                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-mi-error-model.cc                                               |
| WifiBandwidthFilter                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-bandwidth-filter.cc                                           |
| Ipv6ExtensionHeader                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-extension-header.cc                                       |
| NodeList                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/node-list.cc                                                    |
| Ipv6Extension                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-extension.cc                                              |
| Ipv4RawSocketFactory                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-raw-socket-factory.cc                                     |
| RocketfuelTopologyReader                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/topology-read/model/rocketfuel-topology-reader.cc                             |
| Ipv6ListRouting                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-list-routing.cc                                           |
| BitSerializer                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/bit-serializer.cc                                               |
| CcHelper                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/helper/cc-helper.cc                                                       |
| Ipv6AutoconfiguredPrefix                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-autoconfigured-prefix.cc                                  |
| HePpdu                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/he/he-ppdu.cc                                                      |
| Ipv4Interface                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-interface.cc                                              |
| TcpSocket                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-socket.cc                                                  |
| Ipv4EndPointDemux                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-end-point-demux.cc                                        |
| Ipv4PacketProbe                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-packet-probe.cc                                           |
| BuildingPositionAllocator                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/buildings/helper/building-position-allocator.cc                               |
| Icmpv6Header                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/icmpv6-header.cc                                               |
| IdealWifiManager                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/rate-control/ideal-wifi-manager.cc                                 |
| UdpEchoServerApplication                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/applications/model/udp-echo-server.cc                                         |
| GlobalRouteManager                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/global-route-manager.cc                                        |
| DistanceBasedThreeGppSpectrumPropagationLossModel | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/utils/distance-based-three-gpp-spectrum-propagation-loss-model.cc      |
| CandidateQueue                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/candidate-queue.cc                                             |
| LteUePowerControl                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-ue-power-control.cc                                             |
| LenaErrorModel                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/lena-error-model.cc                                              |
| ArpQueueDiscItem                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/arp-queue-disc-item.cc                                         |
| CommandLine                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/command-line.cc                                                    |
| LteAnr                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-anr.cc                                                          |
| ArpHeader                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/arp-header.cc                                                  |
| Ipv6StaticRoutingHelper                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/helper/ipv6-static-routing-helper.cc                                 |
| Ipv4StaticRoutingHelper                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/helper/ipv4-static-routing-helper.cc                                 |
| IsmSpectrumValueHelper                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/ism-spectrum-value-helper.cc                                   |
| IpcsClassifier                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/ipcs-classifier.cc                                                |
| Ipv4Route                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-route.cc                                                  |
| BitDeserializer                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/bit-deserializer.cc                                             |
| QueueDisc                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/traffic-control/model/queue-disc.cc                                           |
| Ipv6AddressGenerator                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-address-generator.cc                                      |
| WifiAckManager                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-ack-manager.cc                                                |
| DataOutputInterface                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/data-output-interface.cc                                          |
| PieQueueDisc                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/traffic-control/model/pie-queue-disc.cc                                       |
| PacketSocketAddress                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/packet-socket-address.cc                                        |
| TrafficGenerator                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/utils/traffic-generators/model/traffic-generator.cc                    |
| MqQueueDisc                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/traffic-control/model/mq-queue-disc.cc                                        |
| MinstrelHtWifiManager                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/rate-control/minstrel-ht-wifi-manager.cc                           |
| NetDevice                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/net-device.cc                                                   |
| FqCobaltQueueDisc                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/traffic-control/model/fq-cobalt-queue-disc.cc                                 |
| TrafficGeneratorNgmnVoip                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/utils/traffic-generators/model/traffic-generator-ngmn-voip.cc          |
| CobaltQueueDisc                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/traffic-control/model/cobalt-queue-disc.cc                                    |
| TrafficControlHelper                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/traffic-control/helper/traffic-control-helper.cc                              |
| BridgeHelper                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/bridge/helper/bridge-helper.cc                                                |
| LteCommon                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-common.cc                                                       |
| SimpleOfdmWimaxPhy                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/simple-ofdm-wimax-phy.cc                                          |
| TcpLedbat                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-ledbat.cc                                                  |
| TcpDctcp                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-dctcp.cc                                                   |
| ExampleAsTestCase                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/example-as-test.cc                                                 |
| RawTextConfig                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/config-store/model/raw-text-config.cc                                         |
| TapFdNetDeviceHelper                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/fd-net-device/helper/tap-fd-net-device-helper.cc                              |
| EpcPgwApplication                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/epc-pgw-application.cc                                              |
| Ipv4RoutingProtocol                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-routing-protocol.cc                                       |
| Ipv4GlobalRouting                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-global-routing.cc                                         |
| TcpBbr                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-bbr.cc                                                     |
| BuildingsPropagationLossModel                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/buildings/model/buildings-propagation-loss-model.cc                           |
| RrMultiUserScheduler                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/he/rr-multi-user-scheduler.cc                                      |
| AdhocWifiMac                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/adhoc-wifi-mac.cc                                                  |
| PacketBB                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/packetbb.cc                                                     |
| BSLinkManager                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/bs-link-manager.cc                                                |
| SystemPath                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/system-path.cc                                                     |
| GlobalRoutingHelper                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/helper/ipv4-global-routing-helper.cc                                 |
| TcpLp                                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-lp.cc                                                      |
| LteSpectrumValueHelper                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-spectrum-value-helper.cc                                        |
| NrErrorModel                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-error-model.cc                                                |
| RadioEnvironmentMapHelper                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/helper/radio-environment-map-helper.cc                                    |
| Icmpv6L4Protocol                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/icmpv6-l4-protocol.cc                                          |
| LteEnbNetDevice                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-enb-net-device.cc                                               |
| WifiRadioEnergyModel                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-radio-energy-model.cc                                         |
| Icmpv4L4Protocol                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/icmpv4-l4-protocol.cc                                          |
| TcpIllinois                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-illinois.cc                                                |
| PacketSocketFactory                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/packet-socket-factory.cc                                        |
| Icmpv4Header                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/icmpv4.cc                                                      |
| LteUeNetDevice                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-ue-net-device.cc                                                |
| EpcTft                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/epc-tft.cc                                                          |
| UplinkSchedulerMBQoS                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/bs-uplink-scheduler-mbqos.cc                                      |
| JakesProcess                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/propagation/model/jakes-process.cc                                            |
| Hash                                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/hash.cc                                                            |
| TcpOptionSackPermitted                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-option-sack-permitted.cc                                   |
| ArpCache                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/arp-cache.cc                                                   |
| CsmaChannel                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/csma/model/csma-channel.cc                                                    |
| OfdmPpdu                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/non-ht/ofdm-ppdu.cc                                                |
| Uinteger32Probe                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/uinteger-32-probe.cc                                              |
| XmlConfig                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/config-store/model/xml-config.cc                                              |
| TimeDataCalculators                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/time-data-calculators.cc                                          |
| Ipv4ListRouting                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-list-routing.cc                                           |
| Double                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/double.cc                                                          |
| ThreeGppPropagationLossModel                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/propagation/model/three-gpp-propagation-loss-model.cc                         |
| DsrOptions                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dsr/model/dsr-options.cc                                                      |
| ServiceFlowManager                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/service-flow-manager.cc                                           |
| FatalImpl                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/fatal-impl.cc                                                      |
| FfMacScheduler                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/ff-mac-scheduler.cc                                                 |
| BridgeNetDevice                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/bridge/model/bridge-net-device.cc                                             |
| Breakpoint                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/breakpoint.cc                                                      |
| DynamicQueueLimits                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/dynamic-queue-limits.cc                                         |
| DsssPhy                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/non-ht/dsss-phy.cc                                                 |
| CosineAntennaModel                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/antenna/model/cosine-antenna-model.cc                                         |
| Ipv4PacketInfoTag                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-packet-info-tag.cc                                        |
| TbfQueueDisc                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/traffic-control/model/tbf-queue-disc.cc                                       |
| Dot11sPeerManagementProtocol                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mesh/model/dot11s/peer-link.cc                                                |
| LteFfrEnhancedAlgorithm                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-ffr-enhanced-algorithm.cc                                       |
| Asn1Header                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-asn1-header.cc                                                  |
| Length                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/length.cc                                                          |
| QueueItem                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/queue-item.cc                                                   |
| AttributeConstructionList                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/attribute-construction-list.cc                                     |
| ObjectFactory                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/object-factory.cc                                                  |
| WifiHelper                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/helper/wifi-helper.cc                                                    |
| GnuplotAggregator                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/gnuplot-aggregator.cc                                             |
| HeapScheduler                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/heap-scheduler.cc                                                  |
| LtePdcp                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-pdcp.cc                                                         |
| DsrErrorBuffer                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dsr/model/dsr-errorbuff.cc                                                    |
| Callback                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/callback.cc                                                        |
| Ipv6QueueDiscItem                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-queue-disc-item.cc                                        |
| CalendarScheduler                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/calendar-scheduler.cc                                              |
| ThreeGppHttpVariables                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/applications/model/three-gpp-http-variables.cc                                |
| YansErrorRateModel                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/yans-error-rate-model.cc                                           |
| BlockAckAgreement                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/block-ack-agreement.cc                                             |
| MpduAggregator                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/mpdu-aggregator.cc                                                 |
| EhtFrameExchangeManager                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/eht/eht-frame-exchange-manager.cc                                  |
| GlobalValue                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/global-value.cc                                                    |
| ThreeGppV2vPropagationLossModel                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/propagation/model/three-gpp-v2v-propagation-loss-model.cc                     |
| Hash-Fnv                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/hash-fnv.cc                                                        |
| InternetStackHelper                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/helper/internet-stack-helper.cc                                      |
| WifiSpectrumPhyInterface                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-spectrum-phy-interface.cc                                     |
| PcapFileWrapper                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/pcap-file-wrapper.cc                                            |
| LteSpectrumSignalParameters                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-spectrum-signal-parameters.cc                                   |
| ListScheduler                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/list-scheduler.cc                                                  |
| GlobalRouter                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/global-router-interface.cc                                     |
| ShowProgress                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/show-progress.cc                                                   |
| NrGnbMac                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-gnb-mac.cc                                                    |
| TwoRaySpectrumPropagationLossModel                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/two-ray-spectrum-propagation-loss-model.cc                     |
| TrafficControlLayer                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/traffic-control/model/traffic-control-layer.cc                                |
| Enum                                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/enum.cc                                                            |
| AttributeIterator                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/config-store/model/attribute-iterator.cc                                      |
| UanTransducerHd                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/uan/model/uan-transducer-hd.cc                                                |
| PacketLossCounter                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/applications/model/packet-loss-counter.cc                                     |
| AodvRoutingTable                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/aodv/model/aodv-rtable.cc                                                     |
| BasicEnergyHarvester                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/energy/model/basic-energy-harvester.cc                                        |
| UdpClient                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/applications/model/udp-client.cc                                              |
| DsdvRoutingTable                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dsdv/model/dsdv-rtable.cc                                                     |
| RrpaaWifiManager                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/rate-control/rrpaa-wifi-manager.cc                                 |
| BlockAckManager                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/block-ack-manager.cc                                               |
| PacketMetadata                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/packet-metadata.cc                                              |
| LteFrSoftAlgorithm                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-fr-soft-algorithm.cc                                            |
| Names                                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/names.cc                                                           |
| Scheduler                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/scheduler.cc                                                       |
| DataCalculator                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/data-calculator.cc                                                |
| DsdvPacketQueue                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dsdv/model/dsdv-packet-queue.cc                                               |
| SSManager                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/ss-manager.cc                                                     |
| RngStream                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/rng-stream.cc                                                      |
| ObjectPtrContainer                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/object-ptr-container.cc                                            |
| TapBridge                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/tap-bridge/model/tap-bridge.cc                                                |
| Channel                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/channel.cc                                                      |
| TcpBic                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-bic.cc                                                     |
| GlobalRouteManagerImpl                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/global-route-manager-impl.cc                                   |
| PointToPointHelper                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/point-to-point/helper/point-to-point-helper.cc                                |
| BridgeChannel                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/bridge/model/bridge-channel.cc                                                |
| Ipv6AddressHelper                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/helper/ipv6-address-helper.cc                                        |
| LrWpanNetDevice                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lr-wpan/model/lr-wpan-net-device.cc                                           |
| AttributeValue                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/attribute.cc                                                       |
| PointToPointChannel                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/point-to-point/model/point-to-point-channel.cc                                |
| Ipv4AddressHelper                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/helper/ipv4-address-helper.cc                                        |
| UanChannel                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/uan/model/uan-channel.cc                                                      |
| Integer                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/integer.cc                                                         |
| DsrNetworkQueue                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dsr/model/dsr-network-queue.cc                                                |
| NrMacSchedulerTdmaMR                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-tdma-mr.cc                                      |
| AarfWifiManager                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/rate-control/aarf-wifi-manager.cc                                  |
| TypeId                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/type-id.cc                                                         |
| GroupMobilityHelper                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mobility/helper/group-mobility-helper.cc                                      |
| RandomVariableStream                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/random-variable-stream.cc                                          |
| RedQueueDisc                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/traffic-control/model/red-queue-disc.cc                                       |
| PriorityQueueScheduler                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/priority-queue-scheduler.cc                                        |
| MakeEvent                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/make-event.cc                                                      |
| Pointer                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/pointer.cc                                                         |
| SpectrumAnalyzer                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/spectrum-analyzer.cc                                           |
| Ipv4Address                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/ipv4-address.cc                                                 |
| PointToPointDumbbellHelper                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/point-to-point-layout/model/point-to-point-dumbbell.cc                        |
| TrafficGeneratorNgmnGaming                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/utils/traffic-generators/model/traffic-generator-ngmn-gaming.cc        |
| FdReader                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/unix-fd-reader.cc                                                  |
| IdealBeamformingHelper                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/helper/ideal-beamforming-helper.cc                                     |
| LteEnbComponentCarrierManager                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-enb-component-carrier-manager.cc                                |
| EventImpl                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/event-impl.cc                                                      |
| Building                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/buildings/model/building.cc                                                   |
| Application                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/application.cc                                                  |
| RandomVariableStreamHelper                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/helper/random-variable-stream-helper.cc                                  |
| LteEnbPhy                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-enb-phy.cc                                                      |
| EmuFdNetDeviceHelper                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/fd-net-device/helper/emu-fd-net-device-helper.cc                              |
| NrGnbNetDevice                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-gnb-net-device.cc                                             |
| Kun2600MhzPropagationLossModel                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/propagation/model/kun-2600-mhz-propagation-loss-model.cc                      |
| Simulator                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/simulator.cc                                                       |
| WimaxChannel                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/wimax-channel.cc                                                  |
| ObjectBase                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/object-base.cc                                                     |
| FdNetDevice                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/fd-net-device/model/fd-net-device.cc                                          |
| A2A4RsrqHandoverAlgorithm                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/a2-a4-rsrq-handover-algorithm.cc                                    |
| NetDeviceQueueInterface                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/net-device-queue-interface.cc                                   |
| Ipv4InterfaceAddress                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-interface-address.cc                                      |
| Ipv4RawSocketFactoryImpl                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-raw-socket-factory-impl.cc                                |
| OnOffApplication                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/applications/model/onoff-application.cc                                       |
| ChannelAccessManager                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/channel-access-manager.cc                                          |
| NrMacSchedulerOfdmaQos                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-ofdma-qos.cc                                    |
| HashFunction                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/hash-function.cc                                                   |
| MapScheduler                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/map-scheduler.cc                                                   |
| RrcHeader                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-rrc-header.cc                                                   |
| ByteTagList                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/byte-tag-list.cc                                                |
| Vector                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/vector.cc                                                          |
| Ipv6OptionHeader                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-option-header.cc                                          |
| BaseStationNetDevice                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/bs-net-device.cc                                                  |
| RadioBearerStatsConnector                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/helper/radio-bearer-stats-connector.cc                                    |
| NeighborCacheHelper                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/helper/neighbor-cache-helper.cc                                      |
| RrFfMacScheduler                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/rr-ff-mac-scheduler.cc                                              |
| WifiSpectrumValueHelper                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/wifi-spectrum-value-helper.cc                                  |
| Time                                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/time.cc                                                            |
| Synchronizer                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/synchronizer.cc                                                    |
| LteNetDevice                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-net-device.cc                                                   |
| Ipv6Option                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-option.cc                                                 |
| FqCoDelQueueDisc                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/traffic-control/model/fq-codel-queue-disc.cc                                  |
| Packet                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/packet.cc                                                       |
| Object                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/object.cc                                                          |
| InternetTraceHelper                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/helper/internet-trace-helper.cc                                      |
| FileAggregator                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/file-aggregator.cc                                                |
| WaypointMobilityModel                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mobility/model/waypoint-mobility-model.cc                                     |
| RngSeedManager                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/rng-seed-manager.cc                                                |
| WallClockSynchronizer                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/wall-clock-synchronizer.cc                                         |
| LlcSnalHeader                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/llc-snap-header.cc                                              |
| WifiDefaultAckManager                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-default-ack-manager.cc                                        |
| ComponentCarrierUe                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/component-carrier-ue.cc                                             |
| LteFfrSoftAlgorithm                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-ffr-soft-algorithm.cc                                           |
| SimpleChannel                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/simple-channel.cc                                               |
| Ipv4StaticRouting                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-static-routing.cc                                         |
| Probe                                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/probe.cc                                                          |
| SqliteDataOutput                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/sqlite-data-output.cc                                             |
| Ipv4L3Protocol                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-l3-protocol.cc                                            |
| SQLiteOutput                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/sqlite-output.cc                                                  |
| WaveformGeneratorHelper                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/helper/waveform-generator-helper.cc                                  |
| DataCollector                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/data-collector.cc                                                 |
| int64x64-128                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/int64x64-128.cc                                                    |
| UanMacCw                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/uan/model/uan-mac-cw.cc                                                       |
| InetSocketAddress                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/inet-socket-address.cc                                          |
| UanMacRc                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/uan/model/uan-mac-rc.cc                                                       |
| Rip                                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/rip.cc                                                         |
| FlameProtocol                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mesh/model/flame/flame-protocol.cc                                            |
| Ipv4                                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4.cc                                                        |
| PointToPointStarHelper                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/point-to-point-layout/model/point-to-point-star.cc                            |
| NdiscCache                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ndisc-cache.cc                                                 |
| TcpRecoveryOps                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-recovery-ops.cc                                            |
| EhtPpdu                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/eht/eht-ppdu.cc                                                    |
| AarfcdWifiManager                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/rate-control/aarfcd-wifi-manager.cc                                |
| Ipv6InterfaceAddress                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-interface-address.cc                                      |
| HtPhy                                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/ht/ht-phy.cc                                                       |
| BooleanProbe                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/boolean-probe.cc                                                  |
| DataCollectionObject                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/data-collection-object.cc                                         |
| Mac64Address                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/mac64-address.cc                                                |
| TcpCongestionOps                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-congestion-ops.cc                                          |
| EnergyHarvesterContainer                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/energy/helper/energy-harvester-container.cc                                   |
| PacketDataCalculators                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/packet-data-calculators.cc                                      |
| VirtualNetDevice                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/virtual-net-device/model/virtual-net-device.cc                                |
| Histogram                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/histogram.cc                                                      |
| BandwidthPartGnb                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/bandwidth-part-gnb.cc                                            |
| PcapFile                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/pcap-file.cc                                                    |
| Uinteger16Probe                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/uinteger-16-probe.cc                                              |
| NixVector                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/nix-vector.cc                                                   |
| Uinteger8Probe                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/uinteger-8-probe.cc                                               |
| TraceHelper                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/helper/trace-helper.cc                                                |
| Ipv6Header                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-header.cc                                                 |
| OmnetDataOutput                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/omnet-data-output.cc                                              |
| TagBuffer                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/tag-buffer.cc                                                   |
| ErrorModel                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/error-model.cc                                                  |
| ApplicationContainer                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/helper/application-container.cc                                       |
| SimpleNetDeviceHelper                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/helper/simple-net-device-helper.cc                                    |
| SimpleNetDevice                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/simple-net-device.cc                                            |
| NrMacShortBsrCe                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-short-bsr-ce.cc                                           |
| FlowIdTag                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/flow-id-tag.cc                                                  |
| NoOpHandoverAlgorithm                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/no-op-handover-algorithm.cc                                         |
| Socket                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/socket.cc                                                       |
| TimePrinter                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/time-printer.cc                                                    |
| TvSpectrumTransmitterHelper                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/helper/tv-spectrum-transmitter-helper.cc                             |
| LteEnbRrc                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-enb-rrc.cc                                                      |
| QueueLimits                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/queue-limits.cc                                                 |
| LteRlcHeader                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-rlc-header.cc                                                   |
| Ipv4Header                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-header.cc                                                 |
| FifoQueueDisc                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/traffic-control/model/fifo-queue-disc.cc                                      |
| Watchdog                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/watchdog.cc                                                        |
| Uinteger                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/uinteger.cc                                                        |
| CsmaStarHelper                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/csma-layout/model/csma-star-helper.cc                                         |
| InterferenceHelper                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/interference-helper.cc                                             |
| FqPieQueueDisc                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/traffic-control/model/fq-pie-queue-disc.cc                                    |
| OlsrHeader                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/olsr/model/olsr-header.cc                                                     |
| ThreeGppFtpM1Helper                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/helper/three-gpp-ftp-m1-helper.cc                                      |
| ChannelList                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/channel-list.cc                                                 |
| DsrHelper                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dsr/helper/dsr-helper.cc                                                      |
| Ipv4PacketFilter                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-packet-filter.cc                                          |
| TcpHighSpeed                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-highspeed.cc                                               |
| FileHelper                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/helper/file-helper.cc                                                   |
| Ipv6FlowProbe                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/flow-monitor/model/ipv6-flow-probe.cc                                         |
| DhcpHeader                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet-apps/model/dhcp-header.cc                                            |
| DhcpServer                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet-apps/model/dhcp-server.cc                                            |
| Header                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/header.cc                                                       |
| ArpL3Protocol                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/arp-l3-protocol.cc                                             |
| EpcEnbApplication                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/epc-enb-application.cc                                              |
| CsmaHelper                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/csma/helper/csma-helper.cc                                                    |
| YansWifiChannel                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/yans-wifi-channel.cc                                               |
| UanMacAloha                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/uan/model/uan-mac-aloha.cc                                                    |
| Node                                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/node.cc                                                         |
| Ipv6PacketProbe                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-packet-probe.cc                                           |
| PacketFilter                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/traffic-control/model/packet-filter.cc                                        |
| PacketTagList                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/packet-tag-list.cc                                              |
| SocketFactory                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/socket-factory.cc                                               |
| RttEstimator                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/rtt-estimator.cc                                               |
| ThreeGppHttpServer                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/applications/model/three-gpp-http-server.cc                                   |
| RandomWalk2d                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mobility/model/random-walk-2d-mobility-model.cc                               |
| PacketProbe                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/packet-probe.cc                                                 |
| LteStatsCalculator                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/helper/lte-stats-calculator.cc                                            |
| PacketSocketClient                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/packet-socket-client.cc                                         |
| Ipv4AddressGenerator                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-address-generator.cc                                      |
| Ipv6PacketFilter                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-packet-filter.cc                                          |
| Trailer                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/trailer.cc                                                      |
| WifiTxParameters                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-tx-parameters.cc                                              |
| UdpTraceClient                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/applications/model/udp-trace-client.cc                                        |
| IpL4Protocol                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ip-l4-protocol.cc                                              |
| AddressUtils                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/address-utils.cc                                                |
| SpectrumAnalyzerHelper                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/helper/spectrum-analyzer-helper.cc                                   |
| Ipv6EndPointDemux                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-end-point-demux.cc                                        |
| NrMacHeaderVs                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-header-vs.cc                                              |
| LteRlcAmHeader                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-rlc-am-header.cc                                                |
| PacketSocket                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/packet-socket.cc                                                |
| DataRate                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/data-rate.cc                                                    |
| PointToPointEpcHelper                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/helper/point-to-point-epc-helper.cc                                       |
| FrameExchangeManager                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/frame-exchange-manager.cc                                          |
| VhtPpdu                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/vht/vht-ppdu.cc                                                    |
| EventId                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/event-id.cc                                                        |
| WaveformGenerator                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/waveform-generator.cc                                          |
| ErrorChannel                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/error-channel.cc                                                |
| NrGnbPhy                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-gnb-phy.cc                                                    |
| TimeProbe                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/time-probe.cc                                                     |
| TraceSourceAccessor                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/trace-source-accessor.cc                                           |
| QueueSize                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/queue-size.cc                                                   |
| LteHandoverAlgorithm                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-handover-algorithm.cc                                           |
| ItuR1411NlosOverRooftopPropagationLossModel       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/propagation/model/itu-r-1411-nlos-over-rooftop-propagation-loss-model.cc      |
| int64x64                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/int64x64.cc                                                        |
| SimpleFrameCaptureModel                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/simple-frame-capture-model.cc                                      |
| EthernetTrailer                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/ethernet-trailer.cc                                             |
| Hash-Murmur3                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/hash-murmur3.cc                                                    |
| DsrSendBuffer                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dsr/model/dsr-rsendbuff.cc                                                    |
| OutputStreamWrapper                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/output-stream-wrapper.cc                                        |
| ConfigStore                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/config-store/model/config-store.cc                                            |
| Ipv6Address                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/ipv6-address.cc                                                 |
| Queue                                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/queue.cc                                                        |
| TcpL4Protocol                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-l4-protocol.cc                                             |
| Mac48Address                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/mac48-address.cc                                                |
| SftmClient                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dash/model/algorithms/sftm-client.cc                                          |
| AaashClient                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dash/model/algorithms/aaash-client.cc                                         |
| Address                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/address.cc                                                      |
| PacketBurst                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/packet-burst.cc                                                 |
| TimeSeriesAdaptor                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/time-series-adaptor.cc                                            |
| RadioBearerStatsCalculator                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/helper/radio-bearer-stats-calculator.cc                                   |
| WifiMacQueueScheduler                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-mac-queue-scheduler.cc                                        |
| SimpleUeComponentCarrierManager                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/simple-ue-component-carrier-manager.cc                              |
| TcpOptionWinScale                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-option-winscale.cc                                         |
| ThreeGppAntennaModel                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/antenna/model/three-gpp-antenna-model.cc                                      |
| BuildingsHelper                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/buildings/helper/buildings-helper.cc                                          |
| TcpCubic                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-cubic.cc                                                   |
| UanMacRcGw                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/uan/model/uan-mac-rc-gw.cc                                                    |
| TcpHtcp                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-htcp.cc                                                    |
| TcpOption                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-option.cc                                                  |
| TcpPrrRecovery                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-prr-recovery.cc                                            |
| TcpRateOps                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-rate-ops.cc                                                |
| Boolean                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/boolean.cc                                                         |
| TcpSocketBase                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-socket-base.cc                                             |
| TcpTxBuffer                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-tx-buffer.cc                                               |
| MPEGHeader                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dash/model/mpeg-header.cc                                                     |
| TcpVegas                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-vegas.cc                                                   |
| TcpWestwoodPlus                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-westwood-plus.cc                                           |
| TdMtFfMacScheduler                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/tdmt-ff-mac-scheduler.cc                                            |
| TcpYeah                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-yeah.cc                                                    |
| UdpL4Protocol                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/udp-l4-protocol.cc                                             |
| Ipv6EndPoint                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-end-point.cc                                              |
| UdpSocketImpl                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/udp-socket-impl.cc                                             |
| NrMacSchedulerLcRR                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-lc-rr.cc                                        |
| ApplicationPacketProbe                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/applications/model/application-packet-probe.cc                                |
| EnergySource                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/energy/model/energy-source.cc                                                 |
| BulkSendApplication                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/applications/model/bulk-send-application.cc                                   |
| SeqTsEchoHeader                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/applications/model/seq-ts-echo-header.cc                                      |
| SeqTsHeader                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/applications/model/seq-ts-header.cc                                           |
| SeqTsSizeHeader                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/applications/model/seq-ts-size-header.cc                                      |
| ThreeGppHttpClient                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/applications/model/three-gpp-http-client.cc                                   |
| UdpEchoClientApplication                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/applications/model/udp-echo-client.cc                                         |
| PointToPointNetDevice                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/point-to-point/model/point-to-point-net-device.cc                             |
| PacketSocketServer                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/packet-socket-server.cc                                         |
| DhcpHelper                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet-apps/helper/dhcp-helper.cc                                           |
| UdpServer                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/applications/model/udp-server.cc                                              |
| WifiPhyOperatingChannel                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-phy-operating-channel.cc                                      |
| GtpuHeader                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/epc-gtpu-header.cc                                                  |
| MobilityHelper                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mobility/helper/mobility-helper.cc                                            |
| PrioQueueDisc                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/traffic-control/model/prio-queue-disc.cc                                      |
| SpectrumChannel                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/spectrum-channel.cc                                            |
| LteRlcTm                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-rlc-tm.cc                                                       |
| Ns2MobilityHelper                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mobility/helper/ns2-mobility-helper.cc                                        |
| DoubleProbe                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/model/double-probe.cc                                                   |
| ConstantVelocityHelper                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mobility/model/constant-velocity-helper.cc                                    |
| FcfsWifiQueueScheduler                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/fcfs-wifi-queue-scheduler.cc                                       |
| NrMacSchedulerLCG                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-lcg.cc                                          |
| GeographicPositions                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mobility/model/geographic-positions.cc                                        |
| VhtFrameExchangeManager                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/vht/vht-frame-exchange-manager.cc                                  |
| HierarchicalMobilityModel                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mobility/model/hierarchical-mobility-model.cc                                 |
| PfFfMacScheduler                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/pf-ff-mac-scheduler.cc                                              |
| MpegPlayer                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dash/model/mpeg-player.cc                                                     |
| ChannelConditionModel                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/propagation/model/channel-condition-model.cc                                  |
| GtpcHeader                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/epc-gtpc-header.cc                                                  |
| LrWpanErrorModel                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lr-wpan/model/lr-wpan-error-model.cc                                          |
| Cost231PropagationLossModel                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/propagation/model/cost231-propagation-loss-model.cc                           |
| SixLowPanNetDevice                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/sixlowpan/model/sixlowpan-net-device.cc                                       |
| IsotropicAntennaModel                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/antenna/model/isotropic-antenna-model.cc                                      |
| ItuR1411LosPropagationLossModel                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/propagation/model/itu-r-1411-los-propagation-loss-model.cc                    |
| Jakes                                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/propagation/model/jakes-propagation-loss-model.cc                             |
| NrMacSchedulerCQIManagement                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-cqi-management.cc                               |
| BuildingList                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/buildings/model/building-list.cc                                              |
| EpcHelper                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/helper/epc-helper.cc                                                      |
| HybridBuildingsPropagationLossModel               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/buildings/model/hybrid-buildings-propagation-loss-model.cc                    |
| OkumuraHataPropagationLossModel                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/propagation/model/okumura-hata-propagation-loss-model.cc                      |
| NodePrinter                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/node-printer.cc                                                    |
| AlohaNoackNetDevice                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/aloha-noack-net-device.cc                                      |
| CoDelQueueDisc                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/traffic-control/model/codel-queue-disc.cc                                     |
| LteAmc                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-amc.cc                                                          |
| HtFrameExchangeManager                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/ht/ht-frame-exchange-manager.cc                                    |
| FdMtFfMacScheduler                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/fdmt-ff-mac-scheduler.cc                                            |
| Ipv4RawSocketImpl                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-raw-socket-impl.cc                                        |
| ProbabilisticV2vChannelConditionModel             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/propagation/model/probabilistic-v2v-channel-condition-model.cc                |
| PropagationLossModel                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/propagation/model/propagation-loss-model.cc                                   |
| NrMacSchedulerTdma                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-tdma.cc                                         |
| MobilityBuildingInfo                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/buildings/model/mobility-building-info.cc                                     |
| BuildingsChannelConditionModel                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/buildings/model/buildings-channel-condition-model.cc                          |
| ItuR1238PropagationLossModel                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/buildings/model/itu-r-1238-propagation-loss-model.cc                          |
| ShannonSpectrumErrorModel                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/spectrum-error-model.cc                                        |
| OhBuildingsPropagationLossModel                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/buildings/model/oh-buildings-propagation-loss-model.cc                        |
| CqaFfMacScheduler                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/cqa-ff-mac-scheduler.cc                                             |
| RandomWalk2dOutdoor                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/buildings/model/random-walk-2d-outdoor-mobility-model.cc                      |
| ThreeGppV2vChannelConditionModel                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/buildings/model/three-gpp-v2v-channel-condition-model.cc                      |
| Angles                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/antenna/model/angles.cc                                                       |
| AntennaModel                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/antenna/model/antenna-model.cc                                                |
| PhyEntity                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/phy-entity.cc                                                      |
| ParabolicAntennaModel                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/antenna/model/parabolic-antenna-model.cc                                      |
| LteVendorSpecificParameters                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-vendor-specific-parameters.cc                                   |
| PhasedArrayModel                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/antenna/model/phased-array-model.cc                                           |
| AparfWifiManager                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/rate-control/aparf-wifi-manager.cc                                 |
| UniformPlanarArray                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/antenna/model/uniform-planar-array.cc                                         |
| DashServer                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dash/model/dash-server.cc                                                     |
| CsvReader                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/helper/csv-reader.cc                                                     |
| UanPhyGen                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/uan/model/uan-phy-gen.cc                                                      |
| DsrRouteCache                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dsr/model/dsr-rcache.cc                                                       |
| FlowMonitor                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/flow-monitor/model/flow-monitor.cc                                            |
| Ipv4FlowProbe                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/flow-monitor/model/ipv4-flow-probe.cc                                         |
| PppHeader                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/point-to-point/model/ppp-header.cc                                            |
| Backoff                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/csma/model/backoff.cc                                                         |
| CsmaNetDevice                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/csma/model/csma-net-device.cc                                                 |
| AlohaNoackMacHeader                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/aloha-noack-mac-header.cc                                      |
| Ipv6L3Protocol                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-l3-protocol.cc                                            |
| RadvdHelper                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet-apps/helper/radvd-helper.cc                                          |
| NrUeMac                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-ue-mac.cc                                                     |
| GnuplotHelper                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/stats/helper/gnuplot-helper.cc                                                |
| DefaultSimulatorImpl                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/default-simulator-impl.cc                                          |
| FdTbfqFfMacScheduler                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/fdtbfq-ff-mac-scheduler.cc                                          |
| DhcpClient                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet-apps/model/dhcp-client.cc                                            |
| DeviceEnergyModel                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/energy/model/device-energy-model.cc                                           |
| WifiRemoteStationManager                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-remote-station-manager.cc                                     |
| PhyRxStatsCalculator                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/helper/phy-rx-stats-calculator.cc                                         |
| Ping                                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet-apps/model/ping.cc                                                   |
| Buffer                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/model/buffer.cc                                                       |
| ThreeGppHttpHeader                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/applications/model/three-gpp-http-header.cc                                   |
| RadvdPrefix                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet-apps/model/radvd-prefix.cc                                           |
| WifiTxCurrentModel                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-tx-current-model.cc                                           |
| V4Ping                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet-apps/model/v4ping.cc                                                 |
| NrMacHeaderFs                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-header-fs.cc                                              |
| ThreeGppChannelModel                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/three-gpp-channel-model.cc                                     |
| V4TraceRoute                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet-apps/model/v4traceroute.cc                                           |
| AdhocAlohaNoackIdealPhyHelper                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/helper/adhoc-aloha-noack-ideal-phy-helper.cc                         |
| Ipv4EndPoint                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-end-point.cc                                              |
| Test                                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/test.cc                                                            |
| TcpRxBuffer                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-rx-buffer.cc                                               |
| ConstantSpectrumPropagationLossModel              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/constant-spectrum-propagation-loss.cc                          |
| HalfDuplexIdealPhySignalParameters                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/half-duplex-ideal-phy-signal-parameters.cc                     |
| HalfDuplexIdealPhy                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/half-duplex-ideal-phy.cc                                       |
| Tlv                                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/wimax-tlv.cc                                                      |
| MicrowaveOvenSpectrumValue                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/microwave-oven-spectrum-value-helper.cc                        |
| OrbisTopologyReader                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/topology-read/model/orbis-topology-reader.cc                                  |
| HttpParser                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dash/model/http-parser.cc                                                     |
| BsServiceFlowManager                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/bs-service-flow-manager.cc                                        |
| MultiModelSpectrumChannel                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/multi-model-spectrum-channel.cc                                |
| SpectrumConverter                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/spectrum-converter.cc                                          |
| WifiPhyStateHelper                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-phy-state-helper.cc                                           |
| WifiMacQueue                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-mac-queue.cc                                                  |
| SpectrumModel                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/spectrum-model.cc                                              |
| TraceFadingLossModel                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/trace-fading-loss-model.cc                                     |
| SpectrumPhy                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/spectrum-phy.cc                                                |
| GenericBatteryModel                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/energy/model/generic-battery-model.cc                                         |
| NrAmc                                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-amc.cc                                                        |
| TcpOptionSack                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-option-sack.cc                                             |
| SpectrumPropagationLossModel                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/spectrum-propagation-loss-model.cc                             |
| SpectrumTransmitFilter                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/spectrum-transmit-filter.cc                                    |
| SpectrumSignalParameters                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/spectrum-signal-parameters.cc                                  |
| LteRlcUm                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-rlc-um.cc                                                       |
| LteSpectrumPhy                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-spectrum-phy.cc                                                 |
| SpectrumValue                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/spectrum-value.cc                                              |
| ThreeGppSpectrumPropagationLossModel              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/three-gpp-spectrum-propagation-loss-model.cc                   |
| TcpHeader                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-header.cc                                                  |
| TvSpectrumTransmitter                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/tv-spectrum-transmitter.cc                                     |
| RipHeader                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/rip-header.cc                                                  |
| PointToPointGridHelper                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/point-to-point-layout/model/point-to-point-grid.cc                            |
| BasicEnergySource                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/energy/model/basic-energy-source.cc                                           |
| DeviceEnergyModelContainer                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/energy/model/device-energy-model-container.cc                                 |
| EnergyHarvester                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/energy/model/energy-harvester.cc                                              |
| BuildingAllocator                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/buildings/helper/building-allocator.cc                                        |
| RvBatteryModel                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/energy/model/rv-battery-model.cc                                              |
| SimpleDeviceEnergyModel                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/energy/model/simple-device-energy-model.cc                                    |
| UanHelper                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/uan/helper/uan-helper.cc                                                      |
| NrMacSchedulerUeInfoPF                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-ue-info-pf.cc                                   |
| NrMacRxTrace                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/helper/nr-mac-rx-trace.cc                                              |
| EpcUeNas                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/epc-ue-nas.cc                                                       |
| RealtimeSimulatorImpl                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/realtime-simulator-impl.cc                                         |
| EhtConfiguration                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/eht/eht-configuration.cc                                           |
| Mac8Address                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/mac8-address.cc                                                 |
| AcousticModemEnergyModel                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/uan/model/acoustic-modem-energy-model.cc                                      |
| UanNetDevice                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/uan/model/uan-net-device.cc                                                   |
| UanPhyDual                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/uan/model/uan-phy-dual.cc                                                     |
| UanPropModelThorp                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/uan/model/uan-prop-model-thorp.cc                                             |
| LteUeRrc                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-ue-rrc.cc                                                       |
| HtConfiguration                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/ht/ht-configuration.cc                                             |
| PacketSink                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/applications/model/packet-sink.cc                                             |
| UanTxMode                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/uan/model/uan-tx-mode.cc                                                      |
| NrMacSchedulerSrsDefault                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-srs-default.cc                                  |
| EmuEpcHelper                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/helper/emu-epc-helper.cc                                                  |
| LteHelper                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/helper/lte-helper.cc                                                      |
| SpectrumInterference                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/spectrum-interference.cc                                       |
| BlockAckWindow                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/block-ack-window.cc                                                |
| WifiDefaultAssocManager                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-default-assoc-manager.cc                                      |
| SimulatorImpl                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/simulator-impl.cc                                                  |
| LteRlcAm                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-rlc-am.cc                                                       |
| NonCommunicatingNetDevice                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/non-communicating-net-device.cc                                |
| MacStatsCalculator                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/helper/mac-stats-calculator.cc                                            |
| NoBackhaulEpcHelper                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/helper/no-backhaul-epc-helper.cc                                          |
| RipNg                                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ripng.cc                                                       |
| PhyStatsCalculator                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/helper/phy-stats-calculator.cc                                            |
| WimaxPhy                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/wimax-phy.cc                                                      |
| RadvdApplication                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet-apps/model/radvd.cc                                                  |
| DropTailQueue                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/drop-tail-queue.cc                                              |
| PhyTxStatsCalculator                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/helper/phy-tx-stats-calculator.cc                                         |
| A3RsrpHandoverAlgorithm                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/a3-rsrp-handover-algorithm.cc                                       |
| NrMacSchedulerLcQos                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-mac-scheduler-lc-qos.cc                                       |
| LteFfrDistributedAlgorithm                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-ffr-distributed-algorithm.cc                                    |
| MeshWifiInterfaceMac                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mesh/model/mesh-wifi-interface-mac.cc                                         |
| BeamformingHelperBase                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/helper/beamforming-helper-base.cc                                      |
| Mac16Address                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/mac16-address.cc                                                |
| ComponentCarrierEnb                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/component-carrier-enb.cc                                            |
| WifiProtectionManager                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/wifi-protection-manager.cc                                         |
| ComponentCarrier                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/component-carrier.cc                                                |
| Ping6Application                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet-apps/model/ping6.cc                                                  |
| EpcSgwApplication                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/epc-sgw-application.cc                                              |
| RandomDirection2dMobilityModel                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/mobility/model/random-direction-2d-mobility-model.cc                          |
| EpcTftClassifier                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/epc-tft-classifier.cc                                               |
| WimaxHelper                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/helper/wimax-helper.cc                                                  |
| Ipv6RawSocketImpl                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv6-raw-socket-impl.cc                                        |
| RadiotapHeader                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/network/utils/radiotap-header.cc                                              |
| EpcX2Header                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/epc-x2-header.cc                                                    |
| FdBetFfMacScheduler                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/fdbet-ff-mac-scheduler.cc                                           |
| NrBearerStatsSimple                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/helper/nr-bearer-stats-simple.cc                                       |
| TcpScalable                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-scalable.cc                                                |
| LteChunkProcessor                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-chunk-processor.cc                                              |
| LteControlMessage                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-control-messages.cc                                             |
| LtePdcpHeader                                     | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-pdcp-header.cc                                                  |
| PfifoFastQueueDisc                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/traffic-control/model/pfifo-fast-queue-disc.cc                                |
| LteEnbMac                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-enb-mac.cc                                                      |
| LteFfrAlgorithm                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-ffr-algorithm.cc                                                |
| RadvdInterface                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet-apps/model/radvd-interface.cc                                        |
| LteFrHardAlgorithm                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-fr-hard-algorithm.cc                                            |
| Ipv4QueueDiscItem                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/ipv4-queue-disc-item.cc                                        |
| SystemWallClockMs                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/system-wall-clock-ms.cc                                            |
| LteFrNoOpAlgorithm                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-fr-no-op-algorithm.cc                                           |
| RecipientBlockAckAgreement                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/recipient-block-ack-agreement.cc                                   |
| LteFrStrictAlgorithm                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-fr-strict-algorithm.cc                                          |
| LteHarqPhy                                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-harq-phy.cc                                                     |
| NixVectorRouting                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/nix-vector-routing/model/nix-vector-routing.cc                                |
| LteInterference                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-interference.cc                                                 |
| HeConfiguration                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/he/he-configuration.cc                                             |
| EpcX2                                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/epc-x2.cc                                                           |
| LtePhy                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-phy.cc                                                          |
| TrickleTimer                                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/trickle-timer.cc                                                   |
| YansWifiHelper                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/helper/yans-wifi-helper.cc                                               |
| LteRlc                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-rlc.cc                                                          |
| NistErrorRateModel                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/nist-error-rate-model.cc                                           |
| LteRrcProtocolIdeal                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-rrc-protocol-ideal.cc                                           |
| LteRrcProtocolReal                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-rrc-protocol-real.cc                                            |
| TcpOptionTS                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-option-ts.cc                                               |
| TtaFfMacScheduler                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/tta-ff-mac-scheduler.cc                                             |
| RealisticBfManager                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/realistic-bf-manager.cc                                          |
| LteUeComponentCarrierManager                      | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-ue-component-carrier-manager.cc                                 |
| UplinkScheduler                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wimax/model/bs-uplink-scheduler.cc                                            |
| LteHexGridEnbTopologyHelper                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/helper/lte-hex-grid-enb-topology-helper.cc                                |
| Config                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/core/model/config.cc                                                          |
| SingleModelSpectrumChannel                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/spectrum/model/single-model-spectrum-channel.cc                               |
| LteUeMac                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-ue-mac.cc                                                       |
| GridScenarioHelper                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/helper/grid-scenario-helper.cc                                         |
| LteUePhy                                          | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/lte-ue-phy.cc                                                       |
| NoOpComponentCarrierManager                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/no-op-component-carrier-manager.cc                                  |
| PssFfMacScheduler                                 | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/pss-ff-mac-scheduler.cc                                             |
| RemSpectrumPhy                                    | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/rem-spectrum-phy.cc                                                 |
| TdBetFfMacScheduler                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/tdbet-ff-mac-scheduler.cc                                           |
| TdTbfqFfMacScheduler                              | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/lte/model/tdtbfq-ff-mac-scheduler.cc                                          |
| SpectrumWifiHelper                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/helper/spectrum-wifi-helper.cc                                           |
| nrControlMessage                                  | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/model/nr-control-messages.cc                                           |
| ApWifiMac                                         | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/ap-wifi-mac.cc                                                     |
| FdashClient                                       | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/dash/model/algorithms/fdash-client.cc                                         |
| DefaultEmlsrManager                               | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/eht/default-emlsr-manager.cc                                       |
| TcpVeno                                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/internet/model/tcp-veno.cc                                                    |
| EhtPhy                                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/eht/eht-phy.cc                                                     |
| RealisticBeamformingHelper                        | /home/chinmay/project/btechproject/11feb/ns-3-dev/contrib/nr/helper/realistic-beamforming-helper.cc                                 |
| ConstantObssPdAlgorithm                           | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/he/constant-obss-pd-algorithm.cc                                   |
| HeFrameExchangeManager                            | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/he/he-frame-exchange-manager.cc                                    |
| HePhy                                             | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/he/he-phy.cc                                                       |
| MultiUserScheduler                                | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/he/multi-user-scheduler.cc                                         |
| ObssPdAlgorithm                                   | /home/chinmay/project/btechproject/11feb/ns-3-dev/src/wifi/model/he/obss-pd-algorithm.cc                                            |

*/

/*!
\page TraceSourceList All TraceSources

This is a list of all \ref tracing sources.  For more information see the  \ref tracing section of this API documentation and the Tracing sections in the Tutorial and Manual.

<b>ns3::AarfcdWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::AarfWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::AcousticModemEnergyModel</b><br>
<ul>
<li><b>TotalEnergyConsumption</b>: Total energy consumption of the modem device.</li>
</ul>
<b>ns3::AlohaNoackNetDevice</b><br>
<ul>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,</li>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission</li>
</ul>
<b>ns3::AmrrWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::AparfWifiManager</b><br>
<ul>
<li><b>PowerChange</b>: The transmission power has change</li>
<li><b>RateChange</b>: The transmission rate has change</li>
</ul>
<b>ns3::ApplicationPacketProbe</b><br>
<ul>
<li><b>Output</b>: The packet plus its socket address that serve as the output for this probe</li>
<li><b>OutputBytes</b>: The number of bytes in the packet</li>
</ul>
<b>ns3::ApWifiMac</b><br>
<ul>
<li><b>AssociatedSta</b>: A station associated with this access point.</li>
<li><b>DeAssociatedSta</b>: A station lost association with this access point.</li>
</ul>
<b>ns3::ArfWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::ArpCache</b><br>
<ul>
<li><b>Drop</b>: Packet dropped due to ArpCache entry in WaitReply expiring.</li>
</ul>
<b>ns3::ArpL3Protocol</b><br>
<ul>
<li><b>Drop</b>: Packet dropped because not enough room in pending queue for a specific cache entry.</li>
</ul>
<b>ns3::BaseStationNetDevice</b><br>
<ul>
<li><b>BSPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,</li>
<li><b>BSRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,</li>
<li><b>BSRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.</li>
<li><b>BSTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.</li>
<li><b>BSTxDrop</b>: A packet has been dropped in the MAC layer before being queued for transmission.</li>
</ul>
<b>ns3::BasicEnergyHarvester</b><br>
<ul>
<li><b>HarvestedPower</b>: Harvested power by the BasicEnergyHarvester.</li>
<li><b>TotalEnergyHarvested</b>: Total energy harvested by the harvester.</li>
</ul>
<b>ns3::BasicEnergySource</b><br>
<ul>
<li><b>RemainingEnergy</b>: Remaining energy at BasicEnergySource.</li>
</ul>
<b>ns3::BlockAckManager</b><br>
<ul>
<li><b>AgreementState</b>: The state of the ADDBA handshake</li>
</ul>
<b>ns3::BooleanProbe</b><br>
<ul>
<li><b>Output</b>: The bool that serves as output for this probe</li>
</ul>
<b>ns3::BulkSendApplication</b><br>
<ul>
<li><b>Tx</b>: A new packet is sent</li>
<li><b>TxWithSeqTsSize</b>: A new packet is created with SeqTsSizeHeader</li>
</ul>
<b>ns3::CaraWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::CobaltQueueDisc</b><br>
<ul>
<li><b>Count</b>: Cobalt count</li>
<li><b>DropNext</b>: Time until next packet drop</li>
<li><b>DropState</b>: Dropping state</li>
</ul>
<b>ns3::CoDelQueueDisc</b><br>
<ul>
<li><b>Count</b>: CoDel count</li>
<li><b>DropNext</b>: Time until next packet drop</li>
<li><b>DropState</b>: Dropping state</li>
<li><b>LastCount</b>: CoDel lastcount</li>
</ul>
<b>ns3::CsmaNetDevice</b><br>
<ul>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,</li>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device</li>
<li><b>MacTxBackoff</b>: Trace source indicating a packet has been delayed by the CSMA backoff process</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received by the device</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device</li>
</ul>
<b>ns3::DashClient</b><br>
<ul>
<li><b>Tx</b>: A new packet is created and is sent</li>
</ul>
<b>ns3::DashServer</b><br>
<ul>
<li><b>Rx</b>: A packet has been received</li>
</ul>
<b>ns3::DhcpClient</b><br>
<ul>
<li><b>ExpireLease</b>: A lease expires</li>
<li><b>NewLease</b>: Get a NewLease</li>
</ul>
<b>ns3::dot11s::HwmpProtocol</b><br>
<ul>
<li><b>RouteChange</b>: Routing table changed</li>
<li><b>RouteDiscoveryTime</b>: The time of route discovery procedure</li>
</ul>
<b>ns3::dot11s::PeerManagementProtocol</b><br>
<ul>
<li><b>LinkClose</b>: New peer link closed</li>
<li><b>LinkOpen</b>: New peer link opened</li>
</ul>
<b>ns3::DoubleProbe</b><br>
<ul>
<li><b>Output</b>: The double that serves as output for this probe</li>
</ul>
<b>ns3::dsr::DsrOptions</b><br>
<ul>
<li><b>Drop</b>: Packet dropped.</li>
<li><b>Rx</b>: Receive DSR packet.</li>
</ul>
<b>ns3::dsr::DsrRouting</b><br>
<ul>
<li><b>Drop</b>: Drop DSR packet</li>
<li><b>Tx</b>: Send DSR packet.</li>
</ul>
<b>ns3::DynamicQueueLimits</b><br>
<ul>
<li><b>Limit</b>: Limit value calculated by DQL</li>
</ul>
<b>ns3::EpcUeNas</b><br>
<ul>
<li><b>StateTransition</b>: fired upon every UE NAS state transition</li>
</ul>
<b>ns3::FdNetDevice</b><br>
<ul>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,</li>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device</li>
</ul>
<b>ns3::GenericBatteryModel</b><br>
<ul>
<li><b>RemainingEnergy</b>: Remaining energy of generic battery</li>
</ul>
<b>ns3::HalfDuplexIdealPhy</b><br>
<ul>
<li><b>RxAbort</b>: Trace fired when a previously started RX is aborted before time</li>
<li><b>RxEndError</b>: Trace fired when a previously started RX terminates with an error (packet is corrupted)</li>
<li><b>RxEndOk</b>: Trace fired when a previously started RX terminates successfully</li>
<li><b>RxStart</b>: Trace fired when the start of a signal is detected</li>
<li><b>TxEnd</b>: Trace fired when a previously started transmission is finished</li>
<li><b>TxStart</b>: Trace fired when a new transmission is started</li>
</ul>
<b>ns3::IdealWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::Ipv4L3Protocol</b><br>
<ul>
<li><b>Drop</b>: Drop ipv4 packet</li>
<li><b>LocalDeliver</b>: An IPv4 packet was received by/for this node, and it is being forward up the stack</li>
<li><b>MulticastForward</b>: A multicast IPv4 packet was received by this node and is being forwarded to another node</li>
<li><b>Rx</b>: Receive ipv4 packet from incoming interface.</li>
<li><b>SendOutgoing</b>: A newly-generated packet by this node is about to be queued for transmission</li>
<li><b>Tx</b>: Send ipv4 packet to outgoing interface.</li>
<li><b>UnicastForward</b>: A unicast IPv4 packet was received by this node and is being forwarded to another node</li>
</ul>
<b>ns3::Ipv4PacketProbe</b><br>
<ul>
<li><b>Output</b>: The packet plus its IPv4 object and interface that serve as the output for this probe</li>
<li><b>OutputBytes</b>: The number of bytes in the packet</li>
</ul>
<b>ns3::Ipv6L3Protocol</b><br>
<ul>
<li><b>Drop</b>: Drop IPv6 packet</li>
<li><b>LocalDeliver</b>: An IPv6 packet was received by/for this node, and it is being forward up the stack</li>
<li><b>Rx</b>: Receive IPv6 packet from incoming interface.</li>
<li><b>SendOutgoing</b>: A newly-generated packet by this node is about to be queued for transmission</li>
<li><b>Tx</b>: Send IPv6 packet to outgoing interface.</li>
<li><b>UnicastForward</b>: A unicast IPv6 packet was received by this node and is being forwarded to another node</li>
</ul>
<b>ns3::Ipv6PacketProbe</b><br>
<ul>
<li><b>Output</b>: The packet plus its IPv6 object and interface that serve as the output for this probe</li>
<li><b>OutputBytes</b>: The number of bytes in the packet</li>
</ul>
<b>ns3::LiIonEnergySource</b><br>
<ul>
<li><b>RemainingEnergy</b>: Remaining energy at BasicEnergySource.</li>
</ul>
<b>ns3::LrWpanMac</b><br>
<ul>
<li><b>IfsEnd</b>: Trace source reporting the end of an Interframe space (IFS)</li>
<li><b>MacIncSuperframeStatus</b>: The period status of the incoming superframe</li>
<li><b>MacIndTxDequeue</b>: Trace source indicating a packet has was dequeued from the indirect transaction queue</li>
<li><b>MacIndTxDrop</b>: Trace source indicating a packet has been dropped from the indirect transaction queue(The pending transaction list)</li>
<li><b>MacIndTxEnqueue</b>: Trace source indicating a packet has been enqueued in the indirect transaction queue</li>
<li><b>MacOutSuperframeStatus</b>: The period status of the outgoing superframe</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,</li>
<li><b>MacRxDrop</b>: Trace source indicating a packet was received, but dropped before being forwarded up the stack</li>
<li><b>MacSentPkt</b>: Trace source reporting some information about the sent packet</li>
<li><b>MacState</b>: The state of LrWpan Mac</li>
<li><b>MacStateValue</b>: The state of LrWpan Mac</li>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device</li>
<li><b>MacTxDequeue</b>: Trace source indicating a packet has was dequeued from the transaction queue</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped during transmission</li>
<li><b>MacTxEnqueue</b>: Trace source indicating a packet has been enqueued in the transaction queue</li>
<li><b>MacTxOk</b>: Trace source indicating a packet has been successfully sent</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device</li>
</ul>
<b>ns3::LrWpanPhy</b><br>
<ul>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel.</li>
<li><b>TrxState</b>: The state of the transceiver</li>
<li><b>TrxStateValue</b>: The state of the transceiver</li>
</ul>
<b>ns3::LteEnbMac</b><br>
<ul>
<li><b>DlScheduling</b>: Information regarding DL scheduling.</li>
<li><b>UlScheduling</b>: Information regarding UL scheduling.</li>
</ul>
<b>ns3::LteEnbPhy</b><br>
<ul>
<li><b>DlPhyTransmission</b>: DL transmission PHY layer statistics.</li>
<li><b>ReportInterference</b>: Report linear interference power per PHY RB</li>
<li><b>ReportUeSinr</b>: Report UEs' averaged linear SINR</li>
</ul>
<b>ns3::LteEnbRrc</b><br>
<ul>
<li><b>ConnectionEstablished</b>: Fired upon successful RRC connection establishment.</li>
<li><b>ConnectionReconfiguration</b>: trace fired upon RRC connection reconfiguration</li>
<li><b>HandoverEndOk</b>: trace fired upon successful termination of a handover procedure</li>
<li><b>HandoverFailureJoining</b>: trace fired upon handover failure due to handover joining timeout at target eNB</li>
<li><b>HandoverFailureLeaving</b>: trace fired upon handover failure due to handover leaving timeout at source eNB</li>
<li><b>HandoverFailureMaxRach</b>: trace fired upon handover failure due to max RACH attempts from UE to target eNB</li>
<li><b>HandoverFailureNoPreamble</b>: trace fired upon handover failure due to non-allocation of non-contention based preamble at eNB for UE to handover due to max count reached</li>
<li><b>HandoverStart</b>: trace fired upon start of a handover procedure</li>
<li><b>NewUeContext</b>: Fired upon creation of a new UE context.</li>
<li><b>NotifyConnectionRelease</b>: trace fired when an UE is released</li>
<li><b>RecvMeasurementReport</b>: trace fired when measurement report is received</li>
<li><b>RrcTimeout</b>: trace fired when a timer expires</li>
</ul>
<b>ns3::LtePdcp</b><br>
<ul>
<li><b>RxPDU</b>: PDU received.</li>
<li><b>TxPDU</b>: PDU transmission notified to the RLC.</li>
</ul>
<b>ns3::LteRlc</b><br>
<ul>
<li><b>RxPDU</b>: PDU received.</li>
<li><b>TxDrop</b>: Trace source indicating a packet has been dropped before transmission</li>
<li><b>TxPDU</b>: PDU transmission notified to the MAC.</li>
</ul>
<b>ns3::LteSpectrumPhy</b><br>
<ul>
<li><b>DlPhyReception</b>: DL reception PHY layer statistics.</li>
<li><b>RxEndError</b>: Trace fired when a previously started RX terminates with an error</li>
<li><b>RxEndOk</b>: Trace fired when a previously started RX terminates successfully</li>
<li><b>RxStart</b>: Trace fired when the start of a signal is detected</li>
<li><b>TxEnd</b>: Trace fired when a previously started transmission is finished</li>
<li><b>TxStart</b>: Trace fired when a new transmission is started</li>
<li><b>UlPhyReception</b>: DL reception PHY layer statistics.</li>
</ul>
<b>ns3::LteUeMac</b><br>
<ul>
<li><b>RaResponseTimeout</b>: trace fired upon RA response timeout</li>
</ul>
<b>ns3::LteUePhy</b><br>
<ul>
<li><b>ReportCurrentCellRsrpSinr</b>: RSRP and SINR statistics.</li>
<li><b>ReportPowerSpectralDensity</b>: Power Spectral Density data.</li>
<li><b>ReportUeMeasurements</b>: Report UE measurements RSRP (dBm) and RSRQ (dB).</li>
<li><b>ReportUlPhyResourceBlocks</b>: UL transmission PHY layer resource blocks.</li>
<li><b>StateTransition</b>: Trace fired upon every UE PHY state transition</li>
<li><b>UlPhyTransmission</b>: DL transmission PHY layer statistics.</li>
</ul>
<b>ns3::LteUePowerControl</b><br>
<ul>
<li><b>ReportPucchTxPower</b>: Report PUCCH TxPower in dBm</li>
<li><b>ReportPuschTxPower</b>: Report PUSCH TxPower in dBm</li>
<li><b>ReportSrsTxPower</b>: Report SRS TxPower in dBm</li>
</ul>
<b>ns3::LteUeRrc</b><br>
<ul>
<li><b>ConnectionEstablished</b>: trace fired upon successful RRC connection establishment</li>
<li><b>ConnectionReconfiguration</b>: trace fired upon RRC connection reconfiguration</li>
<li><b>ConnectionTimeout</b>: trace fired upon timeout RRC connection establishment because of T300</li>
<li><b>DrbCreated</b>: trace fired after DRB is created</li>
<li><b>HandoverEndError</b>: trace fired upon failure of a handover procedure</li>
<li><b>HandoverEndOk</b>: trace fired upon successful termination of a handover procedure</li>
<li><b>HandoverStart</b>: trace fired upon start of a handover procedure</li>
<li><b>InitialCellSelectionEndError</b>: trace fired upon failed initial cell selection procedure</li>
<li><b>InitialCellSelectionEndOk</b>: trace fired upon successful initial cell selection procedure</li>
<li><b>MibReceived</b>: trace fired upon reception of Master Information Block</li>
<li><b>PhySyncDetection</b>: trace fired upon receiving in Sync or out of Sync indications from UE PHY</li>
<li><b>RadioLinkFailure</b>: trace fired upon failure of radio link</li>
<li><b>RandomAccessError</b>: trace fired upon failure of the random access procedure</li>
<li><b>RandomAccessSuccessful</b>: trace fired upon successful completion of the random access procedure</li>
<li><b>SCarrierConfigured</b>: trace fired after configuring secondary carriers</li>
<li><b>Sib1Received</b>: trace fired upon reception of System Information Block Type 1</li>
<li><b>Sib2Received</b>: trace fired upon reception of System Information Block Type 2</li>
<li><b>Srb1Created</b>: trace fired after SRB1 is created</li>
<li><b>StateTransition</b>: trace fired upon every UE RRC state transition</li>
</ul>
<b>ns3::MinstrelHtWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::MinstrelWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::MobilityModel</b><br>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed</li>
</ul>
<b>ns3::NrGnbMac</b><br>
<ul>
<li><b>DlHarqFeedback</b>: Harq feedback.</li>
<li><b>DlScheduling</b>: Information regarding DL scheduling.</li>
<li><b>GnbMacRxedCtrlMsgsTrace</b>: Enb MAC Rxed Control Messages Traces.</li>
<li><b>GnbMacTxedCtrlMsgsTrace</b>: Enb MAC Txed Control Messages Traces.</li>
<li><b>SrReq</b>: Information regarding received scheduling request.</li>
<li><b>UlScheduling</b>: Information regarding UL scheduling.</li>
</ul>
<b>ns3::NrGnbPhy</b><br>
<ul>
<li><b>GnbPhyRxedCtrlMsgsTrace</b>: Enb PHY Rxed Control Messages Traces.</li>
<li><b>GnbPhyTxedCtrlMsgsTrace</b>: Enb PHY Txed Control Messages Traces.</li>
<li><b>RBDataStats</b>: Resource Block used for data: SfnSf, symbol, RB PHY map, bwp ID, cell ID</li>
<li><b>SlotCtrlStats</b>: Ctrl statistics for the current slot: SfnSf, active UE, used RE, used symbols, available RBs, available symbols, bwp ID, cell ID</li>
<li><b>SlotDataStats</b>: Data statistics for the current slot: SfnSf, active UE, used RE, used symbols, available RBs, available symbols, bwp ID, cell ID</li>
<li><b>UlSinrTrace</b>: UL SINR statistics.</li>
</ul>
<b>ns3::NrMacSchedulerOfdma</b><br>
<ul>
<li><b>SymPerBeam</b>: Number of assigned symbol per beam. Gets called every time an assignment is made</li>
</ul>
<b>ns3::NrNetDevice</b><br>
<ul>
<li><b>Rx</b>: A packet has been received</li>
<li><b>Tx</b>: A packet has been transmitted with the Address as the recipient</li>
</ul>
<b>ns3::NrSpectrumPhy</b><br>
<ul>
<li><b>ChannelOccupied</b>: This traced callback is triggered every time that the channel is occupied</li>
<li><b>DlCtrlPathloss</b>: Pathloss calculated for CTRL</li>
<li><b>DlDataPathloss</b>: Pathloss calculated for CTRL</li>
<li><b>DlDataSnrTrace</b>: Report the SNR computed for each TB in DL</li>
<li><b>RxDataTrace</b>: Indicates the reception of data from this cell (reporting the rxPsd without interferences)</li>
<li><b>RxPacketTraceEnb</b>: The no. of packets received and transmitted by the Base Station</li>
<li><b>RxPacketTraceUe</b>: The no. of packets received and transmitted by the User Device</li>
<li><b>TxCtrlTrace</b>: Indicates when the channel is being occupied by a ctrl transmission</li>
<li><b>TxDataTrace</b>: Indicates when the channel is being occupied by a data transmission</li>
<li><b>TxPacketTraceEnb</b>: Traces when the packet is being transmitted by the Base Station</li>
</ul>
<b>ns3::NrUeMac</b><br>
<ul>
<li><b>UeMacRxedCtrlMsgsTrace</b>: Ue MAC Control Messages Traces.</li>
<li><b>UeMacTxedCtrlMsgsTrace</b>: Ue MAC Control Messages Traces.</li>
</ul>
<b>ns3::NrUePhy</b><br>
<ul>
<li><b>DlCtrlSinr</b>: Report the SINR computed for DL CTRL</li>
<li><b>DlDataSinr</b>: DL DATA SINR statistics.</li>
<li><b>ReportDownlinkTbSize</b>: Report allocated downlink TB size for trace.</li>
<li><b>ReportPowerSpectralDensity</b>: Power Spectral Density data.</li>
<li><b>ReportRsrp</b>: RSRP statistics.</li>
<li><b>ReportUplinkTbSize</b>: Report allocated uplink TB size for trace.</li>
<li><b>UePhyRxedCtrlMsgsTrace</b>: Ue PHY Control Messages Traces.</li>
<li><b>UePhyRxedDlDciTrace</b>: Ue PHY DL DCI Traces.</li>
<li><b>UePhyTxedCtrlMsgsTrace</b>: Ue PHY Control Messages Traces.</li>
<li><b>UePhyTxedHarqFeedbackTrace</b>: Ue PHY DL HARQ Feedback Traces.</li>
</ul>
<b>ns3::NrUePowerControl</b><br>
<ul>
<li><b>ReportPucchTxPower</b>: Report PUCCH TxPower in dBm</li>
<li><b>ReportPuschTxPower</b>: Report PUSCH TxPower in dBm</li>
<li><b>ReportSrsTxPower</b>: Report SRS TxPower in dBm</li>
</ul>
<b>ns3::ObssPdAlgorithm</b><br>
<ul>
<li><b>Reset</b>: Trace CCA Reset event</li>
</ul>
<b>ns3::olsr::RoutingProtocol</b><br>
<ul>
<li><b>RoutingTableChanged</b>: The OLSR routing table has changed.</li>
<li><b>Rx</b>: Receive OLSR packet.</li>
<li><b>Tx</b>: Send OLSR packet.</li>
</ul>
<b>ns3::OnoeWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::OnOffApplication</b><br>
<ul>
<li><b>Tx</b>: A new packet is created and is sent</li>
<li><b>TxWithAddresses</b>: A new packet is created and is sent</li>
<li><b>TxWithSeqTsSize</b>: A new packet is created with SeqTsSizeHeader</li>
</ul>
<b>ns3::PacketProbe</b><br>
<ul>
<li><b>Output</b>: The packet that serve as the output for this probe</li>
<li><b>OutputBytes</b>: The number of bytes in the packet</li>
</ul>
<b>ns3::PacketSink</b><br>
<ul>
<li><b>Rx</b>: A packet has been received</li>
<li><b>RxWithAddresses</b>: A packet has been received</li>
<li><b>RxWithSeqTsSize</b>: A packet with SeqTsSize header has been received</li>
</ul>
<b>ns3::PacketSocket</b><br>
<ul>
<li><b>Drop</b>: Drop packet due to receive buffer overflow</li>
</ul>
<b>ns3::PacketSocketClient</b><br>
<ul>
<li><b>Tx</b>: A packet has been sent</li>
</ul>
<b>ns3::PacketSocketServer</b><br>
<ul>
<li><b>Rx</b>: A packet has been received</li>
</ul>
<b>ns3::ParfWifiManager</b><br>
<ul>
<li><b>PowerChange</b>: The transmission power has change</li>
<li><b>RateChange</b>: The transmission rate has change</li>
</ul>
<b>ns3::Ping</b><br>
<ul>
<li><b>Drop</b>: Drop events due to destination unreachable or other errors.</li>
<li><b>Report</b>: Summary report at close of application.</li>
<li><b>Rtt</b>: The sequence number and RTT sample.</li>
<li><b>Tx</b>: The sequence number and ICMP echo response packet.</li>
</ul>
<b>ns3::PointToPointChannel</b><br>
<ul>
<li><b>TxRxPointToPoint</b>: Trace source indicating transmission of packet from the PointToPointChannel, used by the Animation interface.</li>
</ul>
<b>ns3::PointToPointNetDevice</b><br>
<ul>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,</li>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received by the device</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device</li>
</ul>
<b>ns3::QosTxop</b><br>
<ul>
<li><b>TxopTrace</b>: Trace source for TXOP start and duration times</li>
</ul>
<b>ns3::Queue<Packet></b><br>
<ul>
<li><b>Dequeue</b>: Dequeue a packet from the queue.</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue.</li>
</ul>
<b>ns3::Queue<QueueDiscItem></b><br>
<ul>
<li><b>Dequeue</b>: Dequeue a packet from the queue.</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue.</li>
</ul>
<b>ns3::Queue<WifiMpdu,WifiMacQueueContainer></b><br>
<ul>
<li><b>Dequeue</b>: Dequeue a packet from the queue.</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue.</li>
</ul>
<b>ns3::QueueBase</b><br>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue</li>
</ul>
<b>ns3::QueueDisc</b><br>
<ul>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue</li>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc</li>
</ul>
<b>ns3::RraaWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::RrpaaWifiManager</b><br>
<ul>
<li><b>PowerChange</b>: The transmission power has change.</li>
<li><b>RateChange</b>: The transmission rate has change.</li>
</ul>
<b>ns3::RvBatteryModel</b><br>
<ul>
<li><b>RvBatteryModelBatteryLevel</b>: RV battery model battery level.</li>
<li><b>RvBatteryModelBatteryLifetime</b>: RV battery model battery lifetime.</li>
</ul>
<b>ns3::SimpleDeviceEnergyModel</b><br>
<ul>
<li><b>TotalEnergyConsumption</b>: Total energy consumption of the radio device.</li>
</ul>
<b>ns3::SimpleNetDevice</b><br>
<ul>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception</li>
</ul>
<b>ns3::SimpleOfdmWimaxPhy</b><br>
<ul>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel</li>
<li><b>Rx</b>: Receive trace</li>
<li><b>Tx</b>: Transmit trace</li>
</ul>
<b>ns3::SixLowPanNetDevice</b><br>
<ul>
<li><b>Drop</b>: Drop - DropReason, packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.</li>
<li><b>Rx</b>: Receive - packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.</li>
<li><b>Tx</b>: Send - packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.</li>
</ul>
<b>ns3::SpectrumAnalyzer</b><br>
<ul>
<li><b>AveragePowerSpectralDensityReport</b>: Trace fired whenever a new value for the average Power Spectral Density is calculated</li>
</ul>
<b>ns3::SpectrumChannel</b><br>
<ul>
<li><b>Gain</b>: This trace is fired whenever a new path loss value is calculated. The parameters to this trace are : Pointer to the mobility model of the transmitter, Pointer to the mobility model of the receiver, Tx antenna gain, Rx antenna gain, Propagation gain, Pathloss</li>
<li><b>PathLoss</b>: This trace is fired whenever a new path loss value is calculated. The first and second parameters to the trace are pointers respectively to the TX and RX SpectrumPhy instances, whereas the third parameters is the loss value in dB. Note that the loss value reported by this trace is the single-frequency loss value obtained by evaluating only the TX and RX AntennaModels and the PropagationLossModel. In particular, note that SpectrumPropagationLossModel (even if present) is never used to evaluate the loss value reported in this trace.</li>
<li><b>TxSigParams</b>: This trace is fired whenever a signal is transmitted. The sole parameter is a pointer to a copy of the SpectrumSignalParameters provided by the transmitter.</li>
</ul>
<b>ns3::SpectrumWifiPhy</b><br>
<ul>
<li><b>SignalArrival</b>: Signal arrival</li>
</ul>
<b>ns3::StaWifiMac</b><br>
<ul>
<li><b>Assoc</b>: Associated with an access point. If this is an MLD that associated with an AP MLD, the AP MLD address is provided.</li>
<li><b>BeaconArrival</b>: Time of beacons arrival from associated AP</li>
<li><b>DeAssoc</b>: Association with an access point lost. If this is an MLD that disassociated with an AP MLD, the AP MLD address is provided.</li>
<li><b>LinkSetupCanceled</b>: A link setup in the context of ML setup with an AP MLD was torn down. Provides ID of the setup link and AP MAC address</li>
<li><b>LinkSetupCompleted</b>: A link was setup in the context of ML setup with an AP MLD. Provides ID of the setup link and AP MAC address</li>
<li><b>ReceivedBeaconInfo</b>: Information about every received Beacon frame</li>
</ul>
<b>ns3::SubscriberStationNetDevice</b><br>
<ul>
<li><b>SSPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,</li>
<li><b>SSRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,</li>
<li><b>SSRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.</li>
<li><b>SSTxDrop</b>: A packet has been dropped in the MAC layer before being queued for transmission.</li>
</ul>
<b>ns3::TbfQueueDisc</b><br>
<ul>
<li><b>TokensInFirstBucket</b>: Number of First Bucket Tokens in bytes</li>
<li><b>TokensInSecondBucket</b>: Number of Second Bucket Tokens in bytes</li>
</ul>
<b>ns3::TcpDctcp</b><br>
<ul>
<li><b>CongestionEstimate</b>: Update sender-side congestion estimate state</li>
</ul>
<b>ns3::TcpHybla</b><br>
<ul>
<li><b>Rho</b>: Rho parameter of Hybla</li>
</ul>
<b>ns3::TcpRateLinux</b><br>
<ul>
<li><b>TcpRateSampleUpdated</b>: Tcp rate sample has been updated</li>
<li><b>TcpRateUpdated</b>: Tcp rate information has been updated</li>
</ul>
<b>ns3::TcpRxBuffer</b><br>
<ul>
<li><b>NextRxSequence</b>: Next sequence number expected (RCV.NXT)</li>
</ul>
<b>ns3::TcpSocketBase</b><br>
<ul>
<li><b>AdvWND</b>: Advertised Window Size</li>
<li><b>BytesInFlight</b>: Socket estimation of bytes in flight</li>
<li><b>CongState</b>: TCP Congestion machine state</li>
<li><b>CongestionWindow</b>: The TCP connection's congestion window</li>
<li><b>CongestionWindowInflated</b>: The TCP connection's congestion window inflates as in older RFC</li>
<li><b>EcnCeSeq</b>: Sequence of last received CE</li>
<li><b>EcnCwrSeq</b>: Sequence of last received CWR</li>
<li><b>EcnEchoSeq</b>: Sequence of last received ECN Echo</li>
<li><b>EcnState</b>: Trace ECN state change of socket</li>
<li><b>HighestRxAck</b>: Highest ack received from peer</li>
<li><b>HighestRxSequence</b>: Highest sequence number received from peer</li>
<li><b>HighestSequence</b>: Highest sequence number ever sent in socket's life time</li>
<li><b>NextTxSequence</b>: Next sequence number to send (SND.NXT)</li>
<li><b>PacingRate</b>: The current TCP pacing rate</li>
<li><b>RTO</b>: Retransmission timeout</li>
<li><b>RTT</b>: Last RTT sample</li>
<li><b>RWND</b>: Remote side's flow control window</li>
<li><b>Rx</b>: Receive tcp packet from IP protocol</li>
<li><b>SlowStartThreshold</b>: TCP slow start threshold (bytes)</li>
<li><b>State</b>: TCP state</li>
<li><b>Tx</b>: Send tcp packet to IP protocol</li>
</ul>
<b>ns3::TcpSocketState</b><br>
<ul>
<li><b>BytesInFlight</b>: The TCP connection's congestion window</li>
<li><b>CongState</b>: TCP Congestion machine state</li>
<li><b>CongestionWindow</b>: The TCP connection's congestion window</li>
<li><b>CongestionWindowInflated</b>: The TCP connection's inflated congestion window</li>
<li><b>EcnState</b>: Trace ECN state change of socket</li>
<li><b>HighestSequence</b>: Highest sequence number received from peer</li>
<li><b>NextTxSequence</b>: Next sequence number to send (SND.NXT)</li>
<li><b>PacingRate</b>: The current TCP pacing rate</li>
<li><b>RTT</b>: Last RTT sample</li>
<li><b>SlowStartThreshold</b>: TCP slow start threshold (bytes)</li>
</ul>
<b>ns3::TcpTxBuffer</b><br>
<ul>
<li><b>UnackSequence</b>: First unacknowledged sequence number (SND.UNA)</li>
</ul>
<b>ns3::TcpWestwoodPlus</b><br>
<ul>
<li><b>EstimatedBW</b>: The estimated bandwidth</li>
</ul>
<b>ns3::ThompsonSamplingWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::ThreeGppHttpClient</b><br>
<ul>
<li><b>ConnectionClosed</b>: Connection to the destination web server is closed.</li>
<li><b>ConnectionEstablished</b>: Connection to the destination web server has been established.</li>
<li><b>Rx</b>: General trace for receiving a packet of any kind.</li>
<li><b>RxDelay</b>: General trace of delay for receiving a complete object.</li>
<li><b>RxEmbeddedObject</b>: Received a whole embedded object. Header is included.</li>
<li><b>RxEmbeddedObjectPacket</b>: A packet of embedded object has been received.</li>
<li><b>RxMainObject</b>: Received a whole main object. Header is included.</li>
<li><b>RxMainObjectPacket</b>: A packet of main object has been received.</li>
<li><b>RxPage</b>: A page has been received.</li>
<li><b>RxRtt</b>: General trace of round trip delay time for receiving a complete object.</li>
<li><b>StateTransition</b>: Trace fired upon every HTTP client state transition.</li>
<li><b>Tx</b>: General trace for sending a packet of any kind.</li>
<li><b>TxEmbeddedObjectRequest</b>: Sent a request for an embedded object.</li>
<li><b>TxMainObjectRequest</b>: Sent a request for a main object.</li>
</ul>
<b>ns3::ThreeGppHttpServer</b><br>
<ul>
<li><b>ConnectionEstablished</b>: Connection to a remote web client has been established.</li>
<li><b>EmbeddedObject</b>: An embedded object has been generated.</li>
<li><b>MainObject</b>: A main object has been generated.</li>
<li><b>Rx</b>: A packet has been received.</li>
<li><b>RxDelay</b>: A packet has been received with delay information.</li>
<li><b>StateTransition</b>: Trace fired upon every HTTP client state transition.</li>
<li><b>Tx</b>: A packet has been sent.</li>
</ul>
<b>ns3::TimeProbe</b><br>
<ul>
<li><b>Output</b>: The double valued (units of seconds) probe output</li>
</ul>
<b>ns3::TimeSeriesAdaptor</b><br>
<ul>
<li><b>Output</b>: The current simulation time versus the current value converted to a double</li>
</ul>
<b>ns3::TrafficControlLayer</b><br>
<ul>
<li><b>TcDrop</b>: Trace source indicating a packet has been dropped by the Traffic Control layer because no queue disc is installed on the device, the device supports flow control and the device queue is stopped</li>
</ul>
<b>ns3::TrafficGenerator3gppAudioData</b><br>
<ul>
<li><b>Tx</b>: A new packet is created and is sent</li>
</ul>
<b>ns3::TrafficGenerator3gppGenericVideo</b><br>
<ul>
<li><b>Params</b>: Traffic parameters have been updated accordingly the loopback algorithm, and notified through this trace.</li>
<li><b>Tx</b>: A new packet is created and is sent</li>
</ul>
<b>ns3::TrafficGenerator3gppPoseControl</b><br>
<ul>
<li><b>Tx</b>: A new packet is created and is sent</li>
</ul>
<b>ns3::TrafficGeneratorFtpSingle</b><br>
<ul>
<li><b>Tx</b>: A new packet is created and is sent</li>
</ul>
<b>ns3::TrafficGeneratorNgmnFtpMulti</b><br>
<ul>
<li><b>Tx</b>: A new packet is created and is sent</li>
</ul>
<b>ns3::TrafficGeneratorNgmnGaming</b><br>
<ul>
<li><b>Tx</b>: A new packet is created and is sent</li>
</ul>
<b>ns3::TrafficGeneratorNgmnVideo</b><br>
<ul>
<li><b>Tx</b>: A new packet is created and is sent</li>
</ul>
<b>ns3::TrafficGeneratorNgmnVoip</b><br>
<ul>
<li><b>Tx</b>: A new packet is created and is sent</li>
</ul>
<b>ns3::Txop</b><br>
<ul>
<li><b>BackoffTrace</b>: Trace source for backoff values</li>
<li><b>CwTrace</b>: Trace source for contention window values</li>
</ul>
<b>ns3::UanMacCw</b><br>
<ul>
<li><b>Dequeue</b>: A was passed down to the PHY from the MAC.</li>
<li><b>Enqueue</b>: A packet arrived at the MAC for transmission.</li>
<li><b>RX</b>: A packet was destined for this MAC and was received.</li>
</ul>
<b>ns3::UanMacRc</b><br>
<ul>
<li><b>Dequeue</b>: A  (data) packet was passed down to PHY from MAC.</li>
<li><b>Enqueue</b>: A  (data) packet arrived at MAC for transmission.</li>
<li><b>RX</b>: A packet was destined for and received at this MAC layer.</li>
</ul>
<b>ns3::UanMacRcGw</b><br>
<ul>
<li><b>Cycle</b>: Trace cycle statistics.</li>
<li><b>RX</b>: A packet was destined for and received at this MAC layer.</li>
</ul>
<b>ns3::UanNetDevice</b><br>
<ul>
<li><b>Rx</b>: Received payload from the MAC layer.</li>
<li><b>Tx</b>: Send payload to the MAC layer.</li>
</ul>
<b>ns3::UanPhy</b><br>
<ul>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device.</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception.</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device.</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium.</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission.</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel.</li>
</ul>
<b>ns3::UanPhyDual</b><br>
<ul>
<li><b>RxError</b>: A packet was received unsuccessfuly.</li>
<li><b>RxOk</b>: A packet was received successfully.</li>
<li><b>Tx</b>: Packet transmission beginning.</li>
</ul>
<b>ns3::UanPhyGen</b><br>
<ul>
<li><b>RxError</b>: A packet was received unsuccessfuly.</li>
<li><b>RxOk</b>: A packet was received successfully.</li>
<li><b>Tx</b>: Packet transmission beginning.</li>
</ul>
<b>ns3::UdpClient</b><br>
<ul>
<li><b>Tx</b>: A new packet is created and sent</li>
<li><b>TxWithAddresses</b>: A new packet is created and sent</li>
</ul>
<b>ns3::UdpEchoClient</b><br>
<ul>
<li><b>Rx</b>: A packet has been received</li>
<li><b>RxWithAddresses</b>: A packet has been received</li>
<li><b>Tx</b>: A new packet is created and is sent</li>
<li><b>TxWithAddresses</b>: A new packet is created and is sent</li>
</ul>
<b>ns3::UdpEchoServer</b><br>
<ul>
<li><b>Rx</b>: A packet has been received</li>
<li><b>RxWithAddresses</b>: A packet has been received</li>
</ul>
<b>ns3::UdpServer</b><br>
<ul>
<li><b>Rx</b>: A packet has been received</li>
<li><b>RxWithAddresses</b>: A packet has been received</li>
</ul>
<b>ns3::UdpSocketImpl</b><br>
<ul>
<li><b>Drop</b>: Drop UDP packet due to receive buffer overflow</li>
</ul>
<b>ns3::UeManager</b><br>
<ul>
<li><b>DrbCreated</b>: trace fired after DRB is created</li>
<li><b>StateTransition</b>: fired upon every UE state transition seen by the UeManager at the eNB RRC</li>
</ul>
<b>ns3::Uinteger16Probe</b><br>
<ul>
<li><b>Output</b>: The uint16_t that serves as output for this probe</li>
</ul>
<b>ns3::Uinteger32Probe</b><br>
<ul>
<li><b>Output</b>: The uint32_t that serves as output for this probe</li>
</ul>
<b>ns3::Uinteger8Probe</b><br>
<ul>
<li><b>Output</b>: The uint8_t that serves as output for this probe</li>
</ul>
<b>ns3::V4Ping</b><br>
<ul>
<li><b>Rtt</b>: The rtt calculated by the ping.</li>
</ul>
<b>ns3::VirtualNetDevice</b><br>
<ul>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,</li>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device</li>
</ul>
<b>ns3::WaveformGenerator</b><br>
<ul>
<li><b>TxEnd</b>: Trace fired when a previously started transmission is finished</li>
<li><b>TxStart</b>: Trace fired when a new transmission is started</li>
</ul>
<b>ns3::WifiMac</b><br>
<ul>
<li><b>AckedMpdu</b>: An MPDU that was successfully acknowledged, via either a Normal Ack or a Block Ack.</li>
<li><b>DroppedMpdu</b>: An MPDU that was dropped for the given reason (see WifiMacDropReason).</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.</li>
<li><b>MacRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.</li>
<li><b>MacTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.</li>
<li><b>MacTxDrop</b>: A packet has been dropped in the MAC layer before being queued for transmission. This trace source is fired, e.g., when an AP's MAC receives from the upper layer a packet destined to a station that is not associated with the AP or a STA's MAC receives a packet from the upper layer while it is not associated with any AP.</li>
<li><b>MpduResponseTimeout</b>: An MPDU whose response was not received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason) and the TXVECTOR used to transmit the MPDU. This trace source is fired when a CTS is missing after an RTS, when all CTS frames are missing after an MU-RTS, or when a Normal Ack is missing after an MPDU or after a DL MU PPDU acknowledged in SU format.</li>
<li><b>NAckedMpdu</b>: An MPDU that was negatively acknowledged via a Block Ack.</li>
<li><b>PsduMapResponseTimeout</b>: A PSDU map for which not all the responses were received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason), the set of MAC addresses of the stations that did not respond and the total number of stations that had to respond. This trace source is fired when not all the addressed stations responded to an MU-BAR Trigger frame (either sent as a SU frame or aggregated to PSDUs in the DL MU PPDU), a Basic Trigger Frame or a BSRP Trigger Frame.</li>
<li><b>PsduResponseTimeout</b>: A PSDU whose response was not received before the timeout, along with an identifier of the type of timeout (see WifiTxTimer::Reason) and the TXVECTOR used to transmit the PSDU. This trace source is fired when a BlockAck is missing after an A-MPDU, a BlockAckReq (possibly in the context of the acknowledgment of a DL MU PPDU in SU format) or a TB PPDU (in the latter case the missing BlockAck is a Multi-STA BlockAck).</li>
<li><b>TxErrHeader</b>: The header of unsuccessfuly transmitted packet.</li>
<li><b>TxOkHeader</b>: The header of successfully transmitted packet.</li>
</ul>
<b>ns3::WifiMacQueue</b><br>
<ul>
<li><b>Expired</b>: MPDU dropped because its lifetime expired.</li>
</ul>
<b>ns3::WifiPhy</b><br>
<ul>
<li><b>MonitorSnifferRx</b>: Trace source simulating a wifi device in monitor mode sniffing all received frames</li>
<li><b>MonitorSnifferTx</b>: Trace source simulating the capability of a wifi device in monitor mode to sniff all frames being transmitted</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device</li>
<li><b>PhyRxPayloadBegin</b>: Trace source indicating the reception of the payload of a PPDU has begun</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel.</li>
<li><b>PhyTxPsduBegin</b>: Trace source indicating a PSDU has begun transmitting over the channel medium</li>
</ul>
<b>ns3::WifiPhyStateHelper</b><br>
<ul>
<li><b>RxError</b>: A packet has been received unsuccessfuly.</li>
<li><b>RxOk</b>: A packet has been received successfully.</li>
<li><b>State</b>: The state of the PHY layer</li>
<li><b>Tx</b>: Packet transmission is starting.</li>
</ul>
<b>ns3::WifiRadioEnergyModel</b><br>
<ul>
<li><b>TotalEnergyConsumption</b>: Total energy consumption of the radio device.</li>
</ul>
<b>ns3::WifiRemoteStationManager</b><br>
<ul>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts</li>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed</li>
</ul>
<b>ns3::WimaxMacQueue</b><br>
<ul>
<li><b>Dequeue</b>: Dequeue trace</li>
<li><b>Drop</b>: Drop trace</li>
<li><b>Enqueue</b>: Enqueue trace</li>
</ul>
<b>ns3::WimaxNetDevice</b><br>
<ul>
<li><b>Rx</b>: Receive trace</li>
<li><b>Tx</b>: Transmit trace</li>
</ul>
*/

/*!
\ingroup attributes
\addtogroup attribute_Address Address Attribute
AttributeValue implementation for Address
\see ns3::Address
*/
/*!
\ingroup attribute_Address
\class  ns3::AddressValue "address.h"
AttributeValue implementation for Address.
\see AttributeValue
*/
/*!
\fn Address ns3::AddressValue::AddressValue(const Address & value)
Copy constructor.
\param [in] value The Address value to copy.
*/
/*!
\fn Address ns3::AddressValue::Get () const
\returns The Address value.
*/
/*!
\fn bool ns3::AddressValue::GetAccessor (T & value) const
Access the Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::AddressValue::Set (const Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Address ns3::AddressValue::m_value
The stored Address instance.
*/

/*!
\ingroup attribute_Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeAddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeAddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Address

\class  ns3::AddressChecker "address.h"
AttributeChecker implementation for AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeAddressChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Box Box Attribute
AttributeValue implementation for Box
\see ns3::Box
*/
/*!
\ingroup attribute_Box
\class  ns3::BoxValue "box.h"
AttributeValue implementation for Box.
\see AttributeValue
*/
/*!
\fn Box ns3::BoxValue::BoxValue(const Box & value)
Copy constructor.
\param [in] value The Box value to copy.
*/
/*!
\fn Box ns3::BoxValue::Get () const
\returns The Box value.
*/
/*!
\fn bool ns3::BoxValue::GetAccessor (T & value) const
Access the Box value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Box value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::BoxValue::Set (const Box & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Box ns3::BoxValue::m_value
The stored Box instance.
*/

/*!
\ingroup attribute_Box
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeBoxAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Box
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeBoxAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Box

\class  ns3::BoxChecker "box.h"
AttributeChecker implementation for BoxValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Box
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeBoxChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_DataRate DataRate Attribute
AttributeValue implementation for DataRate
\see ns3::DataRate
*/
/*!
\ingroup attribute_DataRate
\class  ns3::DataRateValue "data-rate.h"
AttributeValue implementation for DataRate.
\see AttributeValue
*/
/*!
\fn DataRate ns3::DataRateValue::DataRateValue(const DataRate & value)
Copy constructor.
\param [in] value The DataRate value to copy.
*/
/*!
\fn DataRate ns3::DataRateValue::Get () const
\returns The DataRate value.
*/
/*!
\fn bool ns3::DataRateValue::GetAccessor (T & value) const
Access the DataRate value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The DataRate value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::DataRateValue::Set (const DataRate & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var DataRate ns3::DataRateValue::m_value
The stored DataRate instance.
*/

/*!
\ingroup attribute_DataRate
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDataRateAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_DataRate
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDataRateAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_DataRate

\class  ns3::DataRateChecker "data-rate.h"
AttributeChecker implementation for DataRateValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_DataRate
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeDataRateChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Length Length Attribute
AttributeValue implementation for Length
\see ns3::Length
*/
/*!
\ingroup attribute_Length
\class  ns3::LengthValue "length.h"
AttributeValue implementation for Length.
\see AttributeValue
*/
/*!
\fn Length ns3::LengthValue::LengthValue(const Length & value)
Copy constructor.
\param [in] value The Length value to copy.
*/
/*!
\fn Length ns3::LengthValue::Get () const
\returns The Length value.
*/
/*!
\fn bool ns3::LengthValue::GetAccessor (T & value) const
Access the Length value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Length value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::LengthValue::Set (const Length & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Length ns3::LengthValue::m_value
The stored Length instance.
*/

/*!
\ingroup attribute_Length
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeLengthAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Length
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeLengthAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Length

\class  ns3::LengthChecker "length.h"
AttributeChecker implementation for LengthValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Length
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeLengthChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_IeMeshId IeMeshId Attribute
AttributeValue implementation for IeMeshId
\see ns3::dot11s::IeMeshId
*/
/*!
\ingroup attribute_IeMeshId
\class  ns3::IeMeshIdValue "ie-dot11s-id.h"
AttributeValue implementation for IeMeshId.
\see AttributeValue
*/
/*!
\fn IeMeshId ns3::IeMeshIdValue::IeMeshIdValue(const IeMeshId & value)
Copy constructor.
\param [in] value The IeMeshId value to copy.
*/
/*!
\fn IeMeshId ns3::IeMeshIdValue::Get () const
\returns The IeMeshId value.
*/
/*!
\fn bool ns3::IeMeshIdValue::GetAccessor (T & value) const
Access the IeMeshId value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The IeMeshId value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::IeMeshIdValue::Set (const IeMeshId & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var IeMeshId ns3::IeMeshIdValue::m_value
The stored IeMeshId instance.
*/

/*!
\ingroup attribute_IeMeshId
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIeMeshIdAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_IeMeshId
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIeMeshIdAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_IeMeshId

\class  ns3::IeMeshIdChecker "ie-dot11s-id.h"
AttributeChecker implementation for IeMeshIdValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_IeMeshId
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIeMeshIdChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Ipv4Address Ipv4Address Attribute
AttributeValue implementation for Ipv4Address
\see ns3::Ipv4Address
*/
/*!
\ingroup attribute_Ipv4Address
\class  ns3::Ipv4AddressValue "ipv4-address.h"
AttributeValue implementation for Ipv4Address.
\see AttributeValue
*/
/*!
\fn Ipv4Address ns3::Ipv4AddressValue::Ipv4AddressValue(const Ipv4Address & value)
Copy constructor.
\param [in] value The Ipv4Address value to copy.
*/
/*!
\fn Ipv4Address ns3::Ipv4AddressValue::Get () const
\returns The Ipv4Address value.
*/
/*!
\fn bool ns3::Ipv4AddressValue::GetAccessor (T & value) const
Access the Ipv4Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Ipv4Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Ipv4AddressValue::Set (const Ipv4Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Ipv4Address ns3::Ipv4AddressValue::m_value
The stored Ipv4Address instance.
*/

/*!
\ingroup attribute_Ipv4Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv4AddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv4Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv4AddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv4Address

\class  ns3::Ipv4AddressChecker "ipv4-address.h"
AttributeChecker implementation for Ipv4AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Ipv4Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIpv4AddressChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Ipv4Mask Ipv4Mask Attribute
AttributeValue implementation for Ipv4Mask
\see ns3::Ipv4Mask
*/
/*!
\ingroup attribute_Ipv4Mask
\class  ns3::Ipv4MaskValue "ipv4-address.h"
AttributeValue implementation for Ipv4Mask.
\see AttributeValue
*/
/*!
\fn Ipv4Mask ns3::Ipv4MaskValue::Ipv4MaskValue(const Ipv4Mask & value)
Copy constructor.
\param [in] value The Ipv4Mask value to copy.
*/
/*!
\fn Ipv4Mask ns3::Ipv4MaskValue::Get () const
\returns The Ipv4Mask value.
*/
/*!
\fn bool ns3::Ipv4MaskValue::GetAccessor (T & value) const
Access the Ipv4Mask value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Ipv4Mask value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Ipv4MaskValue::Set (const Ipv4Mask & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Ipv4Mask ns3::Ipv4MaskValue::m_value
The stored Ipv4Mask instance.
*/

/*!
\ingroup attribute_Ipv4Mask
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv4MaskAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv4Mask
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv4MaskAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv4Mask

\class  ns3::Ipv4MaskChecker "ipv4-address.h"
AttributeChecker implementation for Ipv4MaskValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Ipv4Mask
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIpv4MaskChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Ipv6Address Ipv6Address Attribute
AttributeValue implementation for Ipv6Address
\see ns3::Ipv6Address
*/
/*!
\ingroup attribute_Ipv6Address
\class  ns3::Ipv6AddressValue "ipv6-address.h"
AttributeValue implementation for Ipv6Address.
\see AttributeValue
*/
/*!
\fn Ipv6Address ns3::Ipv6AddressValue::Ipv6AddressValue(const Ipv6Address & value)
Copy constructor.
\param [in] value The Ipv6Address value to copy.
*/
/*!
\fn Ipv6Address ns3::Ipv6AddressValue::Get () const
\returns The Ipv6Address value.
*/
/*!
\fn bool ns3::Ipv6AddressValue::GetAccessor (T & value) const
Access the Ipv6Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Ipv6Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Ipv6AddressValue::Set (const Ipv6Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Ipv6Address ns3::Ipv6AddressValue::m_value
The stored Ipv6Address instance.
*/

/*!
\ingroup attribute_Ipv6Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv6AddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv6Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv6AddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv6Address

\class  ns3::Ipv6AddressChecker "ipv6-address.h"
AttributeChecker implementation for Ipv6AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Ipv6Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIpv6AddressChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Ipv6Prefix Ipv6Prefix Attribute
AttributeValue implementation for Ipv6Prefix
\see ns3::Ipv6Prefix
*/
/*!
\ingroup attribute_Ipv6Prefix
\class  ns3::Ipv6PrefixValue "ipv6-address.h"
AttributeValue implementation for Ipv6Prefix.
\see AttributeValue
*/
/*!
\fn Ipv6Prefix ns3::Ipv6PrefixValue::Ipv6PrefixValue(const Ipv6Prefix & value)
Copy constructor.
\param [in] value The Ipv6Prefix value to copy.
*/
/*!
\fn Ipv6Prefix ns3::Ipv6PrefixValue::Get () const
\returns The Ipv6Prefix value.
*/
/*!
\fn bool ns3::Ipv6PrefixValue::GetAccessor (T & value) const
Access the Ipv6Prefix value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Ipv6Prefix value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Ipv6PrefixValue::Set (const Ipv6Prefix & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Ipv6Prefix ns3::Ipv6PrefixValue::m_value
The stored Ipv6Prefix instance.
*/

/*!
\ingroup attribute_Ipv6Prefix
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv6PrefixAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv6Prefix
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv6PrefixAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv6Prefix

\class  ns3::Ipv6PrefixChecker "ipv6-address.h"
AttributeChecker implementation for Ipv6PrefixValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Ipv6Prefix
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIpv6PrefixChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Mac16Address Mac16Address Attribute
AttributeValue implementation for Mac16Address
\see ns3::Mac16Address
*/
/*!
\ingroup attribute_Mac16Address
\class  ns3::Mac16AddressValue "mac16-address.h"
AttributeValue implementation for Mac16Address.
\see AttributeValue
*/
/*!
\fn Mac16Address ns3::Mac16AddressValue::Mac16AddressValue(const Mac16Address & value)
Copy constructor.
\param [in] value The Mac16Address value to copy.
*/
/*!
\fn Mac16Address ns3::Mac16AddressValue::Get () const
\returns The Mac16Address value.
*/
/*!
\fn bool ns3::Mac16AddressValue::GetAccessor (T & value) const
Access the Mac16Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Mac16Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Mac16AddressValue::Set (const Mac16Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Mac16Address ns3::Mac16AddressValue::m_value
The stored Mac16Address instance.
*/

/*!
\ingroup attribute_Mac16Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac16AddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac16Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac16AddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac16Address

\class  ns3::Mac16AddressChecker "mac16-address.h"
AttributeChecker implementation for Mac16AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Mac16Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeMac16AddressChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Mac48Address Mac48Address Attribute
AttributeValue implementation for Mac48Address
\see ns3::Mac48Address
*/
/*!
\ingroup attribute_Mac48Address
\class  ns3::Mac48AddressValue "mac48-address.h"
AttributeValue implementation for Mac48Address.
\see AttributeValue
*/
/*!
\fn Mac48Address ns3::Mac48AddressValue::Mac48AddressValue(const Mac48Address & value)
Copy constructor.
\param [in] value The Mac48Address value to copy.
*/
/*!
\fn Mac48Address ns3::Mac48AddressValue::Get () const
\returns The Mac48Address value.
*/
/*!
\fn bool ns3::Mac48AddressValue::GetAccessor (T & value) const
Access the Mac48Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Mac48Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Mac48AddressValue::Set (const Mac48Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Mac48Address ns3::Mac48AddressValue::m_value
The stored Mac48Address instance.
*/

/*!
\ingroup attribute_Mac48Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac48AddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac48Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac48AddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac48Address

\class  ns3::Mac48AddressChecker "mac48-address.h"
AttributeChecker implementation for Mac48AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Mac48Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeMac48AddressChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Mac64Address Mac64Address Attribute
AttributeValue implementation for Mac64Address
\see ns3::Mac64Address
*/
/*!
\ingroup attribute_Mac64Address
\class  ns3::Mac64AddressValue "mac64-address.h"
AttributeValue implementation for Mac64Address.
\see AttributeValue
*/
/*!
\fn Mac64Address ns3::Mac64AddressValue::Mac64AddressValue(const Mac64Address & value)
Copy constructor.
\param [in] value The Mac64Address value to copy.
*/
/*!
\fn Mac64Address ns3::Mac64AddressValue::Get () const
\returns The Mac64Address value.
*/
/*!
\fn bool ns3::Mac64AddressValue::GetAccessor (T & value) const
Access the Mac64Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Mac64Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Mac64AddressValue::Set (const Mac64Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Mac64Address ns3::Mac64AddressValue::m_value
The stored Mac64Address instance.
*/

/*!
\ingroup attribute_Mac64Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac64AddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac64Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac64AddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac64Address

\class  ns3::Mac64AddressChecker "mac64-address.h"
AttributeChecker implementation for Mac64AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Mac64Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeMac64AddressChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_ObjectFactory ObjectFactory Attribute
AttributeValue implementation for ObjectFactory
\see ns3::ObjectFactory
*/
/*!
\ingroup attribute_ObjectFactory
\class  ns3::ObjectFactoryValue "object-factory.h"
AttributeValue implementation for ObjectFactory.
\see AttributeValue
*/
/*!
\fn ObjectFactory ns3::ObjectFactoryValue::ObjectFactoryValue(const ObjectFactory & value)
Copy constructor.
\param [in] value The ObjectFactory value to copy.
*/
/*!
\fn ObjectFactory ns3::ObjectFactoryValue::Get () const
\returns The ObjectFactory value.
*/
/*!
\fn bool ns3::ObjectFactoryValue::GetAccessor (T & value) const
Access the ObjectFactory value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The ObjectFactory value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::ObjectFactoryValue::Set (const ObjectFactory & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var ObjectFactory ns3::ObjectFactoryValue::m_value
The stored ObjectFactory instance.
*/

/*!
\ingroup attribute_ObjectFactory
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectFactoryAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectFactory
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectFactoryAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectFactory

\class  ns3::ObjectFactoryChecker "object-factory.h"
AttributeChecker implementation for ObjectFactoryValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_ObjectFactory
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeObjectFactoryChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_OrganizationIdentifier OrganizationIdentifier Attribute
AttributeValue implementation for OrganizationIdentifier
\see ns3::OrganizationIdentifier
*/
/*!
\ingroup attribute_OrganizationIdentifier
\class  ns3::OrganizationIdentifierValue "vendor-specific-action.h"
AttributeValue implementation for OrganizationIdentifier.
\see AttributeValue
*/
/*!
\fn OrganizationIdentifier ns3::OrganizationIdentifierValue::OrganizationIdentifierValue(const OrganizationIdentifier & value)
Copy constructor.
\param [in] value The OrganizationIdentifier value to copy.
*/
/*!
\fn OrganizationIdentifier ns3::OrganizationIdentifierValue::Get () const
\returns The OrganizationIdentifier value.
*/
/*!
\fn bool ns3::OrganizationIdentifierValue::GetAccessor (T & value) const
Access the OrganizationIdentifier value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The OrganizationIdentifier value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::OrganizationIdentifierValue::Set (const OrganizationIdentifier & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var OrganizationIdentifier ns3::OrganizationIdentifierValue::m_value
The stored OrganizationIdentifier instance.
*/

/*!
\ingroup attribute_OrganizationIdentifier
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeOrganizationIdentifierAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_OrganizationIdentifier
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeOrganizationIdentifierAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_OrganizationIdentifier

\class  ns3::OrganizationIdentifierChecker "vendor-specific-action.h"
AttributeChecker implementation for OrganizationIdentifierValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_OrganizationIdentifier
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeOrganizationIdentifierChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Priomap Priomap Attribute
AttributeValue implementation for Priomap
\see ns3::Priomap
*/
/*!
\ingroup attribute_Priomap
\class  ns3::PriomapValue "prio-queue-disc.h"
AttributeValue implementation for Priomap.
\see AttributeValue
*/
/*!
\fn Priomap ns3::PriomapValue::PriomapValue(const Priomap & value)
Copy constructor.
\param [in] value The Priomap value to copy.
*/
/*!
\fn Priomap ns3::PriomapValue::Get () const
\returns The Priomap value.
*/
/*!
\fn bool ns3::PriomapValue::GetAccessor (T & value) const
Access the Priomap value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Priomap value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::PriomapValue::Set (const Priomap & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Priomap ns3::PriomapValue::m_value
The stored Priomap instance.
*/

/*!
\ingroup attribute_Priomap
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakePriomapAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Priomap
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakePriomapAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Priomap

\class  ns3::PriomapChecker "prio-queue-disc.h"
AttributeChecker implementation for PriomapValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Priomap
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakePriomapChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_QueueSize QueueSize Attribute
AttributeValue implementation for QueueSize
\see ns3::QueueSize
*/
/*!
\ingroup attribute_QueueSize
\class  ns3::QueueSizeValue "queue-size.h"
AttributeValue implementation for QueueSize.
\see AttributeValue
*/
/*!
\fn QueueSize ns3::QueueSizeValue::QueueSizeValue(const QueueSize & value)
Copy constructor.
\param [in] value The QueueSize value to copy.
*/
/*!
\fn QueueSize ns3::QueueSizeValue::Get () const
\returns The QueueSize value.
*/
/*!
\fn bool ns3::QueueSizeValue::GetAccessor (T & value) const
Access the QueueSize value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The QueueSize value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::QueueSizeValue::Set (const QueueSize & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var QueueSize ns3::QueueSizeValue::m_value
The stored QueueSize instance.
*/

/*!
\ingroup attribute_QueueSize
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeQueueSizeAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_QueueSize
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeQueueSizeAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_QueueSize

\class  ns3::QueueSizeChecker "queue-size.h"
AttributeChecker implementation for QueueSizeValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_QueueSize
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeQueueSizeChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Rectangle Rectangle Attribute
AttributeValue implementation for Rectangle
\see ns3::Rectangle
*/
/*!
\ingroup attribute_Rectangle
\class  ns3::RectangleValue "rectangle.h"
AttributeValue implementation for Rectangle.
\see AttributeValue
*/
/*!
\fn Rectangle ns3::RectangleValue::RectangleValue(const Rectangle & value)
Copy constructor.
\param [in] value The Rectangle value to copy.
*/
/*!
\fn Rectangle ns3::RectangleValue::Get () const
\returns The Rectangle value.
*/
/*!
\fn bool ns3::RectangleValue::GetAccessor (T & value) const
Access the Rectangle value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Rectangle value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::RectangleValue::Set (const Rectangle & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Rectangle ns3::RectangleValue::m_value
The stored Rectangle instance.
*/

/*!
\ingroup attribute_Rectangle
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeRectangleAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Rectangle
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeRectangleAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Rectangle

\class  ns3::RectangleChecker "rectangle.h"
AttributeChecker implementation for RectangleValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Rectangle
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeRectangleChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Ssid Ssid Attribute
AttributeValue implementation for Ssid
\see ns3::Ssid
*/
/*!
\ingroup attribute_Ssid
\class  ns3::SsidValue "ssid.h"
AttributeValue implementation for Ssid.
\see AttributeValue
*/
/*!
\fn Ssid ns3::SsidValue::SsidValue(const Ssid & value)
Copy constructor.
\param [in] value The Ssid value to copy.
*/
/*!
\fn Ssid ns3::SsidValue::Get () const
\returns The Ssid value.
*/
/*!
\fn bool ns3::SsidValue::GetAccessor (T & value) const
Access the Ssid value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Ssid value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::SsidValue::Set (const Ssid & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Ssid ns3::SsidValue::m_value
The stored Ssid instance.
*/

/*!
\ingroup attribute_Ssid
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeSsidAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ssid
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeSsidAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ssid

\class  ns3::SsidChecker "ssid.h"
AttributeChecker implementation for SsidValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Ssid
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeSsidChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_TypeId TypeId Attribute
AttributeValue implementation for TypeId
\see ns3::TypeId
*/
/*!
\ingroup attribute_TypeId
\class  ns3::TypeIdValue "type-id.h"
AttributeValue implementation for TypeId.
\see AttributeValue
*/
/*!
\fn TypeId ns3::TypeIdValue::TypeIdValue(const TypeId & value)
Copy constructor.
\param [in] value The TypeId value to copy.
*/
/*!
\fn TypeId ns3::TypeIdValue::Get () const
\returns The TypeId value.
*/
/*!
\fn bool ns3::TypeIdValue::GetAccessor (T & value) const
Access the TypeId value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The TypeId value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::TypeIdValue::Set (const TypeId & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var TypeId ns3::TypeIdValue::m_value
The stored TypeId instance.
*/

/*!
\ingroup attribute_TypeId
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeTypeIdAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_TypeId
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeTypeIdAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_TypeId

\class  ns3::TypeIdChecker "type-id.h"
AttributeChecker implementation for TypeIdValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_TypeId
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeTypeIdChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_UanModesList UanModesList Attribute
AttributeValue implementation for UanModesList
\see ns3::UanModesList
*/
/*!
\ingroup attribute_UanModesList
\class  ns3::UanModesListValue "uan-tx-mode.h"
AttributeValue implementation for UanModesList.
\see AttributeValue
*/
/*!
\fn UanModesList ns3::UanModesListValue::UanModesListValue(const UanModesList & value)
Copy constructor.
\param [in] value The UanModesList value to copy.
*/
/*!
\fn UanModesList ns3::UanModesListValue::Get () const
\returns The UanModesList value.
*/
/*!
\fn bool ns3::UanModesListValue::GetAccessor (T & value) const
Access the UanModesList value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The UanModesList value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::UanModesListValue::Set (const UanModesList & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var UanModesList ns3::UanModesListValue::m_value
The stored UanModesList instance.
*/

/*!
\ingroup attribute_UanModesList
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeUanModesListAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_UanModesList
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeUanModesListAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_UanModesList

\class  ns3::UanModesListChecker "uan-tx-mode.h"
AttributeChecker implementation for UanModesListValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_UanModesList
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeUanModesListChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_ValueClassTest ValueClassTest Attribute
AttributeValue implementation for ValueClassTest
*/
/*!
\ingroup attribute_ValueClassTest
\class  ns3::ValueClassTestValue "attribute-test-suite.cc"
AttributeValue implementation for ValueClassTest.
\see AttributeValue
*/
/*!
\fn ValueClassTest ns3::ValueClassTestValue::ValueClassTestValue(const ValueClassTest & value)
Copy constructor.
\param [in] value The ValueClassTest value to copy.
*/
/*!
\fn ValueClassTest ns3::ValueClassTestValue::Get () const
\returns The ValueClassTest value.
*/
/*!
\fn bool ns3::ValueClassTestValue::GetAccessor (T & value) const
Access the ValueClassTest value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The ValueClassTest value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::ValueClassTestValue::Set (const ValueClassTest & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var ValueClassTest ns3::ValueClassTestValue::m_value
The stored ValueClassTest instance.
*/

/*!
\ingroup attribute_ValueClassTest
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeValueClassTestAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ValueClassTest
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeValueClassTestAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ValueClassTest

\class  ns3::ValueClassTestChecker "attribute-test-suite.cc"
AttributeChecker implementation for ValueClassTestValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_ValueClassTest
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeValueClassTestChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Vector Vector Attribute
AttributeValue implementation for Vector
\see ns3::Vector
*/
/*!
\ingroup attribute_Vector
\class  ns3::VectorValue "vector.h"
AttributeValue implementation for Vector.
\see AttributeValue
*/
/*!
\fn Vector ns3::VectorValue::VectorValue(const Vector & value)
Copy constructor.
\param [in] value The Vector value to copy.
*/
/*!
\fn Vector ns3::VectorValue::Get () const
\returns The Vector value.
*/
/*!
\fn bool ns3::VectorValue::GetAccessor (T & value) const
Access the Vector value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Vector value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::VectorValue::Set (const Vector & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Vector ns3::VectorValue::m_value
The stored Vector instance.
*/

/*!
\ingroup attribute_Vector
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVectorAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Vector
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVectorAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Vector

\class  ns3::VectorChecker "vector.h"
AttributeChecker implementation for VectorValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Vector
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeVectorChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Vector2D Vector2D Attribute
AttributeValue implementation for Vector2D
\see ns3::Vector2D
*/
/*!
\ingroup attribute_Vector2D
\class  ns3::Vector2DValue "vector.h"
AttributeValue implementation for Vector2D.
\see AttributeValue
*/
/*!
\fn Vector2D ns3::Vector2DValue::Vector2DValue(const Vector2D & value)
Copy constructor.
\param [in] value The Vector2D value to copy.
*/
/*!
\fn Vector2D ns3::Vector2DValue::Get () const
\returns The Vector2D value.
*/
/*!
\fn bool ns3::Vector2DValue::GetAccessor (T & value) const
Access the Vector2D value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Vector2D value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Vector2DValue::Set (const Vector2D & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Vector2D ns3::Vector2DValue::m_value
The stored Vector2D instance.
*/

/*!
\ingroup attribute_Vector2D
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVector2DAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Vector2D
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVector2DAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Vector2D

\class  ns3::Vector2DChecker "vector.h"
AttributeChecker implementation for Vector2DValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Vector2D
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeVector2DChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Vector3D Vector3D Attribute
AttributeValue implementation for Vector3D
\see ns3::Vector3D
*/
/*!
\ingroup attribute_Vector3D
\class  ns3::Vector3DValue "vector.h"
AttributeValue implementation for Vector3D.
\see AttributeValue
*/
/*!
\fn Vector3D ns3::Vector3DValue::Vector3DValue(const Vector3D & value)
Copy constructor.
\param [in] value The Vector3D value to copy.
*/
/*!
\fn Vector3D ns3::Vector3DValue::Get () const
\returns The Vector3D value.
*/
/*!
\fn bool ns3::Vector3DValue::GetAccessor (T & value) const
Access the Vector3D value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Vector3D value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Vector3DValue::Set (const Vector3D & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Vector3D ns3::Vector3DValue::m_value
The stored Vector3D instance.
*/

/*!
\ingroup attribute_Vector3D
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVector3DAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Vector3D
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVector3DAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Vector3D

\class  ns3::Vector3DChecker "vector.h"
AttributeChecker implementation for Vector3DValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Vector3D
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeVector3DChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Waypoint Waypoint Attribute
AttributeValue implementation for Waypoint
\see ns3::Waypoint
*/
/*!
\ingroup attribute_Waypoint
\class  ns3::WaypointValue "waypoint.h"
AttributeValue implementation for Waypoint.
\see AttributeValue
*/
/*!
\fn Waypoint ns3::WaypointValue::WaypointValue(const Waypoint & value)
Copy constructor.
\param [in] value The Waypoint value to copy.
*/
/*!
\fn Waypoint ns3::WaypointValue::Get () const
\returns The Waypoint value.
*/
/*!
\fn bool ns3::WaypointValue::GetAccessor (T & value) const
Access the Waypoint value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Waypoint value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::WaypointValue::Set (const Waypoint & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Waypoint ns3::WaypointValue::m_value
The stored Waypoint instance.
*/

/*!
\ingroup attribute_Waypoint
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeWaypointAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Waypoint
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeWaypointAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Waypoint

\class  ns3::WaypointChecker "waypoint.h"
AttributeChecker implementation for WaypointValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Waypoint
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeWaypointChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_WifiMode WifiMode Attribute
AttributeValue implementation for WifiMode
\see ns3::WifiMode
*/
/*!
\ingroup attribute_WifiMode
\class  ns3::WifiModeValue "wifi-mode.h"
AttributeValue implementation for WifiMode.
\see AttributeValue
*/
/*!
\fn WifiMode ns3::WifiModeValue::WifiModeValue(const WifiMode & value)
Copy constructor.
\param [in] value The WifiMode value to copy.
*/
/*!
\fn WifiMode ns3::WifiModeValue::Get () const
\returns The WifiMode value.
*/
/*!
\fn bool ns3::WifiModeValue::GetAccessor (T & value) const
Access the WifiMode value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The WifiMode value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::WifiModeValue::Set (const WifiMode & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var WifiMode ns3::WifiModeValue::m_value
The stored WifiMode instance.
*/

/*!
\ingroup attribute_WifiMode
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeWifiModeAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_WifiMode
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeWifiModeAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_WifiMode

\class  ns3::WifiModeChecker "wifi-mode.h"
AttributeChecker implementation for WifiModeValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_WifiMode
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeWifiModeChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Boolean Boolean Attribute
AttributeValue implementation for Boolean
*/
/*!
\ingroup attribute_Boolean
\class  ns3::BooleanValue "boolean.h"
AttributeValue implementation for Boolean.
\see AttributeValue
*/
/*!
\fn Boolean ns3::BooleanValue::BooleanValue(const bool & value)
Copy constructor.
\param [in] value The Boolean value to copy.
*/
/*!
\fn bool ns3::BooleanValue::Get () const
\returns The Boolean value.
*/
/*!
\fn bool ns3::BooleanValue::GetAccessor (T & value) const
Access the Boolean value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Boolean value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::BooleanValue::Set (const bool & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var bool ns3::BooleanValue::m_value
The stored Boolean instance.
*/

/*!
\ingroup attribute_Boolean
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeBooleanAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Boolean
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeBooleanAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Boolean

\class  ns3::BooleanChecker "boolean.h"
AttributeChecker implementation for BooleanValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Boolean
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeBooleanChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Callback Callback Attribute
AttributeValue implementation for Callback
\see ns3::Callback
*/
/*!
\ingroup attribute_Callback
\class  ns3::CallbackValue "callback.h"
AttributeValue implementation for Callback.
\see AttributeValue
*/
/*!
\fn Callback ns3::CallbackValue::CallbackValue(const Callback & value)
Copy constructor.
\param [in] value The Callback value to copy.
*/
/*!
\fn Callback ns3::CallbackValue::Get () const
\returns The Callback value.
*/
/*!
\fn bool ns3::CallbackValue::GetAccessor (T & value) const
Access the Callback value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Callback value, as type \p T.
\returns true.
*/
/*!
\var Callback ns3::CallbackValue::m_value
The stored Callback instance.
*/

/*!
\ingroup attribute_Callback
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeCallbackAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Callback
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeCallbackAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Callback

\class  ns3::CallbackChecker "callback.h"
AttributeChecker implementation for CallbackValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Callback
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeCallbackChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Double Double Attribute
AttributeValue implementation for Double
*/
/*!
\ingroup attribute_Double
\class  ns3::DoubleValue "double.h"
AttributeValue implementation for Double.
\see AttributeValue
*/
/*!
\fn Double ns3::DoubleValue::DoubleValue(const double & value)
Copy constructor.
\param [in] value The Double value to copy.
*/
/*!
\fn double ns3::DoubleValue::Get () const
\returns The Double value.
*/
/*!
\fn bool ns3::DoubleValue::GetAccessor (T & value) const
Access the Double value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Double value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::DoubleValue::Set (const double & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var double ns3::DoubleValue::m_value
The stored Double instance.
*/

/*!
\ingroup attribute_Double
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDoubleAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Double
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDoubleAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Double

\class  ns3::DoubleChecker "double.h"
AttributeChecker implementation for DoubleValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Double
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeDoubleChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Enum Enum Attribute
AttributeValue implementation for Enum
*/
/*!
\ingroup attribute_Enum
\class  ns3::EnumValue "enum.h"
AttributeValue implementation for Enum.
\see AttributeValue
*/
/*!
\fn Enum ns3::EnumValue::EnumValue(const int & value)
Copy constructor.
\param [in] value The Enum value to copy.
*/
/*!
\fn int ns3::EnumValue::Get () const
\returns The Enum value.
*/
/*!
\fn bool ns3::EnumValue::GetAccessor (T & value) const
Access the Enum value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Enum value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::EnumValue::Set (const int & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var int ns3::EnumValue::m_value
The stored Enum instance.
*/

/*!
\ingroup attribute_Enum
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeEnumAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Enum
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeEnumAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Enum

\class  ns3::EnumChecker "enum.h"
AttributeChecker implementation for EnumValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Enum
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeEnumChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Integer Integer Attribute
AttributeValue implementation for Integer
*/
/*!
\ingroup attribute_Integer
\class  ns3::IntegerValue "integer.h"
AttributeValue implementation for Integer.
\see AttributeValue
*/
/*!
\fn Integer ns3::IntegerValue::IntegerValue(const int64_t & value)
Copy constructor.
\param [in] value The Integer value to copy.
*/
/*!
\fn int64_t ns3::IntegerValue::Get () const
\returns The Integer value.
*/
/*!
\fn bool ns3::IntegerValue::GetAccessor (T & value) const
Access the Integer value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Integer value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::IntegerValue::Set (const int64_t & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var int64_t ns3::IntegerValue::m_value
The stored Integer instance.
*/

/*!
\ingroup attribute_Integer
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIntegerAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Integer
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIntegerAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Integer

\class  ns3::IntegerChecker "integer.h"
AttributeChecker implementation for IntegerValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Integer
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIntegerChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Pointer Pointer Attribute
AttributeValue implementation for Pointer
*/
/*!
\ingroup attribute_Pointer
\class  ns3::PointerValue "pointer.h"
AttributeValue implementation for Pointer.
\see AttributeValue
*/
/*!
\fn Pointer ns3::PointerValue::PointerValue(const Pointer & value)
Copy constructor.
\param [in] value The Pointer value to copy.
*/
/*!
\fn Pointer ns3::PointerValue::Get () const
\returns The Pointer value.
*/
/*!
\fn bool ns3::PointerValue::GetAccessor (T & value) const
Access the Pointer value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Pointer value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::PointerValue::Set (const Pointer & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Pointer ns3::PointerValue::m_value
The stored Pointer instance.
*/

/*!
\ingroup attribute_Pointer
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakePointerAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Pointer
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakePointerAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Pointer

\class  ns3::PointerChecker "pointer.h"
AttributeChecker implementation for PointerValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Pointer
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakePointerChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_String String Attribute
AttributeValue implementation for String
*/
/*!
\ingroup attribute_String
\class  ns3::StringValue "string.h"
AttributeValue implementation for String.
\see AttributeValue
*/
/*!
\fn String ns3::StringValue::StringValue(const std::string & value)
Copy constructor.
\param [in] value The String value to copy.
*/
/*!
\fn std::string ns3::StringValue::Get () const
\returns The String value.
*/
/*!
\fn bool ns3::StringValue::GetAccessor (T & value) const
Access the String value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The String value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::StringValue::Set (const std::string & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var std::string ns3::StringValue::m_value
The stored String instance.
*/

/*!
\ingroup attribute_String
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeStringAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_String
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeStringAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_String

\class  ns3::StringChecker "string.h"
AttributeChecker implementation for StringValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_String
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeStringChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Time Time Attribute
AttributeValue implementation for Time
\see ns3::Time
*/
/*!
\ingroup attribute_Time
\class  ns3::TimeValue "nstime.h"
AttributeValue implementation for Time.
\see AttributeValue
*/
/*!
\fn Time ns3::TimeValue::TimeValue(const Time & value)
Copy constructor.
\param [in] value The Time value to copy.
*/
/*!
\fn Time ns3::TimeValue::Get () const
\returns The Time value.
*/
/*!
\fn bool ns3::TimeValue::GetAccessor (T & value) const
Access the Time value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Time value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::TimeValue::Set (const Time & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Time ns3::TimeValue::m_value
The stored Time instance.
*/

/*!
\ingroup attribute_Time
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeTimeAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Time
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeTimeAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Time

\class  ns3::TimeChecker "nstime.h"
AttributeChecker implementation for TimeValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Time
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeTimeChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Uinteger Uinteger Attribute
AttributeValue implementation for Uinteger
*/
/*!
\ingroup attribute_Uinteger
\class  ns3::UintegerValue "uinteger.h"
AttributeValue implementation for Uinteger.
\see AttributeValue
*/
/*!
\fn Uinteger ns3::UintegerValue::UintegerValue(const uint64_t & value)
Copy constructor.
\param [in] value The Uinteger value to copy.
*/
/*!
\fn uint64_t ns3::UintegerValue::Get () const
\returns The Uinteger value.
*/
/*!
\fn bool ns3::UintegerValue::GetAccessor (T & value) const
Access the Uinteger value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Uinteger value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::UintegerValue::Set (const uint64_t & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var uint64_t ns3::UintegerValue::m_value
The stored Uinteger instance.
*/

/*!
\ingroup attribute_Uinteger
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeUintegerAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Uinteger
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeUintegerAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Uinteger

\class  ns3::UintegerChecker "uinteger.h"
AttributeChecker implementation for UintegerValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Uinteger
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeUintegerChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_EmptyAttribute EmptyAttribute Attribute
AttributeValue implementation for EmptyAttribute
*/
/*!
\ingroup attribute_EmptyAttribute
\class  ns3::EmptyAttributeValue "attribute.h"
AttributeValue implementation for EmptyAttribute.
\see AttributeValue
*/
/*!
\fn EmptyAttribute ns3::EmptyAttributeValue::EmptyAttributeValue()
*/
/*!
\fn EmptyAttribute ns3::EmptyAttributeValue::Get () const
\returns The EmptyAttribute value.
*/
/*!
\fn bool ns3::EmptyAttributeValue::GetAccessor (T & value) const
Access the EmptyAttribute value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The EmptyAttribute value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::EmptyAttributeValue::Set (const EmptyAttribute & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var EmptyAttribute ns3::EmptyAttributeValue::m_value
The stored EmptyAttribute instance.
*/

/*!
\ingroup attributes
\addtogroup attribute_ObjectPtrContainer ObjectPtrContainer Attribute
AttributeValue implementation for ObjectPtrContainer
*/
/*!
\ingroup attribute_ObjectPtrContainer
\class  ns3::ObjectPtrContainerValue "object-ptr-container.h"
AttributeValue implementation for ObjectPtrContainer.
\see AttributeValue
*/
/*!
\fn ObjectPtrContainer ns3::ObjectPtrContainerValue::ObjectPtrContainerValue()
*/
/*!
\fn ObjectPtrContainer ns3::ObjectPtrContainerValue::Get () const
\returns The ObjectPtrContainer value.
*/
/*!
\fn bool ns3::ObjectPtrContainerValue::GetAccessor (T & value) const
Access the ObjectPtrContainer value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The ObjectPtrContainer value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::ObjectPtrContainerValue::Set (const ObjectPtrContainer & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var ObjectPtrContainer ns3::ObjectPtrContainerValue::m_value
The stored ObjectPtrContainer instance.
*/

/*!
\ingroup attribute_ObjectPtrContainer

\class  ns3::ObjectPtrContainerChecker "object-ptr-container.h"
AttributeChecker implementation for ObjectPtrContainerValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_ObjectPtrContainer
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeObjectPtrContainerChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_ObjectVector ObjectVector Attribute
AttributeValue implementation for ObjectVector
*/
/*!
\ingroup attribute_ObjectVector
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectVectorAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectVector
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectVectorAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectVector

\class  ns3::ObjectVectorChecker "object-vector.h"
AttributeChecker implementation for ObjectVectorValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_ObjectVector
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeObjectVectorChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_ObjectMap ObjectMap Attribute
AttributeValue implementation for ObjectMap
*/
/*!
\ingroup attribute_ObjectMap
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectMapAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectMap
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectMapAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectMap

\class  ns3::ObjectMapChecker "object-map.h"
AttributeChecker implementation for ObjectMapValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_ObjectMap
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeObjectMapChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Pair Pair Attribute
AttributeValue implementation for Pair
*/
/*!
\ingroup attribute_Pair
\class  ns3::PairValue "pair.h"
AttributeValue implementation for Pair.
\see AttributeValue
*/
/*!
\fn Pair ns3::PairValue::PairValue(const std::pair<A, B> & value)
Copy constructor.
\param [in] value The Pair value to copy.
*/
/*!
\fn std::pair<A, B> ns3::PairValue::Get () const
\returns The Pair value.
*/
/*!
\fn bool ns3::PairValue::GetAccessor (T & value) const
Access the Pair value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Pair value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::PairValue::Set (const std::pair<A, B> & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var std::pair<A, B> ns3::PairValue::m_value
The stored Pair instance.
*/

/*!
\ingroup attribute_Pair

\class  ns3::PairChecker "pair.h"
AttributeChecker implementation for PairValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Pair
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakePairChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attributes
\addtogroup attribute_Tuple Tuple Attribute
AttributeValue implementation for Tuple
*/
/*!
\ingroup attribute_Tuple
\class  ns3::TupleValue "tuple.h"
AttributeValue implementation for Tuple.
\see AttributeValue
*/
/*!
\fn Tuple ns3::TupleValue::TupleValue(const std::tuple<Args...> & value)
Copy constructor.
\param [in] value The Tuple value to copy.
*/
/*!
\fn std::tuple<Args...> ns3::TupleValue::Get () const
\returns The Tuple value.
*/
/*!
\fn bool ns3::TupleValue::GetAccessor (T & value) const
Access the Tuple value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Tuple value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::TupleValue::Set (const std::tuple<Args...> & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var std::tuple<Args...> ns3::TupleValue::m_value
The stored Tuple instance.
*/

/*!
\ingroup attribute_Tuple

\class  ns3::TupleChecker "tuple.h"
AttributeChecker implementation for TupleValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Tuple
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeTupleChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute_AttributeContainer

\class  ns3::AttributeContainerChecker "attribute-container.h"
AttributeChecker implementation for AttributeContainerValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_AttributeContainer
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeAttributeContainerChecker ()
\returns The AttributeChecker.
\see AttributeChecker
*/
